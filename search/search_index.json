{
    "docs": [
        {
            "location": "/", 
            "text": "PlinkerRPC PHP client/server allows you to securely execute generic PHP \ncode and components on remote sites, while maintaining the feel of a local method call.\n\n\nComponents\n\n\nEach component is a composer package, you can find them \non packagist\n.\n\n\n\n\n\n\n\n\nComponent\n\n\nDescription\n\n\nVersion\n\n\n\n\n\n\n\n\n\n\ncore\n\n\nRequired base component which contains the client and server.\n\n\n\n\n\n\n\n\nasterisk\n\n\nAn Asterisk component which hooks into the Asterisk Management Interface on remote systems.\n\n\n\n\n\n\n\n\nbase91\n\n\nA core component, which base91 encodes the payload.\n\n\n\n\n\n\n\n\ncron\n\n\nA cron component which allows you to read and control cron tasks.\n\n\n\n\n\n\n\n\nfiles\n\n\nRead and write files on remote systems.\n\n\n\n\n\n\n\n\niptables\n\n\nControl IPtables on remote systems, mainly for purpose of port forwarding.\n\n\n\n\n\n\n\n\nlxc\n\n\nWIP: An older/deprecated component which controls LXC1.0 containers.\n\n\n\n\n\n\n\n\nnginx\n\n\nManage nginx as a reverse proxy.\n\n\n\n\n\n\n\n\nredbean\n\n\nRedBeanPHP component which will enable you to directly manage databases on remote sites.\n\n\n\n\n\n\n\n\nsystem\n\n\nA system component which gives you access to server information.\n\n\n\n\n\n\n\n\ntasks\n\n\nThe tasks component allows you to write code based tasks which are completed by a daemon, this could allow you to create a single interface to control a cluster of servers tasks.\n\n\n\n\n\n\n\n\ntest\n\n\nA test component which simply returns back what you sent, for testing/example purposes.\n\n\n\n\n\n\n\n\n\n\n\n\nDid you know?\n\n\nPlinkerRPC PHP client/server is also \navailable as a C extension\n which can be installed with Zephir.\n\n\n\n\n\n\nDevelopment Repository\n\n\nThe development repository is used to develop the entire project to make it easy to work on many parts at the same time without forgetting what was done,\nit contains a bash script which will commit and do semantic versioning for each sub component.\n\n\nInstalling\n\n\n\n\ngit clone git@github.com:plinker-rpc/development.git .\n\n\ncomposer install\n\n\n\n\nCommitting Changes\n\n\nBash scripts have been added to automate this, do not do it manually.\n\n\n\n\nbash ./commit.sh \nA really informative commit message.\n\n\n\n\nThe above 1 liner will ask:\n\n\nDo you wish to [c]ommit, [d]eploy or [e]xit?\n\n\n\n\nIf you choose commit, it will push your changes and docs to github.\n\n\nIf you choose deploy, it will ask: \nWhich type of changes has been done: [p]atch, [m]inor, [M]ajor?\n, upon choice it will increment the semantic version, tag then push your changes and docs to github.\n\n\n\n\nbash ./dev_mkdocs.sh\n is used to write docs with hot reloading at \nhttp://127.0.0.0:8000\n\n\nNew Components\n\n\nTo create a new component simply edit the \ncomponent-generator.php\n file then run it.\n\n\nIt will generate the following structure in vendor, ready to start \ncreating your component package.\n\n\ncomponent \u2510\n          \u251c\u2500\u2500 src\n          \u2502   \u251c\u2500\u2500 Component.php\n          \u251c\u2500\u2500 tests\n          \u2502   \u251c\u2500\u2500 fixtures\n          \u2502   \u251c\u2500\u2500 ComponentTest.php\n          \u2502   \u2514\u2500\u2500 bootstrap.php\n          \u251c\u2500\u2500 .gitignore\n          \u251c\u2500\u2500 .scrutinizer.yml\n          \u251c\u2500\u2500 .styleci.yml\n          \u251c\u2500\u2500 .travis.yml\n          \u251c\u2500\u2500 CONTRIBUTING.md\n          \u251c\u2500\u2500 LICENSE\n          \u251c\u2500\u2500 phpunit.xml\n          \u251c\u2500\u2500 README.md\n          \u2514\u2500\u2500 composer.json\n\n\n\n\n\nWhen ready:\n\n\n\n\nMake sure \nREADME.md\n conforms to docs structure.\n\n\nCreate a github repository in the organisation, push your changes.\n\n\nAdd the new component to \ncommit.sh\n, \ndev_mkdocs.sh\n and \nmkdocs.sh\n component arrays.\n\n\nRun \nbash ./commit.sh \nInital Commit\n\n\nAdd to packagist.\n\n\nEnable on \nStyleCI\n, \nTravisCI\n, \nScrutinizerCI\n.\n\n\n\n\nRequest a Component\n\n\nIf you've got an idea for a component and would like to see it added, feel free to \nopen an issue\n.\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.", 
            "title": "Home"
        }, 
        {
            "location": "/#components", 
            "text": "Each component is a composer package, you can find them  on packagist .     Component  Description  Version      core  Required base component which contains the client and server.     asterisk  An Asterisk component which hooks into the Asterisk Management Interface on remote systems.     base91  A core component, which base91 encodes the payload.     cron  A cron component which allows you to read and control cron tasks.     files  Read and write files on remote systems.     iptables  Control IPtables on remote systems, mainly for purpose of port forwarding.     lxc  WIP: An older/deprecated component which controls LXC1.0 containers.     nginx  Manage nginx as a reverse proxy.     redbean  RedBeanPHP component which will enable you to directly manage databases on remote sites.     system  A system component which gives you access to server information.     tasks  The tasks component allows you to write code based tasks which are completed by a daemon, this could allow you to create a single interface to control a cluster of servers tasks.     test  A test component which simply returns back what you sent, for testing/example purposes.       Did you know?  PlinkerRPC PHP client/server is also  available as a C extension  which can be installed with Zephir.", 
            "title": "Components"
        }, 
        {
            "location": "/#development-repository", 
            "text": "The development repository is used to develop the entire project to make it easy to work on many parts at the same time without forgetting what was done,\nit contains a bash script which will commit and do semantic versioning for each sub component.", 
            "title": "Development Repository"
        }, 
        {
            "location": "/#installing", 
            "text": "git clone git@github.com:plinker-rpc/development.git .  composer install", 
            "title": "Installing"
        }, 
        {
            "location": "/#committing-changes", 
            "text": "Bash scripts have been added to automate this, do not do it manually.   bash ./commit.sh  A really informative commit message.   The above 1 liner will ask:  Do you wish to [c]ommit, [d]eploy or [e]xit?   If you choose commit, it will push your changes and docs to github.  If you choose deploy, it will ask:  Which type of changes has been done: [p]atch, [m]inor, [M]ajor? , upon choice it will increment the semantic version, tag then push your changes and docs to github.   bash ./dev_mkdocs.sh  is used to write docs with hot reloading at  http://127.0.0.0:8000", 
            "title": "Committing Changes"
        }, 
        {
            "location": "/#new-components", 
            "text": "To create a new component simply edit the  component-generator.php  file then run it.  It will generate the following structure in vendor, ready to start \ncreating your component package.  component \u2510\n          \u251c\u2500\u2500 src\n          \u2502   \u251c\u2500\u2500 Component.php\n          \u251c\u2500\u2500 tests\n          \u2502   \u251c\u2500\u2500 fixtures\n          \u2502   \u251c\u2500\u2500 ComponentTest.php\n          \u2502   \u2514\u2500\u2500 bootstrap.php\n          \u251c\u2500\u2500 .gitignore\n          \u251c\u2500\u2500 .scrutinizer.yml\n          \u251c\u2500\u2500 .styleci.yml\n          \u251c\u2500\u2500 .travis.yml\n          \u251c\u2500\u2500 CONTRIBUTING.md\n          \u251c\u2500\u2500 LICENSE\n          \u251c\u2500\u2500 phpunit.xml\n          \u251c\u2500\u2500 README.md\n          \u2514\u2500\u2500 composer.json  When ready:   Make sure  README.md  conforms to docs structure.  Create a github repository in the organisation, push your changes.  Add the new component to  commit.sh ,  dev_mkdocs.sh  and  mkdocs.sh  component arrays.  Run  bash ./commit.sh  Inital Commit  Add to packagist.  Enable on  StyleCI ,  TravisCI ,  ScrutinizerCI .", 
            "title": "New Components"
        }, 
        {
            "location": "/#request-a-component", 
            "text": "If you've got an idea for a component and would like to see it added, feel free to  open an issue .", 
            "title": "Request a Component"
        }, 
        {
            "location": "/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/asterisk/", 
            "text": "Asterisk\n\n\n\n\nDevelopment halted\n\n\nThis component is no longer being actively developed, though bugs will be fixed if reported.\n\n\n\n\nAn Asterisk component which hooks into the Asterisk Management Interface (AMI) on remote systems. \nUsing it adds additional layer of security as you can now lock down AMI to listen on only on localhost.\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/asterisk\n\n\n\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n,\n\n        \ndatabase\n \n=\n \n[\n\n            \ndsn\n \n=\n \nmysql:host=127.0.0.1;dbname=asterisk\n,\n\n            \nusername\n \n=\n \n,\n\n            \npassword\n \n=\n \n,\n\n            \ndatabase\n \n=\n \n,\n\n            \nfreeze\n \n=\n \nfalse\n,\n\n            \ndebug\n \n=\n \nfalse\n\n        \n],\n\n        \nami\n \n=\n \n[\n\n            \nserver\n \n=\n \n127.0.0.1\n,\n\n            \nport\n \n=\n \n5038\n,\n\n            \nusername\n \n=\n \n,\n\n            \npassword\n \n=\n \n\n        \n]\n\n    \n]\n\n\n);\n\n\n\n// or using global function\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n,\n \n[\n\n    \ndatabase\n \n=\n \n[\n\n        \ndsn\n \n=\n \nmysql:host=127.0.0.1;dbname=asterisk\n,\n\n        \nusername\n \n=\n \n,\n\n        \npassword\n \n=\n \n,\n\n        \ndatabase\n \n=\n \n,\n\n        \nfreeze\n \n=\n \nfalse\n,\n\n        \ndebug\n \n=\n \nfalse\n\n    \n],\n\n    \nami\n \n=\n \n[\n\n        \nserver\n \n=\n \n127.0.0.1\n,\n\n        \nport\n \n=\n \n5038\n,\n\n        \nusername\n \n=\n \n,\n\n        \npassword\n \n=\n \n\n    \n]\n\n\n]);\n\n\n\n\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method.\n\n\nCommand\n\n\nExecute ASM command.\n\n\nCall\n\n\n$result = $client-\nasterisk-\ncommand(\nsip show peers\n);\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nGet Queue\n\n\nConnect into AMI and issue asterisk command [queue show *].\n\n\nCall\n\n\n$result = $client-\nasterisk-\ngetQueue(\nfoo\n);\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nShow Channels\n\n\nConnect into AMI and issue asterisk command [core show channels].\n\n\nCall\n\n\n$result = $client-\nasterisk-\ncoreShowChannels();\n\n\n\n\n\nResponse\n\n\nArray\n(\n    \nactive_channels\n =\n 0,\n    \nactive_calls\n =\n 0,\n    \ncalls_processed\n =\n 0\n}\n\n\n\n\n\nAnd other methods see: \nvendor/asterisk/src/Asterisk.php\n\n\nTesting\n\n\nThere are no tests setup for this component.\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee \norganisations page\n for additional components.", 
            "title": "Asterisk"
        }, 
        {
            "location": "/asterisk/#asterisk", 
            "text": "Development halted  This component is no longer being actively developed, though bugs will be fixed if reported.   An Asterisk component which hooks into the Asterisk Management Interface (AMI) on remote systems. \nUsing it adds additional layer of security as you can now lock down AMI to listen on only on localhost.", 
            "title": "Asterisk"
        }, 
        {
            "location": "/asterisk/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/asterisk", 
            "title": "Install"
        }, 
        {
            "location": "/asterisk/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password , \n         database   =   [ \n             dsn   =   mysql:host=127.0.0.1;dbname=asterisk , \n             username   =   , \n             password   =   , \n             database   =   , \n             freeze   =   false , \n             debug   =   false \n         ], \n         ami   =   [ \n             server   =   127.0.0.1 , \n             port   =   5038 , \n             username   =   , \n             password   =   \n         ] \n     ]  );  // or using global function  $client   =   plinker_client ( http://example.com/server.php ,   a secret password ,   [ \n     database   =   [ \n         dsn   =   mysql:host=127.0.0.1;dbname=asterisk , \n         username   =   , \n         password   =   , \n         database   =   , \n         freeze   =   false , \n         debug   =   false \n     ], \n     ami   =   [ \n         server   =   127.0.0.1 , \n         port   =   5038 , \n         username   =   , \n         password   =   \n     ]  ]);", 
            "title": "Client"
        }, 
        {
            "location": "/asterisk/#methods", 
            "text": "Once setup, you call the class though its namespace to its method.", 
            "title": "Methods"
        }, 
        {
            "location": "/asterisk/#command", 
            "text": "Execute ASM command.  Call  $result = $client- asterisk- command( sip show peers );  Response", 
            "title": "Command"
        }, 
        {
            "location": "/asterisk/#get-queue", 
            "text": "Connect into AMI and issue asterisk command [queue show *].  Call  $result = $client- asterisk- getQueue( foo );  Response", 
            "title": "Get Queue"
        }, 
        {
            "location": "/asterisk/#show-channels", 
            "text": "Connect into AMI and issue asterisk command [core show channels].  Call  $result = $client- asterisk- coreShowChannels();  Response  Array\n(\n     active_channels  =  0,\n     active_calls  =  0,\n     calls_processed  =  0\n}  And other methods see:  vendor/asterisk/src/Asterisk.php", 
            "title": "Show Channels"
        }, 
        {
            "location": "/asterisk/#testing", 
            "text": "There are no tests setup for this component.", 
            "title": "Testing"
        }, 
        {
            "location": "/asterisk/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/asterisk/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/asterisk/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/asterisk/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/asterisk/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/asterisk/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See  organisations page  for additional components.", 
            "title": "License"
        }, 
        {
            "location": "/base91/", 
            "text": "Base91\n\n\n\n\nInfo\n\n\nThis component was originally used as part of the core for encoding the encrypted payload, but it is no longer used as to support the PHP extension version of the client.\n\n\n\n\nBase91 is an advanced method for encoding binary data as ASCII characters. \nIt is similar to base64, but is more efficient and compact. \nThe overhead produced by base91 depends on the input data. It amounts at \nmost to 23% (versus 33% for base64) and can range down to 14%, which typically \noccurs on 0-byte blocks. This makes base91 very useful for transferring larger \nfiles over binary unsafe connections like e-mail or terminal lines.\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/base91\n\n\n\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n\n    \n]\n\n\n);\n\n\n\n// or using global function\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n);\n\n\n\n\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method.\n\n\nEncode\n\n\nEncode a string.\n\n\nCall\n\n\n$result = $client-\nbase91-\nencode(\nencode this string\n);\n\n\n\n\n\n\nResponse\n\n\ntoX\n5+UCmUW6GFso^zZ2(.A\n\n\n\n\n\nDecode\n\n\nDecode a string.\n\n\nCall\n\n\n$result = $client-\nbase91-\ndecode(\ntoX\n5+UCmUW6GFso^zZ2(.A\n);\n\n\n\n\n\nResponse\n\n\nencode this string\n\n\n\n\n\nTesting\n\n\nThere are no tests setup for this component.\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee \norganisations page\n for additional components.", 
            "title": "Base91"
        }, 
        {
            "location": "/base91/#base91", 
            "text": "Info  This component was originally used as part of the core for encoding the encrypted payload, but it is no longer used as to support the PHP extension version of the client.   Base91 is an advanced method for encoding binary data as ASCII characters. \nIt is similar to base64, but is more efficient and compact. \nThe overhead produced by base91 depends on the input data. It amounts at \nmost to 23% (versus 33% for base64) and can range down to 14%, which typically \noccurs on 0-byte blocks. This makes base91 very useful for transferring larger \nfiles over binary unsafe connections like e-mail or terminal lines.", 
            "title": "Base91"
        }, 
        {
            "location": "/base91/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/base91", 
            "title": "Install"
        }, 
        {
            "location": "/base91/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password \n     ]  );  // or using global function  $client   =   plinker_client ( http://example.com/server.php ,   a secret password );", 
            "title": "Client"
        }, 
        {
            "location": "/base91/#methods", 
            "text": "Once setup, you call the class though its namespace to its method.", 
            "title": "Methods"
        }, 
        {
            "location": "/base91/#encode", 
            "text": "Encode a string.  Call  $result = $client- base91- encode( encode this string );   Response  toX 5+UCmUW6GFso^zZ2(.A", 
            "title": "Encode"
        }, 
        {
            "location": "/base91/#decode", 
            "text": "Decode a string.  Call  $result = $client- base91- decode( toX 5+UCmUW6GFso^zZ2(.A );  Response  encode this string", 
            "title": "Decode"
        }, 
        {
            "location": "/base91/#testing", 
            "text": "There are no tests setup for this component.", 
            "title": "Testing"
        }, 
        {
            "location": "/base91/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/base91/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/base91/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/base91/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/base91/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/base91/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See  organisations page  for additional components.", 
            "title": "License"
        }, 
        {
            "location": "/core/", 
            "text": "PlinkerRPC PHP client/server makes it really easy to link and execute generic PHP components on remote systems, while maintaining the feel of a local method call.\n\n\nDocs:\n \nhttps://plinker-rpc.github.io/core\n\n\nNew changes in version 3 include:\n\n\n\n\nNow compaible with \nPHP extension\n.\n\n\nBuilt-in core components and info method added so components can be discovered.\n\n\nOnly one client instance is now needed, made use of __get() to dynamically set component.\n\n\nUser defined components/classes, so you can call your own code.\n\n\nBoth request and response is encrypted and signed.\n\n\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/core\n\n\n\n\n\nAdditional Setup\n\n\nThis component does not require any additional setup.\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n,\n\n    \n]\n\n\n);\n\n\n\n// or using global function\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n);\n\n\n\n\n\n\nServer\n\n\nCreating a server listener is done as follows:\n\n\nOptional features:\n\n\n\n\nSet a secret, which all clients will require. \n\n\nLock down to specific client IP addresses for addtional security.\n\n\nDefine your own classes in the \nclasses\n array then access like above \n$client-\nclass-\nmethod()\n, which can interface out of scope components or composer packages.\n\n\nDefine addtional key values for database connections etc, or you could pass the parameters through the client connection.\n\n\n\n\n\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker server.\n\n\n */\n\n\nif\n \n(\nisset\n(\n$_SERVER\n[\nHTTP_PLINKER\n]))\n \n{\n\n    \n// init plinker server\n\n    \necho\n \n(\nnew\n \n\\Plinker\\Server\n([\n\n        \nsecret\n \n=\n \na secret password\n,\n\n        \nallowed_ips\n \n=\n \n[\n\n            \n127.0.0.1\n\n        \n],\n\n        \nclasses\n \n=\n \n[\n\n            \ntest\n \n=\n \n[\n\n                \n// path to file\n\n                \nclasses/test.php\n,\n\n                \n// addtional key/values\n\n                \n[\n\n                    \nkey\n \n=\n \nvalue\n\n                \n]\n\n            \n],\n\n            \n// you can use namespaced classes\n\n            \nFoo\\\\Demo\n \n=\n \n[\n\n                \n// path to file\n\n                \nsome_class/demo.php\n,\n\n                \n// addtional key/values\n\n                \n[\n\n                    \nkey\n \n=\n \nvalue\n\n                \n]\n\n            \n],\n\n            \n// ...\n\n        \n]\n\n    \n]))\n-\nlisten\n();\n\n\n}\n\n\n\n\n\n\nExceptions\n\n\nExceptions can be thrown by components, the client will catch them and throw a \n\\Plinker\\Core\\Exception\\Server\n exception which you can catch as normal.\n\n\ntry {\n\n\n\n    $client-\ncomponent-\nmethod();\n\n\n\n} catch (\\Exception | \\Plinker\\Core\\Exception\\Server $e) {\n\n\n    exit(get_class($e).\n: \n.$e-\ngetMessage());\n\n\n}\n\n\n\n\n\n\nNon exception errors, including failing to decode or verify response will be returned as an array structure.\n\n\nArray\n(\n    [body]  =\n {\nbody\n: \n, \ntoken\n: \nabc\n} # Raw response, for debugging.\n    [code]  =\n 401                          # HTTP error code.\n    [error] =\n \nError message\n              # An error message if applicable.\n)\n\n\n\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method.\n\n\nInfo\n\n\nThe info method returns defined endpoint methods and their parameters.\n\n\nCall\n\n\n$result = $client-\ninfo();\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [class] =\n Array\n        (\n            [Foo\\Demo] =\n Array\n                (\n                    [config] =\n Array\n                        (\n                            [key] =\n value\n                        )\n\n                    [methods] =\n Array\n                        (\n                            [config] =\n Array\n                                (\n                                )\n\n                            [this] =\n Array\n                                (\n                                )\n\n                            [test] =\n Array\n                                (\n                                    [0] =\n x\n                                    [1] =\n y\n                                )\n\n                        )\n\n                )\n\n        )\n\n)\n\n\n\n\n\nTesting\n\n\n$ composer \ntest\n\n\n\n\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this code and make money from it and want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed here.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee \norganisations page\n for additional components.", 
            "title": "Core"
        }, 
        {
            "location": "/core/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/core", 
            "title": "Install"
        }, 
        {
            "location": "/core/#additional-setup", 
            "text": "This component does not require any additional setup.", 
            "title": "Additional Setup"
        }, 
        {
            "location": "/core/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password , \n     ]  );  // or using global function  $client   =   plinker_client ( http://example.com/server.php ,   a secret password );", 
            "title": "Client"
        }, 
        {
            "location": "/core/#server", 
            "text": "Creating a server listener is done as follows:  Optional features:   Set a secret, which all clients will require.   Lock down to specific client IP addresses for addtional security.  Define your own classes in the  classes  array then access like above  $client- class- method() , which can interface out of scope components or composer packages.  Define addtional key values for database connections etc, or you could pass the parameters through the client connection.    ?php  require   vendor/autoload.php ;  /**   * Initialize plinker server.   */  if   ( isset ( $_SERVER [ HTTP_PLINKER ]))   { \n     // init plinker server \n     echo   ( new   \\Plinker\\Server ([ \n         secret   =   a secret password , \n         allowed_ips   =   [ \n             127.0.0.1 \n         ], \n         classes   =   [ \n             test   =   [ \n                 // path to file \n                 classes/test.php , \n                 // addtional key/values \n                 [ \n                     key   =   value \n                 ] \n             ], \n             // you can use namespaced classes \n             Foo\\\\Demo   =   [ \n                 // path to file \n                 some_class/demo.php , \n                 // addtional key/values \n                 [ \n                     key   =   value \n                 ] \n             ], \n             // ... \n         ] \n     ])) - listen ();  }", 
            "title": "Server"
        }, 
        {
            "location": "/core/#exceptions", 
            "text": "Exceptions can be thrown by components, the client will catch them and throw a  \\Plinker\\Core\\Exception\\Server  exception which you can catch as normal.  try {      $client- component- method();  } catch (\\Exception | \\Plinker\\Core\\Exception\\Server $e) {      exit(get_class($e). :  .$e- getMessage());  }   Non exception errors, including failing to decode or verify response will be returned as an array structure.  Array\n(\n    [body]  =  { body :  ,  token :  abc } # Raw response, for debugging.\n    [code]  =  401                          # HTTP error code.\n    [error] =   Error message               # An error message if applicable.\n)", 
            "title": "Exceptions"
        }, 
        {
            "location": "/core/#methods", 
            "text": "Once setup, you call the class though its namespace to its method.", 
            "title": "Methods"
        }, 
        {
            "location": "/core/#info", 
            "text": "The info method returns defined endpoint methods and their parameters.  Call  $result = $client- info();  Response  Array\n(\n    [class] =  Array\n        (\n            [Foo\\Demo] =  Array\n                (\n                    [config] =  Array\n                        (\n                            [key] =  value\n                        )\n\n                    [methods] =  Array\n                        (\n                            [config] =  Array\n                                (\n                                )\n\n                            [this] =  Array\n                                (\n                                )\n\n                            [test] =  Array\n                                (\n                                    [0] =  x\n                                    [1] =  y\n                                )\n\n                        )\n\n                )\n\n        )\n\n)", 
            "title": "Info"
        }, 
        {
            "location": "/core/#testing", 
            "text": "$ composer  test", 
            "title": "Testing"
        }, 
        {
            "location": "/core/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/core/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/core/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/core/#development-encouragement", 
            "text": "If you use this code and make money from it and want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/core/#sponsors", 
            "text": "Get your company or name listed here.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/core/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See  organisations page  for additional components.", 
            "title": "License"
        }, 
        {
            "location": "/cron/", 
            "text": "Cron\n\n\nA cron component which allows you to read and control cron tasks on remote systems.\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/cron\n\n\n\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n,\n\n        \n// optional\n\n        \nconfig\n \n=\n \n[\n\n            \njournal\n \n=\n \n./.plinker/crontab.journal\n,\n\n            \napply\n   \n=\n \nfalse\n\n        \n]\n\n    \n]\n\n\n);\n\n\n\n// or using global function, with optional array\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n,\n \n[\n\n    \nconfig\n \n=\n \n[\n\n        \njournal\n \n=\n \n./.plinker/crontab.journal\n,\n\n        \napply\n   \n=\n \nfalse\n\n    \n]\n\n\n]);\n\n\n\n\n\n\nComponent Config\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\njournal\n\n\nPath to journal file\n\n\n./.plinker/crontab.journal\n\n\n\n\n\n\napply\n\n\nApply crontab after each call, default is to only apply upon calling \napply()\n method\n\n\nfalse\n\n\n\n\n\n\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method.\n\n\nUser\n\n\nGet current user, helps to debug which user the crontab is owned by.\n\n\nCall\n\n\n$result = $client-\ncron-\nuser();\n\n\n\n\n\n\nResponse\n\n\nwww-data\n\n\n\n\n\nCrontab\n\n\nGet current crontab, equivalent to \ncrontab -l\n.\n\n\nCall\n\n\n$result = $client-\ncron-\ncrontab();\n\n\n\n\n\n\nResponse\n\n\n# My Cron Task\n0 * * * * cd ~\n# \\My Cron Task\n\n\n\n\n\nDump\n\n\nGet current crontab journal. The journal is a file which gets built and then applied to the real crontab.\n\n\nCall\n\n\n$result = $client-\ncron-\ndump();\n\n\n\n\n\n\nResponse\n\n\n# My Cron Task\n0 * * * * cd ~\n# \\My Cron Task\n\n\n\n\n\nCreate\n\n\nCreate a crontask entry. Note one entry per key, multiple calls with same key would simply update.\n\n\nCall\n\n\n$result = $client-\ncron-\ncreate(\nMy Cron Task\n, \n* * * * * cd ~\n);\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nGet\n\n\nGet a crontask entry, also has an alias method read.\n\n\nCall\n\n\n$result = $client-\ncron-\nget(\nMy Cron Task\n);\n\n\n\n\n\n\nResponse\n\n\n0 * * * * cd ~\n\n\n\n\n\nUpdate\n\n\nUpdate cron task.\n\n\nCall\n\n\n$result = $client-\ncron-\nupdate(\nMy Cron Task\n, \n0 * * * * cd ~\n);\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nDelete\n\n\nDelete a cron task.\n\n\nCall\n\n\n$result = $client-\ncron-\ndelete(\nMy Cron Task\n);\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nDrop\n\n\nDrop cron task journal (delete all, but does not apply it).\n\n\nCall\n\n\n$result =  $client-\ncron-\ndrop();\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nApply\n\n\nApply crontab journal to users crontab.\n\n\nCall\n\n\n$result = $client-\ncron-\napply();\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nTesting\n\n\nThere are no tests setup for this component.\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee the \norganisations page\n for additional components.", 
            "title": "Cron"
        }, 
        {
            "location": "/cron/#cron", 
            "text": "A cron component which allows you to read and control cron tasks on remote systems.", 
            "title": "Cron"
        }, 
        {
            "location": "/cron/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/cron", 
            "title": "Install"
        }, 
        {
            "location": "/cron/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password , \n         // optional \n         config   =   [ \n             journal   =   ./.plinker/crontab.journal , \n             apply     =   false \n         ] \n     ]  );  // or using global function, with optional array  $client   =   plinker_client ( http://example.com/server.php ,   a secret password ,   [ \n     config   =   [ \n         journal   =   ./.plinker/crontab.journal , \n         apply     =   false \n     ]  ]);", 
            "title": "Client"
        }, 
        {
            "location": "/cron/#component-config", 
            "text": "Parameter  Description  Default      journal  Path to journal file  ./.plinker/crontab.journal    apply  Apply crontab after each call, default is to only apply upon calling  apply()  method  false", 
            "title": "Component Config"
        }, 
        {
            "location": "/cron/#methods", 
            "text": "Once setup, you call the class though its namespace to its method.", 
            "title": "Methods"
        }, 
        {
            "location": "/cron/#user", 
            "text": "Get current user, helps to debug which user the crontab is owned by.  Call  $result = $client- cron- user();   Response  www-data", 
            "title": "User"
        }, 
        {
            "location": "/cron/#crontab", 
            "text": "Get current crontab, equivalent to  crontab -l .  Call  $result = $client- cron- crontab();   Response  # My Cron Task\n0 * * * * cd ~\n# \\My Cron Task", 
            "title": "Crontab"
        }, 
        {
            "location": "/cron/#dump", 
            "text": "Get current crontab journal. The journal is a file which gets built and then applied to the real crontab.  Call  $result = $client- cron- dump();   Response  # My Cron Task\n0 * * * * cd ~\n# \\My Cron Task", 
            "title": "Dump"
        }, 
        {
            "location": "/cron/#create", 
            "text": "Create a crontask entry. Note one entry per key, multiple calls with same key would simply update.  Call  $result = $client- cron- create( My Cron Task ,  * * * * * cd ~ );   Response", 
            "title": "Create"
        }, 
        {
            "location": "/cron/#get", 
            "text": "Get a crontask entry, also has an alias method read.  Call  $result = $client- cron- get( My Cron Task );   Response  0 * * * * cd ~", 
            "title": "Get"
        }, 
        {
            "location": "/cron/#update", 
            "text": "Update cron task.  Call  $result = $client- cron- update( My Cron Task ,  0 * * * * cd ~ );   Response", 
            "title": "Update"
        }, 
        {
            "location": "/cron/#delete", 
            "text": "Delete a cron task.  Call  $result = $client- cron- delete( My Cron Task );   Response", 
            "title": "Delete"
        }, 
        {
            "location": "/cron/#drop", 
            "text": "Drop cron task journal (delete all, but does not apply it).  Call  $result =  $client- cron- drop();   Response", 
            "title": "Drop"
        }, 
        {
            "location": "/cron/#apply", 
            "text": "Apply crontab journal to users crontab.  Call  $result = $client- cron- apply();   Response", 
            "title": "Apply"
        }, 
        {
            "location": "/cron/#testing", 
            "text": "There are no tests setup for this component.", 
            "title": "Testing"
        }, 
        {
            "location": "/cron/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/cron/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/cron/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/cron/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/cron/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/cron/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See the  organisations page  for additional components.", 
            "title": "License"
        }, 
        {
            "location": "/files/", 
            "text": "Files\n\n\nA files component which allows you to read and write files.\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/files\n\n\n\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n\n    \n]\n\n\n);\n\n\n\n// or using global function\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n);\n\n\n\n\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method.\n\n\nList\n\n\nList files and folders.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndir\n\n\nstring\n\n\nBase path to list files and folders from\n\n\n./\n\n\n\n\n\n\nextended\n\n\nbool\n\n\nReturn extended fileinfo\n\n\nfalse\n\n\n\n\n\n\ndepth\n\n\nint\n\n\nIterator depth\n\n\n10\n\n\n\n\n\n\n\n\nCall\n\n\n$result = $client-\nfiles-\nlist(\n./\n, false, 10);\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [/] =\n Array\n        (\n            [0] =\n Array\n                (\n                    [name] =\n server.php\n                    [type] =\n file\n                    [size] =\n 706\n                )\n\n            [1] =\n Array\n                (\n                    [name] =\n .plinker\n                    [type] =\n folder\n                    [size] =\n 4096\n                )\n\n            [3] =\n Array\n                (\n                    [name] =\n user_classes\n                    [type] =\n folder\n                    [size] =\n 4096\n                )\n\n            [5] =\n Array\n                (\n                    [name] =\n demo.php\n                    [type] =\n file\n                    [size] =\n 1628\n                )\n\n        )\n\n    [/.plinker] =\n Array\n        (\n            [2] =\n Array\n                (\n                    [name] =\n crontab.journal\n                    [type] =\n file\n                    [size] =\n 45\n                )\n\n        )\n\n    [/user_classes] =\n Array\n        (\n            [4] =\n Array\n                (\n                    [name] =\n demo.php\n                    [type] =\n file\n                    [size] =\n 345\n                )\n\n        )\n\n)\n\n\n\n\n\nResponse (with extended true)\n\n\nArray\n(\n    [/] =\n Array\n        (\n            [0] =\n Array\n                (\n                    [name] =\n server.php\n                    [type] =\n file\n                    [size] =\n 706\n                    [info] =\n Array\n                        (\n                            [last_access] =\n 1525369379\n                            [change_time] =\n 1525368118\n                            [modified_time] =\n 1517173011\n                            [basename] =\n server.php\n                            [extension] =\n php\n                            [filename] =\n server.php\n                            [group] =\n 33\n                            [owner] =\n 33\n                            [inode] =\n 3894233\n                            [path] =\n .\n                            [pathname] =\n ./server.php\n                            [size] =\n 706\n                            [type] =\n file\n                            [isDir] =\n \n                            [isExecutable] =\n \n                            [isFile] =\n 1\n                            [isLink] =\n \n                            [readable] =\n 1\n                            [writable] =\n 1\n                        )\n\n                )\n    // snip..\n\n\n\n\n\nCreate File\n\n\nCreate/Put a file, if file already exists, it will be overwritten.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nFile path\n\n\n\n\n\n\n\n\ncontents\n\n\nContents of the file\n\n\n\n\n\n\n\n\nflags\n\n\nFile operations flags\n\n\n0\n\n\n\n\n\n\n\n\nCall\n\n\n$result = $client-\nfiles-\nput(\n./path/to/file.txt\n, \nthe file contents\n);\n\n\n\n\n\n\nResponse\n\n\nnumber of bytes written to file\n\n\n\n\n\nGet File\n\n\nGet a file.\n\n\n\n\nBe aware\n\n\nNot suitable for transferring large files.\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nFile path\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$result = $client-\nfiles-\nget(\n./path/to/file.txt\n);\n\n\n\n\n\n\nResponse\n\n\nthe file contents\n\n\n\n\n\nDelete File\n\n\nDelete a file.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nFile path\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$result = $client-\nfiles-\ndelete(\n./path/to/file.txt\n);\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nTesting\n\n\nThere are no tests setup for this component.\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee the \norganisations page\n for additional components.", 
            "title": "Files"
        }, 
        {
            "location": "/files/#files", 
            "text": "A files component which allows you to read and write files.", 
            "title": "Files"
        }, 
        {
            "location": "/files/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/files", 
            "title": "Install"
        }, 
        {
            "location": "/files/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password \n     ]  );  // or using global function  $client   =   plinker_client ( http://example.com/server.php ,   a secret password );", 
            "title": "Client"
        }, 
        {
            "location": "/files/#methods", 
            "text": "Once setup, you call the class though its namespace to its method.", 
            "title": "Methods"
        }, 
        {
            "location": "/files/#list", 
            "text": "List files and folders.     Parameter  Type  Description  Default      dir  string  Base path to list files and folders from  ./    extended  bool  Return extended fileinfo  false    depth  int  Iterator depth  10     Call  $result = $client- files- list( ./ , false, 10);   Response  Array\n(\n    [/] =  Array\n        (\n            [0] =  Array\n                (\n                    [name] =  server.php\n                    [type] =  file\n                    [size] =  706\n                )\n\n            [1] =  Array\n                (\n                    [name] =  .plinker\n                    [type] =  folder\n                    [size] =  4096\n                )\n\n            [3] =  Array\n                (\n                    [name] =  user_classes\n                    [type] =  folder\n                    [size] =  4096\n                )\n\n            [5] =  Array\n                (\n                    [name] =  demo.php\n                    [type] =  file\n                    [size] =  1628\n                )\n\n        )\n\n    [/.plinker] =  Array\n        (\n            [2] =  Array\n                (\n                    [name] =  crontab.journal\n                    [type] =  file\n                    [size] =  45\n                )\n\n        )\n\n    [/user_classes] =  Array\n        (\n            [4] =  Array\n                (\n                    [name] =  demo.php\n                    [type] =  file\n                    [size] =  345\n                )\n\n        )\n\n)  Response (with extended true)  Array\n(\n    [/] =  Array\n        (\n            [0] =  Array\n                (\n                    [name] =  server.php\n                    [type] =  file\n                    [size] =  706\n                    [info] =  Array\n                        (\n                            [last_access] =  1525369379\n                            [change_time] =  1525368118\n                            [modified_time] =  1517173011\n                            [basename] =  server.php\n                            [extension] =  php\n                            [filename] =  server.php\n                            [group] =  33\n                            [owner] =  33\n                            [inode] =  3894233\n                            [path] =  .\n                            [pathname] =  ./server.php\n                            [size] =  706\n                            [type] =  file\n                            [isDir] =  \n                            [isExecutable] =  \n                            [isFile] =  1\n                            [isLink] =  \n                            [readable] =  1\n                            [writable] =  1\n                        )\n\n                )\n    // snip..", 
            "title": "List"
        }, 
        {
            "location": "/files/#create-file", 
            "text": "Create/Put a file, if file already exists, it will be overwritten.     Parameter  Description  Default      path  File path     contents  Contents of the file     flags  File operations flags  0     Call  $result = $client- files- put( ./path/to/file.txt ,  the file contents );   Response  number of bytes written to file", 
            "title": "Create File"
        }, 
        {
            "location": "/files/#get-file", 
            "text": "Get a file.   Be aware  Not suitable for transferring large files.      Parameter  Description  Default      path  File path      Call  $result = $client- files- get( ./path/to/file.txt );   Response  the file contents", 
            "title": "Get File"
        }, 
        {
            "location": "/files/#delete-file", 
            "text": "Delete a file.     Parameter  Description  Default      path  File path      Call  $result = $client- files- delete( ./path/to/file.txt );   Response", 
            "title": "Delete File"
        }, 
        {
            "location": "/files/#testing", 
            "text": "There are no tests setup for this component.", 
            "title": "Testing"
        }, 
        {
            "location": "/files/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/files/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/files/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/files/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/files/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/files/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See the  organisations page  for additional components.", 
            "title": "License"
        }, 
        {
            "location": "/iptables/", 
            "text": "IPtables\n\n\nControl iptables for pre routing rules (port forwarding). Specifically suited for forwarding ports to internal LXC containers.\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/iptables\n\n\n\n\n\nThen navigate to \n./vendor/plinker/iptables/scripts\n and run \nbash install.sh\n.\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n,\n\n        \n// database connection\n\n        \ndatabase\n \n=\n \n[\n\n            \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n            \nhost\n     \n=\n \n,\n\n            \nname\n     \n=\n \n,\n\n            \nusername\n \n=\n \n,\n\n            \npassword\n \n=\n \n,\n\n            \nfreeze\n   \n=\n \nfalse\n,\n\n            \ndebug\n    \n=\n \nfalse\n,\n\n        \n]\n\n    \n]\n\n\n);\n\n\n\n// or using global function\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n,\n \n[\n\n    \n// database connection\n\n    \ndatabase\n \n=\n \n[\n\n        \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n        \nhost\n     \n=\n \n,\n\n        \nname\n     \n=\n \n,\n\n        \nusername\n \n=\n \n,\n\n        \npassword\n \n=\n \n,\n\n        \nfreeze\n   \n=\n \nfalse\n,\n\n        \ndebug\n    \n=\n \nfalse\n,\n\n    \n]\n\n\n]);\n\n\n\n\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method.\n\n\nSetup\n\n\nApplies build tasks to plinker/tasks queue.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\noptions\n\n\narray\n\n\nBuild options\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\nsetup([\n    \nbuild_sleep\n =\n 5,\n    \nreconcile_sleep\n =\n 5,\n]);\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nUpdate Package\n\n\nRuns composer update to update package.\n\n\nCall\n\n\n$client-\niptables-\nupdate_package();\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nFetch\n\n\nFetch currently configured forward or blocked rules from database.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nall           - $client-\niptables-\nfetch();\nruleById(1)   - $client-\niptables-\nfetch(\nid = ?\n, [1]);\nruleByName(1) - $client-\niptables-\nfetch(\nname = ?\n, [\nguidV4-value\n])\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [0] =\n Array\n        (\n            [id] =\n 1\n            [type] =\n forward\n            [name] =\n 5b1b63cd-0106-4fde-ba3f-8b252ae400a1\n            [label] =\n Example\n            [ip] =\n 10.100.200.2\n            [port] =\n 2251\n            [srv_type] =\n SSH\n            [srv_port] =\n 22\n            [enabled] =\n 1\n            [added_date] =\n 2018-01-25 02:18:26\n            [has_change] =\n 0\n            [updated_date] =\n 2018-01-25 02:18:26\n            [range] =\n \n            [note] =\n \n            [bantime] =\n \n        )\n\n)\n\n\n\n\n\nCount\n\n\nFetch count of currently configured forward or blocked rules from database.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nall           - $client-\niptables-\ncount();\nruleById(1)   - $client-\niptables-\ncount(\nid = ?\n, [1]);\nruleByName(1) - $client-\niptables-\ncount(\nname = ?\n, [\nguidV4-value\n])\n\n\n\n\n\nResponse\n\n\n1\n\n\n\n\n\nRebuild\n\n\nRebuild forward or blocked rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nruleById(1)   - $client-\niptables-\nrebuild(\nid = ?\n, [1]);\nruleByName(1) - $client-\niptables-\nrebuild(\nname = ?\n, [\nguidV4-value\n])\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n)\n\n\n\n\n\nRemove\n\n\nRemove forward or blocked rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nruleById(1)   - $client-\niptables-\nremove(\nid = ?\n, [1]);\nruleByName(1) - $client-\niptables-\nremove(\nname = ?\n, [\nguidV4-value\n])\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n)\n\n\n\n\n\nReset\n\n\nRemove all forwards and blocked rules.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npurge\n\n\nbool\n\n\nAlso remove tasks\n\n\nfalse\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\nreset();     // remove just rules\n$client-\niptables-\nreset(true); // remove rules and tasks (purge)\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n)\n\n\n\n\n\nAdd Block\n\n\nAdd an IP address to blocked rules.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndata\n\n\narray\n\n\nRule data\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\naddBlock([\n    \nip\n      =\n \n123.123.123.123\n,\n    \nrange\n   =\n 32,\n    \nnote\n    =\n \nPort scanned server\n,\n    \nenabled\n =\n 1\n]);\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n    [values] =\n Array\n        (\n            [id] =\n 3\n            [type] =\n block\n            [name] =\n 7bb82b0c-617d-4343-bca5-f8055a7e3087\n            [label] =\n -\n            [ip] =\n 123.123.123.123\n            [range] =\n 32\n            [note] =\n Port scanned server\n            [added_date] =\n 2018-05-09 22:46:30\n            [bantime] =\n 0\n            [enabled] =\n 1\n            [has_change] =\n 1\n        )\n\n)\n\n\n\n\n\nUpdate Block\n\n\nUpdate a blocked IP address rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\ndata\n\n\narray\n\n\nUpdated rule data\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\nupdateBlock(\nid = ?\n, [3], [\n    \nlabel\n =\n \n,\n    \nenabled\n =\n 1,\n    \nip\n =\n \n212.123.123.123\n,\n    \nrange\n =\n 32,\n    \nnote\n =\n \nFooBar\n,\n    \nbantime\n =\n 0\n]);\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n    [values] =\n Array\n        (\n            [id] =\n 3\n            [type] =\n block\n            [name] =\n 7bb82b0c-617d-4343-bca5-f8055a7e3087\n            [label] =\n \n            [ip] =\n 212.123.123.123\n            [port] =\n \n            [srv_type] =\n \n            [srv_port] =\n \n            [enabled] =\n 1\n            [added_date] =\n 2018-05-09 22:46:30\n            [has_change] =\n 1\n            [updated_date] =\n 2018-05-09 22:54:15\n            [range] =\n 32\n            [note] =\n FooBar\n            [bantime] =\n 0\n        )\n\n)\n\n\n\n\n\nStatus\n\n\nEnumarate and return status of used and available ports.\n\n\nCall\n\n\n$client-\niptables-\nstatus();\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [blocked_rules] =\n 1\n    [forward_rules] =\n 0\n    [total] =\n 400\n    [available] =\n 400\n)\n\n\n\n\n\nRaw\n\n\nFetch raw iptables, equivalent to \niptables-save\n.\n\n\nCall\n\n\n$client-\niptables-\nraw();\n\n\n\n\n\nResponse\n\n\n# Generated on Thu Jan 25 12:34:56 2018\n*mangle\n:PREROUTING ACCEPT [0:0]\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:POSTROUTING ACCEPT [0:0]\n-A POSTROUTING -o lxcbr0 -p udp -m udp --dport 68 -j CHECKSUM --checksum-fill\nCOMMIT\n*nat\n:PREROUTING ACCEPT [0:0]\n:INPUT ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:POSTROUTING ACCEPT [0:0]\n:DOCKER - [0:0]\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE\n-A PREROUTING -p tcp -m tcp --dport 2251 -j DNAT --to-destination 10.158.250.6:22\n-A PREROUTING -p udp -m udp --dport 2251 -j DNAT --to-destination 10.158.250.6:22\n-A POSTROUTING -s 10.158.250.0/8 ! -d 10.158.250.0/8 -j MASQUERADE\n-A DOCKER -i lxcbr0 -j RETURN\nCOMMIT\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:fail2ban-ssh - [0:0]\n:DOCKER - [0:0]\n:DOCKER-ISOLATION - [0:0]\n:DOCKER-USER - [0:0]\n-A INPUT -p tcp -m multiport --dports 2020 -j fail2ban-ssh\n-A INPUT -p tcp -m multiport --dports 22 -j fail2ban-ssh\n-A INPUT -p tcp -m multiport --dports 2200:2299 -j fail2ban-ssh\n-A INPUT -i lxcbr0 -p tcp -m tcp --dport 53 -j ACCEPT\n-A INPUT -i lxcbr0 -p udp -m udp --dport 53 -j ACCEPT\n-A INPUT -i lxcbr0 -p tcp -m tcp --dport 67 -j ACCEPT\n-A INPUT -i lxcbr0 -p udp -m udp --dport 67 -j ACCEPT\n-A INPUT -i lo -j ACCEPT\n-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -m conntrack --ctstate INVALID -j DROP\n-A INPUT -p tcp -m tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 8443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT\n-A FORWARD -j DOCKER-USER\n-A FORWARD -j DOCKER-ISOLATION\n-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A FORWARD -o docker0 -j DOCKER\n-A FORWARD -i docker0 ! -o docker0 -j ACCEPT\n-A FORWARD -i docker0 -o docker0 -j ACCEPT\n-A FORWARD -o lxcbr0 -j ACCEPT\n-A FORWARD -i lxcbr0 -j ACCEPT\n-A OUTPUT -o lo -j ACCEPT\n-A OUTPUT -p tcp -m tcp --sport 80 -m conntrack --ctstate ESTABLISHED -j ACCEPT\n-A OUTPUT -p tcp -m tcp --sport 443 -m conntrack --ctstate ESTABLISHED -j ACCEPT\n-A OUTPUT -p tcp -m tcp --sport 8443 -m conntrack --ctstate ESTABLISHED -j ACCEPT\n-A OUTPUT -o lxcbr0 -p tcp -m tcp --sport 53 -j ACCEPT\n-A OUTPUT -o lxcbr0 -p udp -m udp --sport 53 -j ACCEPT\n-A OUTPUT -o lxcbr0 -p udp -m udp --sport 67 -j ACCEPT\n-A DOCKER-ISOLATION -j RETURN\n-A DOCKER-USER -j RETURN\n-A INPUT -s 212.123.123.123/32 -j REJECT\n-A fail2ban-ssh -j RETURN\nCOMMIT\n# Completed on Thu Jan 25 12:34:56 2018\n\n\n\n\n\nAvailable Ports\n\n\nFetch available ports within a range type.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nPort range type\n\n\nall\n\n\n\n\n\n\n\n\nThe following port ranges (400 ports) are externally available for forwarding.\n\n\n\n\n\n\n\n\nType\n\n\nRange\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nall\n\n\n2200 - 8099\n\n\nReturns all available ports\n\n\n\n\n\n\nssh\n\n\n2200 - 2299\n\n\nReturns available ssh ports\n\n\n\n\n\n\nhttp\n\n\n8000 - 8099\n\n\nReturns available http ports\n\n\n\n\n\n\nmysql\n\n\n3300 - 3399\n\n\nReturns available mysql ports\n\n\n\n\n\n\nshellinabox\n\n\n4200 - 4299\n\n\nReturns available shellinabox ports\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\navailablePorts(\nhttp\n);\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [0] =\n 8000\n    [1] =\n 8001\n    [2] =\n 8002\n    [3] =\n 8003\n    [4] =\n 8004\n    [5] =\n 8005\n    [6] =\n 8006\n    [7] =\n 8007\n    [8] =\n 8008\n    [9] =\n 8009\n    [10] =\n 8010\n    ... snip\n    [99] =\n 8099\n)\n\n\n\n\n\nCheck Port In Use\n\n\nCheck if a port is already in use by a rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nport\n\n\nint\n\n\nPort to check\n\n\n0\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\ncheckPortInUse(8000);\n\n\n\n\n\nResponse\n\n\nboolean\n\n\n\n\n\nCheck Allowed Port\n\n\nCheck if a port is in allowed ranges.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nport\n\n\nint\n\n\nPort to check\n\n\n0\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\ncheckAllowedPort(12345);\n\n\n\n\n\nResponse\n\n\nboolean - false in the above case\n\n\n\n\n\nAdd Forward\n\n\nAdd new port forward rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndata\n\n\narray\n\n\nRule data\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\naddForward([\n    \nlabel\n =\n \nExample\n,\n    \nip\n =\n \n10.158.250.5\n,\n    \nport\n =\n 2252,\n    \nsrv_type\n =\n \nSSH\n,\n    \nsrv_port\n =\n 22,\n    \nenabled\n =\n 1\n]);\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n    [values] =\n Array\n        (\n            [id] =\n 5\n            [type] =\n forward\n            [name] =\n d82025df-fc3f-4a2e-bbbd-dde6fddab4cb\n            [label] =\n Example\n            [ip] =\n 10.158.250.5\n            [port] =\n 2252\n            [srv_type] =\n ssh\n            [srv_port] =\n 22\n            [enabled] =\n 1\n            [added_date] =\n 2018-05-10 01:01:46\n            [has_change] =\n 1\n        )\n\n)\n\n\n\n\n\nUpdate Forward\n\n\nUpdate port forward rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\ndata\n\n\narray\n\n\nUpdated rule data\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\niptables-\nupdateForward(\nid = ?\n, [4], [\n    \nname\n =\n \n8610e47a-cf06-4806-964b-c5a3642954bb\n, // always use, to bypass port in use check\n    \nlabel\n =\n \nExample\n,\n    \nip\n =\n \n10.158.250.5\n,\n    \nport\n =\n 2252,\n    \nsrv_type\n =\n \nSSH\n,\n    \nsrv_port\n =\n 22,\n    \nenabled\n =\n 1\n]);\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n    [values] =\n Array\n        (\n            [id] =\n 4\n            [type] =\n forward\n            [name] =\n 8610e47a-cf06-4806-964b-c5a3642954bb\n            [label] =\n Example\n            [ip] =\n 10.158.250.5\n            [port] =\n 2252\n            [srv_type] =\n SSH\n            [srv_port] =\n 22\n            [enabled] =\n 1\n            [added_date] =\n 2018-05-10 01:01:25\n            [has_change] =\n 1\n            [updated_date] =\n 2018-05-10 01:16:46\n            [range] =\n \n            [note] =\n \n            [bantime] =\n \n        )\n\n)\n\n\n\n\n\nTesting\n\n\nThere are no tests setup for this component.\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee the \norganisations page\n for additional components.", 
            "title": "IPtables"
        }, 
        {
            "location": "/iptables/#iptables", 
            "text": "Control iptables for pre routing rules (port forwarding). Specifically suited for forwarding ports to internal LXC containers.", 
            "title": "IPtables"
        }, 
        {
            "location": "/iptables/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/iptables  Then navigate to  ./vendor/plinker/iptables/scripts  and run  bash install.sh .", 
            "title": "Install"
        }, 
        {
            "location": "/iptables/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password , \n         // database connection \n         database   =   [ \n             dsn        =   sqlite:./.plinker/database.db , \n             host       =   , \n             name       =   , \n             username   =   , \n             password   =   , \n             freeze     =   false , \n             debug      =   false , \n         ] \n     ]  );  // or using global function  $client   =   plinker_client ( http://example.com/server.php ,   a secret password ,   [ \n     // database connection \n     database   =   [ \n         dsn        =   sqlite:./.plinker/database.db , \n         host       =   , \n         name       =   , \n         username   =   , \n         password   =   , \n         freeze     =   false , \n         debug      =   false , \n     ]  ]);", 
            "title": "Client"
        }, 
        {
            "location": "/iptables/#methods", 
            "text": "Once setup, you call the class though its namespace to its method.", 
            "title": "Methods"
        }, 
        {
            "location": "/iptables/#setup", 
            "text": "Applies build tasks to plinker/tasks queue.     Parameter  Type  Description  Default      options  array  Build options      Call  $client- iptables- setup([\n     build_sleep  =  5,\n     reconcile_sleep  =  5,\n]);  Response", 
            "title": "Setup"
        }, 
        {
            "location": "/iptables/#update-package", 
            "text": "Runs composer update to update package.  Call  $client- iptables- update_package();  Response", 
            "title": "Update Package"
        }, 
        {
            "location": "/iptables/#fetch", 
            "text": "Fetch currently configured forward or blocked rules from database.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values      Call  all           - $client- iptables- fetch();\nruleById(1)   - $client- iptables- fetch( id = ? , [1]);\nruleByName(1) - $client- iptables- fetch( name = ? , [ guidV4-value ])  Response  Array\n(\n    [0] =  Array\n        (\n            [id] =  1\n            [type] =  forward\n            [name] =  5b1b63cd-0106-4fde-ba3f-8b252ae400a1\n            [label] =  Example\n            [ip] =  10.100.200.2\n            [port] =  2251\n            [srv_type] =  SSH\n            [srv_port] =  22\n            [enabled] =  1\n            [added_date] =  2018-01-25 02:18:26\n            [has_change] =  0\n            [updated_date] =  2018-01-25 02:18:26\n            [range] =  \n            [note] =  \n            [bantime] =  \n        )\n\n)", 
            "title": "Fetch"
        }, 
        {
            "location": "/iptables/#count", 
            "text": "Fetch count of currently configured forward or blocked rules from database.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values      Call  all           - $client- iptables- count();\nruleById(1)   - $client- iptables- count( id = ? , [1]);\nruleByName(1) - $client- iptables- count( name = ? , [ guidV4-value ])  Response  1", 
            "title": "Count"
        }, 
        {
            "location": "/iptables/#rebuild", 
            "text": "Rebuild forward or blocked rule.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values      Call  ruleById(1)   - $client- iptables- rebuild( id = ? , [1]);\nruleByName(1) - $client- iptables- rebuild( name = ? , [ guidV4-value ])  Response  Array\n(\n    [status] =  success\n)", 
            "title": "Rebuild"
        }, 
        {
            "location": "/iptables/#remove", 
            "text": "Remove forward or blocked rule.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values      Call  ruleById(1)   - $client- iptables- remove( id = ? , [1]);\nruleByName(1) - $client- iptables- remove( name = ? , [ guidV4-value ])  Response  Array\n(\n    [status] =  success\n)", 
            "title": "Remove"
        }, 
        {
            "location": "/iptables/#reset", 
            "text": "Remove all forwards and blocked rules.     Parameter  Type  Description  Default      purge  bool  Also remove tasks  false     Call  $client- iptables- reset();     // remove just rules\n$client- iptables- reset(true); // remove rules and tasks (purge)  Response  Array\n(\n    [status] =  success\n)", 
            "title": "Reset"
        }, 
        {
            "location": "/iptables/#add-block", 
            "text": "Add an IP address to blocked rules.     Parameter  Type  Description  Default      data  array  Rule data      Call  $client- iptables- addBlock([\n     ip       =   123.123.123.123 ,\n     range    =  32,\n     note     =   Port scanned server ,\n     enabled  =  1\n]);  Response  Array\n(\n    [status] =  success\n    [values] =  Array\n        (\n            [id] =  3\n            [type] =  block\n            [name] =  7bb82b0c-617d-4343-bca5-f8055a7e3087\n            [label] =  -\n            [ip] =  123.123.123.123\n            [range] =  32\n            [note] =  Port scanned server\n            [added_date] =  2018-05-09 22:46:30\n            [bantime] =  0\n            [enabled] =  1\n            [has_change] =  1\n        )\n\n)", 
            "title": "Add Block"
        }, 
        {
            "location": "/iptables/#update-block", 
            "text": "Update a blocked IP address rule.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values     data  array  Updated rule data      Call  $client- iptables- updateBlock( id = ? , [3], [\n     label  =   ,\n     enabled  =  1,\n     ip  =   212.123.123.123 ,\n     range  =  32,\n     note  =   FooBar ,\n     bantime  =  0\n]);  Response  Array\n(\n    [status] =  success\n    [values] =  Array\n        (\n            [id] =  3\n            [type] =  block\n            [name] =  7bb82b0c-617d-4343-bca5-f8055a7e3087\n            [label] =  \n            [ip] =  212.123.123.123\n            [port] =  \n            [srv_type] =  \n            [srv_port] =  \n            [enabled] =  1\n            [added_date] =  2018-05-09 22:46:30\n            [has_change] =  1\n            [updated_date] =  2018-05-09 22:54:15\n            [range] =  32\n            [note] =  FooBar\n            [bantime] =  0\n        )\n\n)", 
            "title": "Update Block"
        }, 
        {
            "location": "/iptables/#status", 
            "text": "Enumarate and return status of used and available ports.  Call  $client- iptables- status();  Response  Array\n(\n    [blocked_rules] =  1\n    [forward_rules] =  0\n    [total] =  400\n    [available] =  400\n)", 
            "title": "Status"
        }, 
        {
            "location": "/iptables/#raw", 
            "text": "Fetch raw iptables, equivalent to  iptables-save .  Call  $client- iptables- raw();  Response  # Generated on Thu Jan 25 12:34:56 2018\n*mangle\n:PREROUTING ACCEPT [0:0]\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:POSTROUTING ACCEPT [0:0]\n-A POSTROUTING -o lxcbr0 -p udp -m udp --dport 68 -j CHECKSUM --checksum-fill\nCOMMIT\n*nat\n:PREROUTING ACCEPT [0:0]\n:INPUT ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:POSTROUTING ACCEPT [0:0]\n:DOCKER - [0:0]\n-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER\n-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER\n-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE\n-A PREROUTING -p tcp -m tcp --dport 2251 -j DNAT --to-destination 10.158.250.6:22\n-A PREROUTING -p udp -m udp --dport 2251 -j DNAT --to-destination 10.158.250.6:22\n-A POSTROUTING -s 10.158.250.0/8 ! -d 10.158.250.0/8 -j MASQUERADE\n-A DOCKER -i lxcbr0 -j RETURN\nCOMMIT\n*filter\n:INPUT ACCEPT [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:fail2ban-ssh - [0:0]\n:DOCKER - [0:0]\n:DOCKER-ISOLATION - [0:0]\n:DOCKER-USER - [0:0]\n-A INPUT -p tcp -m multiport --dports 2020 -j fail2ban-ssh\n-A INPUT -p tcp -m multiport --dports 22 -j fail2ban-ssh\n-A INPUT -p tcp -m multiport --dports 2200:2299 -j fail2ban-ssh\n-A INPUT -i lxcbr0 -p tcp -m tcp --dport 53 -j ACCEPT\n-A INPUT -i lxcbr0 -p udp -m udp --dport 53 -j ACCEPT\n-A INPUT -i lxcbr0 -p tcp -m tcp --dport 67 -j ACCEPT\n-A INPUT -i lxcbr0 -p udp -m udp --dport 67 -j ACCEPT\n-A INPUT -i lo -j ACCEPT\n-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -m conntrack --ctstate INVALID -j DROP\n-A INPUT -p tcp -m tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT\n-A INPUT -p tcp -m tcp --dport 8443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT\n-A FORWARD -j DOCKER-USER\n-A FORWARD -j DOCKER-ISOLATION\n-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n-A FORWARD -o docker0 -j DOCKER\n-A FORWARD -i docker0 ! -o docker0 -j ACCEPT\n-A FORWARD -i docker0 -o docker0 -j ACCEPT\n-A FORWARD -o lxcbr0 -j ACCEPT\n-A FORWARD -i lxcbr0 -j ACCEPT\n-A OUTPUT -o lo -j ACCEPT\n-A OUTPUT -p tcp -m tcp --sport 80 -m conntrack --ctstate ESTABLISHED -j ACCEPT\n-A OUTPUT -p tcp -m tcp --sport 443 -m conntrack --ctstate ESTABLISHED -j ACCEPT\n-A OUTPUT -p tcp -m tcp --sport 8443 -m conntrack --ctstate ESTABLISHED -j ACCEPT\n-A OUTPUT -o lxcbr0 -p tcp -m tcp --sport 53 -j ACCEPT\n-A OUTPUT -o lxcbr0 -p udp -m udp --sport 53 -j ACCEPT\n-A OUTPUT -o lxcbr0 -p udp -m udp --sport 67 -j ACCEPT\n-A DOCKER-ISOLATION -j RETURN\n-A DOCKER-USER -j RETURN\n-A INPUT -s 212.123.123.123/32 -j REJECT\n-A fail2ban-ssh -j RETURN\nCOMMIT\n# Completed on Thu Jan 25 12:34:56 2018", 
            "title": "Raw"
        }, 
        {
            "location": "/iptables/#available-ports", 
            "text": "Fetch available ports within a range type.     Parameter  Type  Description  Default      type  string  Port range type  all     The following port ranges (400 ports) are externally available for forwarding.     Type  Range  Description      all  2200 - 8099  Returns all available ports    ssh  2200 - 2299  Returns available ssh ports    http  8000 - 8099  Returns available http ports    mysql  3300 - 3399  Returns available mysql ports    shellinabox  4200 - 4299  Returns available shellinabox ports     Call  $client- iptables- availablePorts( http );  Response  Array\n(\n    [0] =  8000\n    [1] =  8001\n    [2] =  8002\n    [3] =  8003\n    [4] =  8004\n    [5] =  8005\n    [6] =  8006\n    [7] =  8007\n    [8] =  8008\n    [9] =  8009\n    [10] =  8010\n    ... snip\n    [99] =  8099\n)", 
            "title": "Available Ports"
        }, 
        {
            "location": "/iptables/#check-port-in-use", 
            "text": "Check if a port is already in use by a rule.     Parameter  Type  Description  Default      port  int  Port to check  0     Call  $client- iptables- checkPortInUse(8000);  Response  boolean", 
            "title": "Check Port In Use"
        }, 
        {
            "location": "/iptables/#check-allowed-port", 
            "text": "Check if a port is in allowed ranges.     Parameter  Type  Description  Default      port  int  Port to check  0     Call  $client- iptables- checkAllowedPort(12345);  Response  boolean - false in the above case", 
            "title": "Check Allowed Port"
        }, 
        {
            "location": "/iptables/#add-forward", 
            "text": "Add new port forward rule.     Parameter  Type  Description  Default      data  array  Rule data      Call  $client- iptables- addForward([\n     label  =   Example ,\n     ip  =   10.158.250.5 ,\n     port  =  2252,\n     srv_type  =   SSH ,\n     srv_port  =  22,\n     enabled  =  1\n]);  Response  Array\n(\n    [status] =  success\n    [values] =  Array\n        (\n            [id] =  5\n            [type] =  forward\n            [name] =  d82025df-fc3f-4a2e-bbbd-dde6fddab4cb\n            [label] =  Example\n            [ip] =  10.158.250.5\n            [port] =  2252\n            [srv_type] =  ssh\n            [srv_port] =  22\n            [enabled] =  1\n            [added_date] =  2018-05-10 01:01:46\n            [has_change] =  1\n        )\n\n)", 
            "title": "Add Forward"
        }, 
        {
            "location": "/iptables/#update-forward", 
            "text": "Update port forward rule.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values     data  array  Updated rule data      Call  $client- iptables- updateForward( id = ? , [4], [\n     name  =   8610e47a-cf06-4806-964b-c5a3642954bb , // always use, to bypass port in use check\n     label  =   Example ,\n     ip  =   10.158.250.5 ,\n     port  =  2252,\n     srv_type  =   SSH ,\n     srv_port  =  22,\n     enabled  =  1\n]);  Response  Array\n(\n    [status] =  success\n    [values] =  Array\n        (\n            [id] =  4\n            [type] =  forward\n            [name] =  8610e47a-cf06-4806-964b-c5a3642954bb\n            [label] =  Example\n            [ip] =  10.158.250.5\n            [port] =  2252\n            [srv_type] =  SSH\n            [srv_port] =  22\n            [enabled] =  1\n            [added_date] =  2018-05-10 01:01:25\n            [has_change] =  1\n            [updated_date] =  2018-05-10 01:16:46\n            [range] =  \n            [note] =  \n            [bantime] =  \n        )\n\n)", 
            "title": "Update Forward"
        }, 
        {
            "location": "/iptables/#testing", 
            "text": "There are no tests setup for this component.", 
            "title": "Testing"
        }, 
        {
            "location": "/iptables/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/iptables/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/iptables/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/iptables/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/iptables/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/iptables/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See the  organisations page  for additional components.", 
            "title": "License"
        }, 
        {
            "location": "/lxc/", 
            "text": "LXC\n\n\nAn older/deprecated component which controls LXC1.0 containers.\n\n\n\n\nDevelopment halted\n\n\nThis component is no longer being actively developed, though bugs will be fixed if reported.\n\n\n\n\nThis will be replaced by a LXD component which is coming soon!\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/lxc\n\n\n\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n\n    \n]\n\n\n);\n\n\n\n// or using global function\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n);\n\n\n\n\n\n\n\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method.\n\n\n\n\nUndocumented\n\n\nThis component is not documented, methods and usage will be added shortly.\n\n\n\n\n\n\n\nTesting\n\n\nThere are no tests setup for this component.\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee the \norganisations page\n for additional components.", 
            "title": "LXC"
        }, 
        {
            "location": "/lxc/#lxc", 
            "text": "An older/deprecated component which controls LXC1.0 containers.   Development halted  This component is no longer being actively developed, though bugs will be fixed if reported.   This will be replaced by a LXD component which is coming soon!", 
            "title": "LXC"
        }, 
        {
            "location": "/lxc/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/lxc", 
            "title": "Install"
        }, 
        {
            "location": "/lxc/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password \n     ]  );  // or using global function  $client   =   plinker_client ( http://example.com/server.php ,   a secret password );", 
            "title": "Client"
        }, 
        {
            "location": "/lxc/#methods", 
            "text": "Once setup, you call the class though its namespace to its method.   Undocumented  This component is not documented, methods and usage will be added shortly.", 
            "title": "Methods"
        }, 
        {
            "location": "/lxc/#testing", 
            "text": "There are no tests setup for this component.", 
            "title": "Testing"
        }, 
        {
            "location": "/lxc/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/lxc/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/lxc/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/lxc/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/lxc/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/lxc/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See the  organisations page  for additional components.", 
            "title": "License"
        }, 
        {
            "location": "/lxd/", 
            "text": "LXD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nControl LXD through RPC which uses the local instance of LXD and \nlxc query\n to manage local or remote LXD servers.\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/lxd\n\n\n\n\n\nSetup\n\n\nThe webserver user must be able to execute \nlxc\n commands, so add the user to sudoers file:\n\n\n# User privilege specification\nroot     ALL=(ALL:ALL) ALL\nwww-data ALL=(ALL:ALL) NOPASSWD: /usr/bin/lxc\n\n\n\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n\n    \n]\n\n\n);\n\n\n\n// or using global function\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n);\n\n\n\n\n\n\nBasic Usage\n\n\nEssentially you can do any LXD operation with the single \n$client-\nlxd-\nquery()\n method, or you can use the \nhelper methods\n  which cover all the LXD endpoints.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote and endpoint\n\n\nlocal\n\n\n\n\n\n\nrest method\n\n\nstring\n\n\ne.g GET, POST, DELETE, PUT, PATCH\n\n\nGET\n\n\n\n\n\n\npayload\n\n\nobject | json string\n\n\nRest json payload\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nPre-resolve mutation function\n\n\n\n\n\n\n\n\n\n\n$\nclient-\nlxd-\nquery\n(\nremote:/1.0\n,\n \nGET\n,\n \n[]\n);\n\n\n\n\n\n\nFull Documentation\n\n\nTo view the complete docs for this component including all methods see: \nhttps://plinker-rpc.github.io/lxd/\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method, see docs for further details.\n\n\nList Containers\n\n\nList containers on remote.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\ncontainers-\nlist(\nlocal\n, function ($result) {\n\n\n    return str_replace(\n/1.0/containers/\n, \n, $result);    \n\n\n});\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [0] =\n my-container\n)\n\n\n\n\n\nTesting\n\n\nThere are no tests setup for this component.\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee the \norganisations page\n for additional components.", 
            "title": "Lxd"
        }, 
        {
            "location": "/lxd/#lxd", 
            "text": "Control LXD through RPC which uses the local instance of LXD and  lxc query  to manage local or remote LXD servers.", 
            "title": "LXD"
        }, 
        {
            "location": "/lxd/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/lxd", 
            "title": "Install"
        }, 
        {
            "location": "/lxd/#setup", 
            "text": "The webserver user must be able to execute  lxc  commands, so add the user to sudoers file:  # User privilege specification\nroot     ALL=(ALL:ALL) ALL\nwww-data ALL=(ALL:ALL) NOPASSWD: /usr/bin/lxc", 
            "title": "Setup"
        }, 
        {
            "location": "/lxd/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password \n     ]  );  // or using global function  $client   =   plinker_client ( http://example.com/server.php ,   a secret password );", 
            "title": "Client"
        }, 
        {
            "location": "/lxd/#basic-usage", 
            "text": "Essentially you can do any LXD operation with the single  $client- lxd- query()  method, or you can use the  helper methods   which cover all the LXD endpoints.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote and endpoint  local    rest method  string  e.g GET, POST, DELETE, PUT, PATCH  GET    payload  object | json string  Rest json payload     mutator  function  Pre-resolve mutation function      $ client- lxd- query ( remote:/1.0 ,   GET ,   [] );", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/lxd/#full-documentation", 
            "text": "To view the complete docs for this component including all methods see:  https://plinker-rpc.github.io/lxd/", 
            "title": "Full Documentation"
        }, 
        {
            "location": "/lxd/#methods", 
            "text": "Once setup, you call the class though its namespace to its method, see docs for further details.", 
            "title": "Methods"
        }, 
        {
            "location": "/lxd/#list-containers", 
            "text": "List containers on remote.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    mutator  function  Mutation function      $client- lxd- containers- list( local , function ($result) {      return str_replace( /1.0/containers/ ,  , $result);      });   Response  Array\n(\n    [0] =  my-container\n)", 
            "title": "List Containers"
        }, 
        {
            "location": "/lxd/#testing", 
            "text": "There are no tests setup for this component.", 
            "title": "Testing"
        }, 
        {
            "location": "/lxd/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/lxd/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/lxd/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/lxd/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/lxd/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/lxd/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See the  organisations page  for additional components.", 
            "title": "License"
        }, 
        {
            "location": "/nginx/", 
            "text": "Nginx\n\n\nThe aim of this component is to build web forwards/reverse proxy to LXD/LXC \ncontainers on the host (or external upstreams), not as a \nserver{}\n block configurator.\n\n\nThe component uses nginx as a reverse proxy, it relies on php7-fpm being \ninstalled and will overwrite \n/etc/nginx/nginx.conf\n! So if you already have\nnginx installed then dont use this component as it will most likely break your stuff.\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/nginx\n\n\n\n\n\nThen navigate to \n./vendor/plinker/nginx/scripts\n and run \nbash install.sh\n.\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n,\n\n        \n// database connection\n\n        \ndatabase\n \n=\n \n[\n\n            \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n            \nhost\n     \n=\n \n,\n\n            \nname\n     \n=\n \n,\n\n            \nusername\n \n=\n \n,\n\n            \npassword\n \n=\n \n,\n\n            \nfreeze\n   \n=\n \nfalse\n,\n\n            \ndebug\n    \n=\n \nfalse\n,\n\n        \n]\n\n    \n]\n\n\n);\n\n\n\n// or using global function\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n,\n \n[\n\n    \n// database connection\n\n    \ndatabase\n \n=\n \n[\n\n        \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n        \nhost\n     \n=\n \n,\n\n        \nname\n     \n=\n \n,\n\n        \nusername\n \n=\n \n,\n\n        \npassword\n \n=\n \n,\n\n        \nfreeze\n   \n=\n \nfalse\n,\n\n        \ndebug\n    \n=\n \nfalse\n,\n\n    \n]\n\n\n]);\n\n\n\n\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method.\n\n\nSetup\n\n\nApplies build tasks to plinker/tasks queue.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\noptions\n\n\narray\n\n\nBuild options\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\nnginx-\nsetup([\n    \nbuild_sleep\n =\n 5,\n    \nreconcile_sleep\n =\n 5,\n]);\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nUpdate Package\n\n\nRuns composer update to update package.\n\n\nCall\n\n\n$client-\nnginx-\nupdate_package();\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nAdd\n\n\nAdd a web proxy rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndata\n\n\narray\n\n\nRule data\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\nnginx-\naddBlock([\n    \nlabel\n =\n \nMy website nginx route\n,\n    \nownDomain\n =\n [\n        \nexample.com\n,\n        \nwww.example.com\n\n    ],\n    \nownUpstream\n =\n [\n        [\nip\n =\n \n10.158.250.5\n, \nport\n =\n \n80\n]\n    ],\n    \nletsencrypt\n =\n 1,\n    \nenabled\n =\n 1\n]);\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n    [values] =\n Array\n        (\n            [id] =\n 1\n            [label] =\n My website nginx route\n            [name] =\n c094c6c1-0fa1-40f1-af66-60e173e8dbac\n            [ssl_type] =\n letsencrypt\n            [added] =\n 2018-05-13 17:25:51\n            [updated] =\n 2018-05-13 17:25:51\n            [has_change] =\n 1\n            [has_error] =\n 0\n            [delete] =\n 0\n            [enabled] =\n 1\n            [update_ip] =\n 0\n            [ip] =\n 10.158.250.5\n            [port] =\n 80\n            [ownDomain] =\n Array\n                (\n                    [0] =\n Array\n                        (\n                            [id] =\n 1\n                            [name] =\n example.com\n                            [route_id] =\n 1\n                        )\n\n                    [1] =\n Array\n                        (\n                            [id] =\n 2\n                            [name] =\n www.example.com\n                            [route_id] =\n 1\n                        )\n\n                )\n\n            [ownUpstream] =\n Array\n                (\n                    [0] =\n Array\n                        (\n                            [id] =\n 1\n                            [ip] =\n 10.158.250.5\n                            [port] =\n 80\n                            [route_id] =\n 1\n                        )\n\n                )\n\n        )\n\n)\n\n\n\n\n\nUpdate Block\n\n\nUpdate a web proxy rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\ndata\n\n\narray\n\n\nUpdated rule data\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nclient-\nnginx-\nupdate(\nname = ?\n, [\nb2f78de7-5994-4c21-9c55-76cefe327a67\n], [\n    \nlabel\n =\n $test_route_label,\n    \nownDomain\n =\n [\n        \nupdated-example.com\n,\n        \nwww.updated-example.com\n\n    ],\n    \nownUpstream\n =\n [\n        [\nip\n =\n \n10.158.250.5\n, \nport\n =\n \n80\n]\n    ],\n    \nletsencrypt\n =\n 0,\n    \nenabled\n =\n 1\n]);\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n    [values] =\n Array\n        (\n            [id] =\n 3\n            [label] =\n Example\n            [name] =\n b2f78de7-5994-4c21-9c55-76cefe327a67\n            [ssl_type] =\n \n            [added] =\n 2018-05-12 20:17:09\n            [updated] =\n 2018-05-13 17:28:50\n            [has_change] =\n 1\n            [has_error] =\n 1\n            [delete] =\n 0\n            [enabled] =\n 1\n            [update_ip] =\n 0\n            [ip] =\n 10.158.250.5\n            [port] =\n 80\n            [error] =\n {}\n            [ownDomain] =\n Array\n                (\n                    [0] =\n Array\n                        (\n                            [id] =\n 9\n                            [name] =\n updated-example.com\n                            [route_id] =\n 3\n                        )\n\n                    [1] =\n Array\n                        (\n                            [id] =\n 10\n                            [name] =\n www.updated-example.com\n                            [route_id] =\n 3\n                        )\n\n                )\n\n            [ownUpstream] =\n Array\n                (\n                    [0] =\n Array\n                        (\n                            [id] =\n 5\n                            [ip] =\n 10.158.250.5\n                            [port] =\n 80\n                            [route_id] =\n 3\n                        )\n\n                )\n\n        )\n\n)\n\n\n\n\n\nRemove\n\n\nRemove web proxy rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nruleById(1)   - $client-\nnginx-\nremove(\nid = ?\n, [1]);\nruleByName(1) - $client-\nnginx-\nremove(\nname = ?\n, [\nguidV4-value\n])\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n)\n\n\n\n\n\nReset\n\n\nRemove all web proxy rules.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npurge\n\n\nbool\n\n\nAlso remove tasks\n\n\nfalse\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\nnginx-\nreset();     // remove just rules\n$client-\nnginx-\nreset(true); // remove rules and tasks (purge)\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n)\n\n\n\n\n\nFetch\n\n\nFetch currently configured web proxy rules from database.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nall           - $client-\nnginx-\nfetch();\nruleById(1)   - $client-\nnginx-\nfetch(\nid = ?\n, [1]);\nruleByName(1) - $client-\nnginx-\nfetch(\nname = ?\n, [\nguidV4-value\n])\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [0] =\n Array\n        (\n            [id] =\n 1\n            [label] =\n Example\n            [name] =\n 9801e216-a663-4f21-a3f5-047be2b3b9c9\n            [ssl_type] =\n \n            [added] =\n 2018-05-12 19:52:58\n            [updated] =\n 2018-05-12 19:52:58\n            [has_change] =\n 0\n            [has_error] =\n 0\n            [delete] =\n 0\n            [enabled] =\n 1\n            [update_ip] =\n 0\n            [ip] =\n 10.158.250.5\n            [port] =\n 80\n            [error] =\n \n            [ownDomain] =\n Array\n                (\n                    [0] =\n Array\n                        (\n                            [id] =\n 1\n                            [name] =\n example.com\n                            [route_id] =\n 2\n                        )\n\n                    [1] =\n Array\n                        (\n                            [id] =\n 2\n                            [name] =\n www.example.com\n                            [route_id] =\n 2\n                        )\n\n                )\n\n            [ownUpstream] =\n Array\n                (\n                    [0] =\n Array\n                        (\n                            [id] =\n 1\n                            [ip] =\n 10.158.250.5\n                            [port] =\n 80\n                            [route_id] =\n 2\n                        )\n\n                )\n\n        )\n)\n\n\n\n\n\nCount\n\n\nFetch count of currently configured web proxy rules from database.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nall           - $client-\nnginx-\ncount();\nruleById(1)   - $client-\nnginx-\ncount(\nid = ?\n, [1]);\nruleByName(1) - $client-\nnginx-\ncount(\nname = ?\n, [\nguidV4-value\n])\n\n\n\n\n\nResponse\n\n\n1\n\n\n\n\n\nRebuild\n\n\nRebuild web proxy rule.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplaceholder\n\n\nstring\n\n\nQuery placeholder\n\n\n\n\n\n\n\n\nvalues\n\n\narray\n\n\nMatch values\n\n\n\n\n\n\n\n\n\n\nCall\n\n\nruleById(1)   - $client-\nnginx-\nrebuild(\nid = ?\n, [1]);\nruleByName(1) - $client-\nnginx-\nrebuild(\nname = ?\n, [\nguidV4-value\n])\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [status] =\n success\n)\n\n\n\n\n\nStatus\n\n\nEnumarate and return status of nginx connections.\n\n\nCall\n\n\n$client-\nnginx-\nstatus();\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [active_connections] =\n 2\n    [accepts] =\n 579\n    [handled] =\n 579\n    [requests] =\n 579\n    [reading] =\n 0\n    [writing] =\n 2\n    [waiting] =\n 0\n)\n\n\n\n\n\nTesting\n\n\nThere are no tests setup for this component.\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee the \norganisations page\n for additional components.", 
            "title": "Nginx"
        }, 
        {
            "location": "/nginx/#nginx", 
            "text": "The aim of this component is to build web forwards/reverse proxy to LXD/LXC \ncontainers on the host (or external upstreams), not as a  server{}  block configurator.  The component uses nginx as a reverse proxy, it relies on php7-fpm being \ninstalled and will overwrite  /etc/nginx/nginx.conf ! So if you already have\nnginx installed then dont use this component as it will most likely break your stuff.", 
            "title": "Nginx"
        }, 
        {
            "location": "/nginx/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/nginx  Then navigate to  ./vendor/plinker/nginx/scripts  and run  bash install.sh .", 
            "title": "Install"
        }, 
        {
            "location": "/nginx/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password , \n         // database connection \n         database   =   [ \n             dsn        =   sqlite:./.plinker/database.db , \n             host       =   , \n             name       =   , \n             username   =   , \n             password   =   , \n             freeze     =   false , \n             debug      =   false , \n         ] \n     ]  );  // or using global function  $client   =   plinker_client ( http://example.com/server.php ,   a secret password ,   [ \n     // database connection \n     database   =   [ \n         dsn        =   sqlite:./.plinker/database.db , \n         host       =   , \n         name       =   , \n         username   =   , \n         password   =   , \n         freeze     =   false , \n         debug      =   false , \n     ]  ]);", 
            "title": "Client"
        }, 
        {
            "location": "/nginx/#methods", 
            "text": "Once setup, you call the class though its namespace to its method.", 
            "title": "Methods"
        }, 
        {
            "location": "/nginx/#setup", 
            "text": "Applies build tasks to plinker/tasks queue.     Parameter  Type  Description  Default      options  array  Build options      Call  $client- nginx- setup([\n     build_sleep  =  5,\n     reconcile_sleep  =  5,\n]);  Response", 
            "title": "Setup"
        }, 
        {
            "location": "/nginx/#update-package", 
            "text": "Runs composer update to update package.  Call  $client- nginx- update_package();  Response", 
            "title": "Update Package"
        }, 
        {
            "location": "/nginx/#add", 
            "text": "Add a web proxy rule.     Parameter  Type  Description  Default      data  array  Rule data      Call  $client- nginx- addBlock([\n     label  =   My website nginx route ,\n     ownDomain  =  [\n         example.com ,\n         www.example.com \n    ],\n     ownUpstream  =  [\n        [ ip  =   10.158.250.5 ,  port  =   80 ]\n    ],\n     letsencrypt  =  1,\n     enabled  =  1\n]);  Response  Array\n(\n    [status] =  success\n    [values] =  Array\n        (\n            [id] =  1\n            [label] =  My website nginx route\n            [name] =  c094c6c1-0fa1-40f1-af66-60e173e8dbac\n            [ssl_type] =  letsencrypt\n            [added] =  2018-05-13 17:25:51\n            [updated] =  2018-05-13 17:25:51\n            [has_change] =  1\n            [has_error] =  0\n            [delete] =  0\n            [enabled] =  1\n            [update_ip] =  0\n            [ip] =  10.158.250.5\n            [port] =  80\n            [ownDomain] =  Array\n                (\n                    [0] =  Array\n                        (\n                            [id] =  1\n                            [name] =  example.com\n                            [route_id] =  1\n                        )\n\n                    [1] =  Array\n                        (\n                            [id] =  2\n                            [name] =  www.example.com\n                            [route_id] =  1\n                        )\n\n                )\n\n            [ownUpstream] =  Array\n                (\n                    [0] =  Array\n                        (\n                            [id] =  1\n                            [ip] =  10.158.250.5\n                            [port] =  80\n                            [route_id] =  1\n                        )\n\n                )\n\n        )\n\n)", 
            "title": "Add"
        }, 
        {
            "location": "/nginx/#update-block", 
            "text": "Update a web proxy rule.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values     data  array  Updated rule data      Call  client- nginx- update( name = ? , [ b2f78de7-5994-4c21-9c55-76cefe327a67 ], [\n     label  =  $test_route_label,\n     ownDomain  =  [\n         updated-example.com ,\n         www.updated-example.com \n    ],\n     ownUpstream  =  [\n        [ ip  =   10.158.250.5 ,  port  =   80 ]\n    ],\n     letsencrypt  =  0,\n     enabled  =  1\n]);  Response  Array\n(\n    [status] =  success\n    [values] =  Array\n        (\n            [id] =  3\n            [label] =  Example\n            [name] =  b2f78de7-5994-4c21-9c55-76cefe327a67\n            [ssl_type] =  \n            [added] =  2018-05-12 20:17:09\n            [updated] =  2018-05-13 17:28:50\n            [has_change] =  1\n            [has_error] =  1\n            [delete] =  0\n            [enabled] =  1\n            [update_ip] =  0\n            [ip] =  10.158.250.5\n            [port] =  80\n            [error] =  {}\n            [ownDomain] =  Array\n                (\n                    [0] =  Array\n                        (\n                            [id] =  9\n                            [name] =  updated-example.com\n                            [route_id] =  3\n                        )\n\n                    [1] =  Array\n                        (\n                            [id] =  10\n                            [name] =  www.updated-example.com\n                            [route_id] =  3\n                        )\n\n                )\n\n            [ownUpstream] =  Array\n                (\n                    [0] =  Array\n                        (\n                            [id] =  5\n                            [ip] =  10.158.250.5\n                            [port] =  80\n                            [route_id] =  3\n                        )\n\n                )\n\n        )\n\n)", 
            "title": "Update Block"
        }, 
        {
            "location": "/nginx/#remove", 
            "text": "Remove web proxy rule.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values      Call  ruleById(1)   - $client- nginx- remove( id = ? , [1]);\nruleByName(1) - $client- nginx- remove( name = ? , [ guidV4-value ])  Response  Array\n(\n    [status] =  success\n)", 
            "title": "Remove"
        }, 
        {
            "location": "/nginx/#reset", 
            "text": "Remove all web proxy rules.     Parameter  Type  Description  Default      purge  bool  Also remove tasks  false     Call  $client- nginx- reset();     // remove just rules\n$client- nginx- reset(true); // remove rules and tasks (purge)  Response  Array\n(\n    [status] =  success\n)", 
            "title": "Reset"
        }, 
        {
            "location": "/nginx/#fetch", 
            "text": "Fetch currently configured web proxy rules from database.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values      Call  all           - $client- nginx- fetch();\nruleById(1)   - $client- nginx- fetch( id = ? , [1]);\nruleByName(1) - $client- nginx- fetch( name = ? , [ guidV4-value ])  Response  Array\n(\n    [0] =  Array\n        (\n            [id] =  1\n            [label] =  Example\n            [name] =  9801e216-a663-4f21-a3f5-047be2b3b9c9\n            [ssl_type] =  \n            [added] =  2018-05-12 19:52:58\n            [updated] =  2018-05-12 19:52:58\n            [has_change] =  0\n            [has_error] =  0\n            [delete] =  0\n            [enabled] =  1\n            [update_ip] =  0\n            [ip] =  10.158.250.5\n            [port] =  80\n            [error] =  \n            [ownDomain] =  Array\n                (\n                    [0] =  Array\n                        (\n                            [id] =  1\n                            [name] =  example.com\n                            [route_id] =  2\n                        )\n\n                    [1] =  Array\n                        (\n                            [id] =  2\n                            [name] =  www.example.com\n                            [route_id] =  2\n                        )\n\n                )\n\n            [ownUpstream] =  Array\n                (\n                    [0] =  Array\n                        (\n                            [id] =  1\n                            [ip] =  10.158.250.5\n                            [port] =  80\n                            [route_id] =  2\n                        )\n\n                )\n\n        )\n)", 
            "title": "Fetch"
        }, 
        {
            "location": "/nginx/#count", 
            "text": "Fetch count of currently configured web proxy rules from database.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values      Call  all           - $client- nginx- count();\nruleById(1)   - $client- nginx- count( id = ? , [1]);\nruleByName(1) - $client- nginx- count( name = ? , [ guidV4-value ])  Response  1", 
            "title": "Count"
        }, 
        {
            "location": "/nginx/#rebuild", 
            "text": "Rebuild web proxy rule.     Parameter  Type  Description  Default      placeholder  string  Query placeholder     values  array  Match values      Call  ruleById(1)   - $client- nginx- rebuild( id = ? , [1]);\nruleByName(1) - $client- nginx- rebuild( name = ? , [ guidV4-value ])  Response  Array\n(\n    [status] =  success\n)", 
            "title": "Rebuild"
        }, 
        {
            "location": "/nginx/#status", 
            "text": "Enumarate and return status of nginx connections.  Call  $client- nginx- status();  Response  Array\n(\n    [active_connections] =  2\n    [accepts] =  579\n    [handled] =  579\n    [requests] =  579\n    [reading] =  0\n    [writing] =  2\n    [waiting] =  0\n)", 
            "title": "Status"
        }, 
        {
            "location": "/nginx/#testing", 
            "text": "There are no tests setup for this component.", 
            "title": "Testing"
        }, 
        {
            "location": "/nginx/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/nginx/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/nginx/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/nginx/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/nginx/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/nginx/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See the  organisations page  for additional components.", 
            "title": "License"
        }, 
        {
            "location": "/redbean/", 
            "text": "PlinkerRPC PHP client/server makes it really easy to link and execute PHP component classes on remote systems, while maintaining the feel of a local method call.\n\n\nRedBeanPHP component which will enable you to directly manage databases on remote sites.\n\n\nComposer\n\n\n{\n    \nrequire\n: {\n        \nplinker/redbean\n: \n=v0.1\n\n    }\n}\n\n\n\n\n\nMaking a remote call.\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\ntry\n \n{\n\n\n    \n/**\n\n\n     * Plinker Config\n\n\n     */\n\n    \n$config\n \n=\n \n[\n\n        \n// plinker connection | using tasks as to write in the correct .sqlite file\n\n        \nplinker\n \n=\n \n[\n\n            \nendpoint\n \n=\n \nhttp://127.0.0.1/examples/redbean/server.php\n,\n\n            \npublic_key\n  \n=\n \nmakeSomethingUp\n,\n\n            \nprivate_key\n \n=\n \nagainMakeSomethingUp\n\n        \n],\n\n\n        \n// database connection\n\n        \ndatabase\n \n=\n \n[\n\n            \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n            \nhost\n     \n=\n \n,\n\n            \nname\n     \n=\n \n,\n\n            \nusername\n \n=\n \n,\n\n            \npassword\n \n=\n \n,\n\n            \nfreeze\n   \n=\n \nfalse\n,\n\n            \ndebug\n    \n=\n \nfalse\n,\n\n        \n]\n\n    \n];\n\n\n    \n// init plinker endpoint client\n\n    \n$rdb\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n        \n// where is the plinker server\n\n        \n$config\n[\nplinker\n][\nendpoint\n],\n\n\n        \n// component namespace to interface to\n\n        \nRedbean\\Redbean\n,\n\n\n        \n// keys\n\n        \n$config\n[\nplinker\n][\npublic_key\n],\n\n        \n$config\n[\nplinker\n][\nprivate_key\n],\n\n\n        \n// construct values which you pass to the component\n\n        \n$config\n[\ndatabase\n]\n\n    \n);\n\n\n    \n//..\n\n\n\n}\n \ncatch\n \n(\n\\Exception\n \n$e\n)\n \n{\n\n    \nexit\n(\nget_class\n(\n$e\n)\n.\n: \n.\n$e\n-\ngetMessage\n());\n\n\n}\n\n\n\n\n\n\nthen the server part...\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * POST Server Part\n\n\n */\n\n\nif\n \n(\n$_SERVER\n[\nREQUEST_METHOD\n]\n \n==\n \nPOST\n)\n \n{\n\n    \n$server\n \n=\n \nnew\n \nPlinker\\Core\\Server\n(\n\n        \n$_POST\n,\n\n        \nusername\n,\n\n        \npassword\n\n    \n);\n\n    \nexit\n(\n$server\n-\nexecute\n());\n\n\n}\n\n\n\n\n\n\nSee the \norganisations page\n for additional components.", 
            "title": "Redbean"
        }, 
        {
            "location": "/redbean/#making-a-remote-call", 
            "text": "?php  require   vendor/autoload.php ;  try   { \n\n     /**       * Plinker Config       */ \n     $config   =   [ \n         // plinker connection | using tasks as to write in the correct .sqlite file \n         plinker   =   [ \n             endpoint   =   http://127.0.0.1/examples/redbean/server.php , \n             public_key    =   makeSomethingUp , \n             private_key   =   againMakeSomethingUp \n         ], \n\n         // database connection \n         database   =   [ \n             dsn        =   sqlite:./.plinker/database.db , \n             host       =   , \n             name       =   , \n             username   =   , \n             password   =   , \n             freeze     =   false , \n             debug      =   false , \n         ] \n     ]; \n\n     // init plinker endpoint client \n     $rdb   =   new   \\Plinker\\Core\\Client ( \n         // where is the plinker server \n         $config [ plinker ][ endpoint ], \n\n         // component namespace to interface to \n         Redbean\\Redbean , \n\n         // keys \n         $config [ plinker ][ public_key ], \n         $config [ plinker ][ private_key ], \n\n         // construct values which you pass to the component \n         $config [ database ] \n     ); \n\n     //..  }   catch   ( \\Exception   $e )   { \n     exit ( get_class ( $e ) . :  . $e - getMessage ());  }   then the server part...  ?php  require   vendor/autoload.php ;  /**   * POST Server Part   */  if   ( $_SERVER [ REQUEST_METHOD ]   ==   POST )   { \n     $server   =   new   Plinker\\Core\\Server ( \n         $_POST , \n         username , \n         password \n     ); \n     exit ( $server - execute ());  }   See the  organisations page  for additional components.", 
            "title": "Making a remote call."
        }, 
        {
            "location": "/system/", 
            "text": "System\n\n\nA system component which gives you access to server information.\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/system\n\n\n\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n\n    \n]\n\n\n);\n\n\n\n// or using global function\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n);\n\n\n\n\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method.\n\n\nEnumerate\n\n\nThe enumerate method is used to call multiple methods in a single call to reduce RPC requests.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nmethods\n\n\nstring\n\n\narray\n\n\nA string or an array of methods\n\n\n\n\n\n\nparams\n\n\narray\n\n\nAn array of params\n\n\n[]\n\n\n\n\n\n\n\n\nThe method could be used to call a single method, or multiple with parameters.\n\n\nCall\n\n\n$client-\nsystem-\nenumerate([\n\n\n    \narch\n,\n\n\n    \nhostname\n,\n\n\n    \ndisks\n =\n [\n/\n],\n\n\n    \nping\n =\n [\nhttps://google.com\n],\n\n\n]);\n\n\n\n// or single method\n\n\n$client-\nsystem-\nenumerate(\ndisks\n, [\n/\n]);\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [arch] =\n x86_64\n    [hostname] =\n plinker\n    [disks] =\n Array\n        (\n            [0] =\n Array\n                (\n                    [Filesystem] =\n /dev/sdb1\n                    [Type] =\n ext4\n                    [Size] =\n 95G\n                    [Used] =\n 85G\n                    [Avail] =\n 5.2G\n                    [Used (%)] =\n 95%\n                    [Mounted] =\n /\n                )\n\n        )\n\n    [ping] =\n -1\n)\n\n\n\n\n\nArch\n\n\nReturns the system architecture.\n\n\nCall\n\n\n$client-\nsystem-\narch();\n\n\n\n\n\n\nResponse\n\n\nx86_64\n\n\n\n\n\nClear Swap\n\n\nClear swap space, \nrequires root, so should be used with task\n.\n\n\nCall\n\n\n$client-\nsystem-\nclear_swap();\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nCPU Info\n\n\nReturns information about the CPU.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nparse\n\n\nbool\n\n\nParse output into an array\n\n\ntrue\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\nsystem-\ncpuinfo();\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [Architecture] =\n x86_64\n    [CPU op-mode(s)] =\n 32-bit, 64-bit\n    [Byte Order] =\n Little Endian\n    [CPU(s)] =\n 2\n    [On-line CPU(s) list] =\n 0,1\n    [Thread(s) per core] =\n 1\n    [Core(s) per socket] =\n 2\n    [Socket(s)] =\n 1\n    [NUMA node(s)] =\n 1\n    [Vendor ID] =\n AuthenticAMD\n    [CPU family] =\n 16\n    [Model] =\n 4\n    [Model name] =\n AMD Phenom(tm) II X2 555 Processor\n    [Stepping] =\n 3\n    [CPU MHz] =\n 3200.000\n    [CPU max MHz] =\n 3200.0000\n    [CPU min MHz] =\n 800.0000\n    [BogoMIPS] =\n 6429.27\n    [Virtualization] =\n AMD-V\n    [L1d cache] =\n 64K\n    [L1i cache] =\n 64K\n    [L2 cache] =\n 512K\n    [L3 cache] =\n 6144K\n    [NUMA node0 CPU(s)] =\n 0,1\n    [Flags] =\n fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm 3dnowext 3dnow constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid pni monitor cx16 popcnt lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt hw_pstate retpoline retpoline_amd rsb_ctxsw vmmcall npt lbrv svm_lock nrip_save\n)\n\n\n\n\n\nDisk Space\n\n\nReturns disk space left in percentage.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\nA directory of the filesystem or disk partition.\n\n\n/\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\nsystem-\ndisk_space();\n\n\n\n\n\n\nResponse\n\n\n71\n\n\n\n\n\nDisks\n\n\nReturn mounted disks.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nparse\n\n\nbool\n\n\nParse output into an array\n\n\ntrue\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\nsystem-\ndisks();\n\n\n\n// dont parse\n\n\n$client-\nsystem-\ndisks(false);\n\n\n\n\n\n\nResponse\n\n\n// Parsed\nArray\n(\n    [0] =\n Array\n        (\n            [Filesystem] =\n /dev/sdb1\n            [Type] =\n ext4\n            [Size] =\n 95G\n            [Used] =\n 85G\n            [Avail] =\n 5.2G\n            [Used (%)] =\n 95%\n            [Mounted] =\n /\n        )\n\n)\n\n// Unparsed\nFilesystem     Type  Size  Used Avail Use% Mounted on\n/dev/sdb1      ext4   95G   85G  5.2G  95% /\n\n\n\n\n\nDistro\n\n\nGet system distro name.\n\n\nCall\n\n\n$client-\nsystem-\ndistro();\n\n\n\n\n\n\nResponse\n\n\nUBUNTU\n\n\n\n\n\nDrop Cache\n\n\nDrop memory caches, \nrequires root, so should be used with task\n.\n\n\nCall\n\n\n$client-\nsystem-\ndrop_cache();\n\n\n\n\n\n\nResponse\n\n\ntrue\n\n\n\n\n\nHostname\n\n\nGet the systems hostname.\n\n\nCall\n\n\n$client-\nsystem-\nhostname();\n\n\n\n\n\n\nResponse\n\n\nplinker\n\n\n\n\n\nLoad\n\n\nGet the systems load averages.\n\n\nCall\n\n\n$client-\nsystem-\nload();\n\n\n\n\n\n\nResponse\n\n\n0.41 0.50 0.69 1/1474 6223\n\n\n\n\n\nLogins\n\n\nReturns an array of system logins.\n\n\nCall\n\n\n$client-\nsystem-\nlogins();\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [0] =\n Array\n        (\n            [User] =\n root\n            [Terminal] =\n pts/1tmux(2972).%0\n            [Date] =\n Fri May 11 08:25\n            [Disconnected] =\n 11:01\n            [Duration] =\n 02:35\n        )\n\n    [1] =\n Array\n        (\n            [User] =\n root\n            [Terminal] =\n pts/1tmux(542).%0\n            [Date] =\n Thu May 10 15:01\n            [Disconnected] =\n 08:11\n            [Duration] =\n 17:09\n        )\n\n    [2] =\n Array\n        (\n            [User] =\n Reboot\n            [Terminal] =\n \n            [Date] =\n \n            [Disconnected] =\n \n            [Duration] =\n \n        )\n\n    [3] =\n Array\n        (\n            [User] =\n root\n            [Terminal] =\n pts/1tmux(5310).%0\n            [Date] =\n Thu May 10 07:42\n            [Disconnected] =\n crash\n            [Duration] =\n 07:19\n        )\n    )\n    ... snip\n)\n\n\n\n\n\nMachine ID\n\n\nReturns the \nmachine-id\n for the system, generates one if does not have one.\n\n\nCall\n\n\n$client-\nsystem-\nmachine_id();\n\n\n\n\n\n\nResponse\n\n\n82c887bcf6da43e5952fad9fd6ed15b6\n\n\n\n\n\nMemory Stats\n\n\nReturns an array of memory stats for, used, cached and free in percentage values.\n\n\nCall\n\n\n$client-\nsystem-\nmemory_stats();\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [used] =\n 15\n    [cache] =\n 0\n    [free] =\n 85\n)\n\n\n\n\n\nMemory Total\n\n\nGet the total amount of memory in kB\n\n\nCall\n\n\n$client-\nsystem-\nmemory_total();\n\n\n\n\n\n\nResponse\n\n\n16167888\n\n\n\n\n\nNetstat\n\n\nGet network connections.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nparse\n\n\nbool\n\n\nParse output into an array\n\n\ntrue\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\nsystem-\nnetstat();\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [0] =\n Array\n        (\n            [Proto] =\n tcp\n            [Recv-Q] =\n 0\n            [Send-Q] =\n 0\n            [Local Address] =\n 0.0.0.0:80\n            [Foreign Address] =\n 0.0.0.0:*\n            [State] =\n LISTEN\n            [PID/Program] =\n 1169/nginx:\n            [Process Name] =\n worker\n        )\n    ... snip\n)\n\n\n\n\n\nPing\n\n\nPing a hostname and return connection timing in milliseconds.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nhost\n\n\nstring\n\n\nServer hostname\n\n\n\n\n\n\n\n\nport\n\n\nint\n\n\nService port, defaults to web\n\n\n80\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\nsystem-\nping(\ngoogle.com\n);\n\n\n\n\n\n\nResponse\n\n\n31.18\n\n\n\n\n\nPStree\n\n\nReturn system process tree\n\n\nCall\n\n\n$client-\nsystem-\npstree();\n\n\n\n\n\n\nResponse\n\n\nsystemd-+-Brackets-+-Brackets---Brackets---Brackets-+-{Chrome_ChildIOT}\n        |          |                                |-2*[{CompositorTileW}]\n        |          |                                |-{Compositor}\n        |          |                                |-{HTMLParserThrea}\n        |          |                                |-{Renderer::FILE}\n        |          |                                |-{WorkerPool/203}\n        |          |                                |-{WorkerPool/210}\n        |          |                                |-{WorkerPool/212}\n        |          |                                `-{WorkerPool/213}\n        |          |-Brackets-node-+-5*[{Brackets-node}]\n        |          |               `-4*[{V8 WorkerThread}]\n        |          |-{AudioThread}\n        |          |-2*[{Brackets}]\n        |          |-3*[{BrowserBlocking}]\n        |          |-{CachePoolWorker}\n        |          |-{Chrome_CacheThr}\n        |          |-{Chrome_DBThread}\n        |          |-{Chrome_DevTools}\n        |          |-{Chrome_FileThre}\n        |          |-{Chrome_FileUser}\n        |          |-{Chrome_IOThread}\n        |          |-{Chrome_ProcessL}\n        |          |-{CompositorTileW}\n        |          |-{IndexedDB}\n        |          |-{NetworkChangeNo}\n        |          |-{WorkerPool/1747}\n        |          |-{gdbus}\n        |          |-{gmain}\n        |          |-{inotify_reader}\n        |          |-{sandbox_ipc_thr}\n        |          `-{threaded-ml}\n        |-LXDui-0.0.9-x86---{LXDui-0.0.9-x86}\n... snip\n\n\n\n\n\nReboot\n\n\nReboot the server, \nrequires root, so should be used with task\n.\n\n\nCall\n\n\n$client-\nsystem-\nreboot();\n\n\n\n\n\n\nResponse\n\n\ntrue\n\n\n\n\n\nServer CPU Usage\n\n\nReturns the current CPU usage in percentage value.\n\n\nCall\n\n\n$client-\nsystem-\nserver_cpu_usage();\n\n\n\n\n\n\nResponse\n\n\n23\n\n\n\n\n\nSystem Updates\n\n\nCheck whether the system has updates.\n\n\nCall\n\n\n$client-\nsystem-\nsystem_updates();\n\n\n\n\n\n\nResponse\n\n\n1=has updates, 0=no updates, -1=unknown\n\n\n\n\n\nTop\n\n\nGet top output as an array.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nparse\n\n\nbool\n\n\nParse output into an array\n\n\ntrue\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\nsystem-\ntop();\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [0] =\n Array\n        (\n            [PID] =\n 27475\n            [USER] =\n user\n            [PR] =\n 20\n            [NI] =\n 0\n            [VIRT] =\n 1785692\n            [RES] =\n 671316\n            [SHR] =\n 140004\n            [S] =\n S\n            [%CPU] =\n 43.8\n            [%MEM] =\n 4.2\n            [TIME+] =\n 29:44.62\n            [COMMAND] =\n chrome\n        )\n    ... snip\n)\n\n\n\n\n\nTotal Disk Space\n\n\nGet total disk space in bytes.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\nA directory of the filesystem or disk partition.\n\n\n/\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\nsystem-\ntotal_disk_space();\n\n\n\n\n\n\nResponse\n\n\n101369536512\n\n\n\n\n\nUname\n\n\nGet system name/kernel version.\n\n\nCall\n\n\n$client-\nsystem-\nuname();\n\n\n\n\n\n\nResponse\n\n\nLinux 4.13.0-41-generic\n\n\n\n\n\nUptime\n\n\nGet system uptime string.\n\n\nCall\n\n\n$client-\nsystem-\nuptime();\n\n\n\n\n\n\nResponse\n\n\nup 1 day, 17 hours, 31 minutes\n\n\n\n\n\nTesting\n\n\nThere are no tests setup for this component.\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee the \norganisations page\n for additional components.", 
            "title": "System"
        }, 
        {
            "location": "/system/#system", 
            "text": "A system component which gives you access to server information.", 
            "title": "System"
        }, 
        {
            "location": "/system/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/system", 
            "title": "Install"
        }, 
        {
            "location": "/system/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password \n     ]  );  // or using global function  $client   =   plinker_client ( http://example.com/server.php ,   a secret password );", 
            "title": "Client"
        }, 
        {
            "location": "/system/#methods", 
            "text": "Once setup, you call the class though its namespace to its method.", 
            "title": "Methods"
        }, 
        {
            "location": "/system/#enumerate", 
            "text": "The enumerate method is used to call multiple methods in a single call to reduce RPC requests.     Parameter  Type  Description  Default      methods  string  array  A string or an array of methods    params  array  An array of params  []     The method could be used to call a single method, or multiple with parameters.  Call  $client- system- enumerate([       arch ,       hostname ,       disks  =  [ / ],       ping  =  [ https://google.com ],  ]);  // or single method  $client- system- enumerate( disks , [ / ]);   Response  Array\n(\n    [arch] =  x86_64\n    [hostname] =  plinker\n    [disks] =  Array\n        (\n            [0] =  Array\n                (\n                    [Filesystem] =  /dev/sdb1\n                    [Type] =  ext4\n                    [Size] =  95G\n                    [Used] =  85G\n                    [Avail] =  5.2G\n                    [Used (%)] =  95%\n                    [Mounted] =  /\n                )\n\n        )\n\n    [ping] =  -1\n)", 
            "title": "Enumerate"
        }, 
        {
            "location": "/system/#arch", 
            "text": "Returns the system architecture.  Call  $client- system- arch();   Response  x86_64", 
            "title": "Arch"
        }, 
        {
            "location": "/system/#clear-swap", 
            "text": "Clear swap space,  requires root, so should be used with task .  Call  $client- system- clear_swap();   Response", 
            "title": "Clear Swap"
        }, 
        {
            "location": "/system/#cpu-info", 
            "text": "Returns information about the CPU.     Parameter  Type  Description  Default      parse  bool  Parse output into an array  true     Call  $client- system- cpuinfo();   Response  Array\n(\n    [Architecture] =  x86_64\n    [CPU op-mode(s)] =  32-bit, 64-bit\n    [Byte Order] =  Little Endian\n    [CPU(s)] =  2\n    [On-line CPU(s) list] =  0,1\n    [Thread(s) per core] =  1\n    [Core(s) per socket] =  2\n    [Socket(s)] =  1\n    [NUMA node(s)] =  1\n    [Vendor ID] =  AuthenticAMD\n    [CPU family] =  16\n    [Model] =  4\n    [Model name] =  AMD Phenom(tm) II X2 555 Processor\n    [Stepping] =  3\n    [CPU MHz] =  3200.000\n    [CPU max MHz] =  3200.0000\n    [CPU min MHz] =  800.0000\n    [BogoMIPS] =  6429.27\n    [Virtualization] =  AMD-V\n    [L1d cache] =  64K\n    [L1i cache] =  64K\n    [L2 cache] =  512K\n    [L3 cache] =  6144K\n    [NUMA node0 CPU(s)] =  0,1\n    [Flags] =  fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm 3dnowext 3dnow constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid pni monitor cx16 popcnt lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt hw_pstate retpoline retpoline_amd rsb_ctxsw vmmcall npt lbrv svm_lock nrip_save\n)", 
            "title": "CPU Info"
        }, 
        {
            "location": "/system/#disk-space", 
            "text": "Returns disk space left in percentage.     Parameter  Type  Description  Default      path  string  A directory of the filesystem or disk partition.  /     Call  $client- system- disk_space();   Response  71", 
            "title": "Disk Space"
        }, 
        {
            "location": "/system/#disks", 
            "text": "Return mounted disks.     Parameter  Type  Description  Default      parse  bool  Parse output into an array  true     Call  $client- system- disks();  // dont parse  $client- system- disks(false);   Response  // Parsed\nArray\n(\n    [0] =  Array\n        (\n            [Filesystem] =  /dev/sdb1\n            [Type] =  ext4\n            [Size] =  95G\n            [Used] =  85G\n            [Avail] =  5.2G\n            [Used (%)] =  95%\n            [Mounted] =  /\n        )\n\n)\n\n// Unparsed\nFilesystem     Type  Size  Used Avail Use% Mounted on\n/dev/sdb1      ext4   95G   85G  5.2G  95% /", 
            "title": "Disks"
        }, 
        {
            "location": "/system/#distro", 
            "text": "Get system distro name.  Call  $client- system- distro();   Response  UBUNTU", 
            "title": "Distro"
        }, 
        {
            "location": "/system/#drop-cache", 
            "text": "Drop memory caches,  requires root, so should be used with task .  Call  $client- system- drop_cache();   Response  true", 
            "title": "Drop Cache"
        }, 
        {
            "location": "/system/#hostname", 
            "text": "Get the systems hostname.  Call  $client- system- hostname();   Response  plinker", 
            "title": "Hostname"
        }, 
        {
            "location": "/system/#load", 
            "text": "Get the systems load averages.  Call  $client- system- load();   Response  0.41 0.50 0.69 1/1474 6223", 
            "title": "Load"
        }, 
        {
            "location": "/system/#logins", 
            "text": "Returns an array of system logins.  Call  $client- system- logins();   Response  Array\n(\n    [0] =  Array\n        (\n            [User] =  root\n            [Terminal] =  pts/1tmux(2972).%0\n            [Date] =  Fri May 11 08:25\n            [Disconnected] =  11:01\n            [Duration] =  02:35\n        )\n\n    [1] =  Array\n        (\n            [User] =  root\n            [Terminal] =  pts/1tmux(542).%0\n            [Date] =  Thu May 10 15:01\n            [Disconnected] =  08:11\n            [Duration] =  17:09\n        )\n\n    [2] =  Array\n        (\n            [User] =  Reboot\n            [Terminal] =  \n            [Date] =  \n            [Disconnected] =  \n            [Duration] =  \n        )\n\n    [3] =  Array\n        (\n            [User] =  root\n            [Terminal] =  pts/1tmux(5310).%0\n            [Date] =  Thu May 10 07:42\n            [Disconnected] =  crash\n            [Duration] =  07:19\n        )\n    )\n    ... snip\n)", 
            "title": "Logins"
        }, 
        {
            "location": "/system/#machine-id", 
            "text": "Returns the  machine-id  for the system, generates one if does not have one.  Call  $client- system- machine_id();   Response  82c887bcf6da43e5952fad9fd6ed15b6", 
            "title": "Machine ID"
        }, 
        {
            "location": "/system/#memory-stats", 
            "text": "Returns an array of memory stats for, used, cached and free in percentage values.  Call  $client- system- memory_stats();   Response  Array\n(\n    [used] =  15\n    [cache] =  0\n    [free] =  85\n)", 
            "title": "Memory Stats"
        }, 
        {
            "location": "/system/#memory-total", 
            "text": "Get the total amount of memory in kB  Call  $client- system- memory_total();   Response  16167888", 
            "title": "Memory Total"
        }, 
        {
            "location": "/system/#netstat", 
            "text": "Get network connections.     Parameter  Type  Description  Default      parse  bool  Parse output into an array  true     Call  $client- system- netstat();   Response  Array\n(\n    [0] =  Array\n        (\n            [Proto] =  tcp\n            [Recv-Q] =  0\n            [Send-Q] =  0\n            [Local Address] =  0.0.0.0:80\n            [Foreign Address] =  0.0.0.0:*\n            [State] =  LISTEN\n            [PID/Program] =  1169/nginx:\n            [Process Name] =  worker\n        )\n    ... snip\n)", 
            "title": "Netstat"
        }, 
        {
            "location": "/system/#ping", 
            "text": "Ping a hostname and return connection timing in milliseconds.     Parameter  Type  Description  Default      host  string  Server hostname     port  int  Service port, defaults to web  80     Call  $client- system- ping( google.com );   Response  31.18", 
            "title": "Ping"
        }, 
        {
            "location": "/system/#pstree", 
            "text": "Return system process tree  Call  $client- system- pstree();   Response  systemd-+-Brackets-+-Brackets---Brackets---Brackets-+-{Chrome_ChildIOT}\n        |          |                                |-2*[{CompositorTileW}]\n        |          |                                |-{Compositor}\n        |          |                                |-{HTMLParserThrea}\n        |          |                                |-{Renderer::FILE}\n        |          |                                |-{WorkerPool/203}\n        |          |                                |-{WorkerPool/210}\n        |          |                                |-{WorkerPool/212}\n        |          |                                `-{WorkerPool/213}\n        |          |-Brackets-node-+-5*[{Brackets-node}]\n        |          |               `-4*[{V8 WorkerThread}]\n        |          |-{AudioThread}\n        |          |-2*[{Brackets}]\n        |          |-3*[{BrowserBlocking}]\n        |          |-{CachePoolWorker}\n        |          |-{Chrome_CacheThr}\n        |          |-{Chrome_DBThread}\n        |          |-{Chrome_DevTools}\n        |          |-{Chrome_FileThre}\n        |          |-{Chrome_FileUser}\n        |          |-{Chrome_IOThread}\n        |          |-{Chrome_ProcessL}\n        |          |-{CompositorTileW}\n        |          |-{IndexedDB}\n        |          |-{NetworkChangeNo}\n        |          |-{WorkerPool/1747}\n        |          |-{gdbus}\n        |          |-{gmain}\n        |          |-{inotify_reader}\n        |          |-{sandbox_ipc_thr}\n        |          `-{threaded-ml}\n        |-LXDui-0.0.9-x86---{LXDui-0.0.9-x86}\n... snip", 
            "title": "PStree"
        }, 
        {
            "location": "/system/#reboot", 
            "text": "Reboot the server,  requires root, so should be used with task .  Call  $client- system- reboot();   Response  true", 
            "title": "Reboot"
        }, 
        {
            "location": "/system/#server-cpu-usage", 
            "text": "Returns the current CPU usage in percentage value.  Call  $client- system- server_cpu_usage();   Response  23", 
            "title": "Server CPU Usage"
        }, 
        {
            "location": "/system/#system-updates", 
            "text": "Check whether the system has updates.  Call  $client- system- system_updates();   Response  1=has updates, 0=no updates, -1=unknown", 
            "title": "System Updates"
        }, 
        {
            "location": "/system/#top", 
            "text": "Get top output as an array.     Parameter  Type  Description  Default      parse  bool  Parse output into an array  true     Call  $client- system- top();   Response  Array\n(\n    [0] =  Array\n        (\n            [PID] =  27475\n            [USER] =  user\n            [PR] =  20\n            [NI] =  0\n            [VIRT] =  1785692\n            [RES] =  671316\n            [SHR] =  140004\n            [S] =  S\n            [%CPU] =  43.8\n            [%MEM] =  4.2\n            [TIME+] =  29:44.62\n            [COMMAND] =  chrome\n        )\n    ... snip\n)", 
            "title": "Top"
        }, 
        {
            "location": "/system/#total-disk-space", 
            "text": "Get total disk space in bytes.     Parameter  Type  Description  Default      path  string  A directory of the filesystem or disk partition.  /     Call  $client- system- total_disk_space();   Response  101369536512", 
            "title": "Total Disk Space"
        }, 
        {
            "location": "/system/#uname", 
            "text": "Get system name/kernel version.  Call  $client- system- uname();   Response  Linux 4.13.0-41-generic", 
            "title": "Uname"
        }, 
        {
            "location": "/system/#uptime", 
            "text": "Get system uptime string.  Call  $client- system- uptime();   Response  up 1 day, 17 hours, 31 minutes", 
            "title": "Uptime"
        }, 
        {
            "location": "/system/#testing", 
            "text": "There are no tests setup for this component.", 
            "title": "Testing"
        }, 
        {
            "location": "/system/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/system/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/system/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/system/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/system/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/system/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See the  organisations page  for additional components.", 
            "title": "License"
        }, 
        {
            "location": "/tasks/", 
            "text": "Tasks\n\n\nThe tasks component allows you to write code based tasks which are completed by a daemon, \nthis could allow you to create a single interface to control a cluster of servers tasks.\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/tasks\n\n\n\n\n\nCRON Daemon\n\n\nYou should create a file which will be run via cron:\n\n\ncron.php\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\nif\n \n(\nphp_sapi_name\n()\n \n!=\n \ncli\n)\n \n{\n\n    \nheader\n(\nHTTP/1.0 403 Forbidden\n);\n\n    \nexit\n(\nCLI script\n);\n\n\n}\n\n\n\n$task\n \n=\n \nnew\n \nPlinker\\Tasks\\Runner\n([\n\n    \ndatabase\n \n=\n \n[\n\n        \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n        \nhost\n     \n=\n \n,\n\n        \nname\n     \n=\n \n,\n\n        \nusername\n \n=\n \n,\n\n        \npassword\n \n=\n \n,\n\n        \nfreeze\n   \n=\n \nfalse\n,\n\n        \ndebug\n    \n=\n \nfalse\n\n    \n],\n\n    \ndebug\n       \n=\n \ntrue\n,\n\n    \nlog\n         \n=\n \ntrue\n,\n\n    \nsleep_time\n  \n=\n \n2\n,\n\n    \ntmp_path\n    \n=\n \n./.plinker\n,\n\n    \nauto_update\n \n=\n \n86400\n\n\n]);\n\n\n\n$task\n-\ndaemon\n(\nQueue\n);\n\n\n\n\n\n\nThen add a cron job:\n\n\n\n\n@reboot while sleep 1; do cd /var/www/html/examples/tasks \n /usr/bin/php run.php ; done\n\n\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n,\n\n        \n// database connection\n\n        \ndatabase\n \n=\n \n[\n\n            \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n            \nhost\n     \n=\n \n,\n\n            \nname\n     \n=\n \n,\n\n            \nusername\n \n=\n \n,\n\n            \npassword\n \n=\n \n,\n\n            \nfreeze\n   \n=\n \nfalse\n,\n\n            \ndebug\n    \n=\n \nfalse\n,\n\n        \n],\n\n        \n// displays output to task runner console\n\n        \ndebug\n \n=\n \ntrue\n,\n\n\n        \n// daemon sleep time\n\n        \nsleep_time\n \n=\n \n1\n,\n\n        \ntmp_path\n   \n=\n \n./.plinker\n\n    \n]\n\n\n);\n\n\n\n// or using global function\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n,\n \n[\n\n    \n// database connection\n\n    \ndatabase\n \n=\n \n[\n\n        \ndsn\n      \n=\n \nsqlite:./.plinker/database.db\n,\n\n        \nhost\n     \n=\n \n,\n\n        \nname\n     \n=\n \n,\n\n        \nusername\n \n=\n \n,\n\n        \npassword\n \n=\n \n,\n\n        \nfreeze\n   \n=\n \nfalse\n,\n\n        \ndebug\n    \n=\n \nfalse\n,\n\n    \n],\n\n    \n// displays output to task runner console\n\n    \ndebug\n \n=\n \ntrue\n,\n\n\n    \n// daemon sleep time\n\n    \nsleep_time\n \n=\n \n1\n,\n\n    \ntmp_path\n   \n=\n \n./.plinker\n\n\n]);\n\n\n\n\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method.\n\n\nCreate\n\n\nCreate a new task, tasks with the same name will be overwritten.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nName of task\n\n\n\n\n\n\n\n\nsource\n\n\nstring\n\n\nTask source code\n\n\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nType of task (php|bash)\n\n\n\n\n\n\n\n\ndescription\n\n\nstring\n\n\nDescription of task\n\n\n\n\n\n\n\n\nparams\n\n\narray\n\n\nDefault params passed to task\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\ntasks-\ncreate(\n\n\n    \nHello World\n,\n\n\n    \n?php\n \necho\n \nHello World\n;\n,\n\n\n    \nphp\n,\n\n\n    \nMy\n \nHello\n \nWorld\n \ntask\n,\n\n    \n[]\n\n\n)\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [id] =\n 1\n    [name] =\n Hello World\n    [source] =\n  cda22aa1e43992c1103a9f8a386b5dcb\n    [type] =\n php\n    [description] =\n My Hello World task\n    [params] =\n \n    [updated] =\n 2018-01-01 00:00:00\n    [created] =\n 2018-01-01 00:00:00\n)\n\n\n\n\n\nUpdate\n\n\nUpdate a task.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nid\n\n\nint\n\n\nId of task\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nName of task\n\n\n\n\n\n\n\n\nsource\n\n\nstring\n\n\nTask source code\n\n\n\n\n\n\n\n\ntype\n\n\nstring\n\n\nType of task (php|bash)\n\n\n\n\n\n\n\n\ndescription\n\n\nstring\n\n\nDescription of task\n\n\n\n\n\n\n\n\nparams\n\n\narray\n\n\nDefault params passed to task\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\ntasks-\nupdate(\n\n\n    1\n\n\n    \nHello World\n,\n\n\n    \n?php\n \necho\n \nHello World - Updated\n;\n,\n\n\n    \nphp\n,\n\n\n    \nMy\n \nHello\n \nWorld\n \ntask\n,\n\n    \n[]\n\n\n)\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [id] =\n 1\n    [name] =\n Hello World - Updated\n    [source] =\n  cda22aa1e43992c1103a9f8a386b5dcb\n    [type] =\n php\n    [description] =\n My Hello World task\n    [params] =\n \n    [updated] =\n 2018-01-01 00:00:00\n    [created] =\n 2018-01-01 00:00:00\n)\n\n\n\n\n\nGet\n\n\nGet a task.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nName of task\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\ntasks-\nget(\nHello World\n);\n\n\n\n\n\n\nResponse (RedBean Object)\n\n\nRedBeanPHP\\OODBBean Object\n(\n    [properties:protected] =\n Array\n        (\n            [id] =\n 1\n            [name] =\n Hello World\n            [source] =\n  cda22aa1e43992c1103a9f8a386b5dcb\n            [type] =\n php\n            [description] =\n My Hello World task\n            [params] =\n \n            [updated] =\n 2018-01-01 00:00:00\n            [created] =\n 2018-01-01 00:00:00\n        )\n\n    [__info:protected] =\n Array\n        (\n            [type] =\n tasksource\n            [sys.id] =\n id\n            [sys.orig] =\n Array\n                (\n                    [id] =\n 1\n                    [name] =\n Hello World\n                    [source] =\n  cda22aa1e43992c1103a9f8a386b5dcb\n                    [type] =\n php\n                    [description] =\n My Hello World task\n                    [params] =\n \n                    [updated] =\n 2018-01-01 00:00:00\n                    [created] =\n 2018-01-01 00:00:00\n                )\n\n            [tainted] =\n \n            [changed] =\n \n            [changelist] =\n Array\n                (\n                )\n\n            [model] =\n \n        )\n\n    [beanHelper:protected] =\n RedBeanPHP\\BeanHelper\\SimpleFacadeBeanHelper Object\n        (\n        )\n\n    [fetchType:protected] =\n \n    [withSql:protected] =\n \n    [withParams:protected] =\n Array\n        (\n        )\n\n    [aliasName:protected] =\n \n    [via:protected] =\n \n    [noLoad:protected] =\n \n    [all:protected] =\n \n)\n\n\n\n\n\nGet By Id\n\n\nGet a task by id.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nid\n\n\nint\n\n\nId of task\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\ntasks-\ngetById(1);\n\n\n\n\n\n\nResponse (RedBean Object)\n\n\nRedBeanPHP\\OODBBean Object\n(\n    [properties:protected] =\n Array\n        (\n            [id] =\n 1\n            [name] =\n Hello World\n            [source] =\n  cda22aa1e43992c1103a9f8a386b5dcb\n            [type] =\n php\n            [description] =\n My Hello World task\n            [params] =\n \n            [updated] =\n 2018-01-01 00:00:00\n            [created] =\n 2018-01-01 00:00:00\n        )\n\n    [__info:protected] =\n Array\n        (\n            [type] =\n tasksource\n            [sys.id] =\n id\n            [sys.orig] =\n Array\n                (\n                    [id] =\n 1\n                    [name] =\n Hello World\n                    [source] =\n  cda22aa1e43992c1103a9f8a386b5dcb\n                    [type] =\n php\n                    [description] =\n My Hello World task\n                    [params] =\n \n                    [updated] =\n 2018-01-01 00:00:00\n                    [created] =\n 2018-01-01 00:00:00\n                )\n\n            [tainted] =\n \n            [changed] =\n \n            [changelist] =\n Array\n                (\n                )\n\n            [model] =\n \n        )\n\n    [beanHelper:protected] =\n RedBeanPHP\\BeanHelper\\SimpleFacadeBeanHelper Object\n        (\n        )\n\n    [fetchType:protected] =\n \n    [withSql:protected] =\n \n    [withParams:protected] =\n Array\n        (\n        )\n\n    [aliasName:protected] =\n \n    [via:protected] =\n \n    [noLoad:protected] =\n \n    [all:protected] =\n \n)\n\n\n\n\n\nGet Task Sources\n\n\nGet all tasks.\n\n\nCall\n\n\n$client-\ntasks-\ngetTaskSources();\n\n\n\n\n\n\nResponse (RedBean Object)\n\n\nArray\n(\n    [1] =\n RedBeanPHP\\OODBBean Object\n        (\n            [properties:protected] =\n Array\n                (\n                    [id] =\n 1\n                    [name] =\n Hello World\n                    [source] =\n  cda22aa1e43992c1103a9f8a386b5dcb\n                    [type] =\n php\n                    [description] =\n My Hello World task\n                    [params] =\n \n                    [updated] =\n 2018-01-01 00:00:00\n                    [created] =\n 2018-01-01 00:00:00\n                )\n\n            [__info:protected] =\n Array\n                (\n                    [type] =\n tasksource\n                    [sys.id] =\n id\n                    [sys.orig] =\n Array\n                        (\n                            [id] =\n 1\n                            [name] =\n Hello World\n                            [source] =\n  cda22aa1e43992c1103a9f8a386b5dcb\n                            [type] =\n php\n                            [description] =\n My Hello World task\n                            [params] =\n \n                            [updated] =\n 2018-01-01 00:00:00\n                            [created] =\n 2018-01-01 00:00:00\n                        )\n\n                    [tainted] =\n \n                    [changed] =\n \n                    [changelist] =\n Array\n                        (\n                        )\n\n                    [model] =\n \n                )\n\n            [beanHelper:protected] =\n RedBeanPHP\\BeanHelper\\SimpleFacadeBeanHelper Object\n                (\n                )\n\n            [fetchType:protected] =\n \n            [withSql:protected] =\n \n            [withParams:protected] =\n Array\n                (\n                )\n\n            [aliasName:protected] =\n \n            [via:protected] =\n \n            [noLoad:protected] =\n \n            [all:protected] =\n \n        )\n    )\n)\n\n\n\n\n\nStatus\n\n\nGet the status of a task.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nName of task\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\ntasks-\nstatus(\nHello World\n);\n\n\n\n\n\n\nResponse\n\n\nrunning\n\n\n\n\n\nRun Count\n\n\nGet the run count of a particular task.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nName of task\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\ntasks-\nrunCount(\nHello World\n);\n\n\n\n\n\n\nResponse\n\n\n100\n\n\n\n\n\nRemove\n\n\nRemove a task by its name.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nName of task\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\ntasks-\nremove(\nHello World\n);\n\n\n\n\n\n\nResponse\n\n\ntrue\n\n\n\n\n\nRemove By Id\n\n\nRemove a task by its id.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nid\n\n\nint\n\n\nId of task\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\ntasks-\nremoveById(1);\n\n\n\n\n\n\nResponse\n\n\ntrue\n\n\n\n\n\nGet Tasks Log\n\n\nTask logs are entries created, when a task is run. Use this method to get the data.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntasksource_id\n\n\nint\n\n\nThe id of the task source (optional)\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$result = $client-\ntasks-\ngetTasksLog();\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [1] =\n RedBeanPHP\\OODBBean Object\n        (\n            [properties:protected] =\n Array\n                (\n                    [id] =\n 1\n                    [name] =\n Hello World\n                    [params] =\n []\n                    [repeats] =\n 1\n                    [completed] =\n 0\n                    [sleep] =\n 1\n                    [tasksource_id] =\n 1\n                    [run_last] =\n 2018-01-01 00:00:00\n                    [run_next] =\n 2018-01-01 00:00:00\n                    [run_count] =\n 6\n                    [result] =\n \n                    [tasksource] =\n \n                )\n\n            [__info:protected] =\n Array\n                (\n                    [type] =\n tasks\n                    [sys.id] =\n id\n                    [sys.orig] =\n Array\n                        (\n                            [id] =\n 1\n                            [name] =\n Hello World\n                            [params] =\n []\n                            [repeats] =\n 1\n                            [completed] =\n 0\n                            [sleep] =\n 1\n                            [tasksource_id] =\n 1\n                            [run_last] =\n 2018-01-01 00:00:00\n                            [run_next] =\n 2018-01-01 00:00:00\n                            [run_count] =\n 6\n                            [result] =\n \n                            [tasksource] =\n \n                        )\n\n                    [tainted] =\n \n                    [changed] =\n \n                    [changelist] =\n Array\n                        (\n                        )\n\n                    [model] =\n \n                )\n\n            [beanHelper:protected] =\n RedBeanPHP\\BeanHelper\\SimpleFacadeBeanHelper Object\n                (\n                )\n\n            [fetchType:protected] =\n \n            [withSql:protected] =\n \n            [withParams:protected] =\n Array\n                (\n                )\n\n            [aliasName:protected] =\n \n            [via:protected] =\n \n            [noLoad:protected] =\n \n            [all:protected] =\n \n        )\n    )\n)\n\n\n\n\n\nGet Tasks Log Count\n\n\nTask logs are entries created, when a task is run. Use this method to get the counts.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntasksource_id\n\n\nint\n\n\nThe id of the task (optional)\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$result = $client-\ntasks-\ngetTasksLogCount();\n\n\n\n\n\n\nResponse\n\n\n1\n\n\n\n\n\nRemove Tasks Log\n\n\nRemove a task log from the task.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntask_id\n\n\nint\n\n\nThe id of the task\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$result = $client-\ntasks-\nremoveTasksLog(1);\n\n\n\n\n\n\nResponse\n\n\ntrue\n\n\n\n\n\nGet Tasks\n\n\nTask logs are entries created, when a task is run. Use this method to get the data.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntask_id\n\n\nint\n\n\nThe id of the task (optional)\n\n\n\n\n\n\n\n\n\n\nCall\n\n\n$result = $client-\ntasks-\ngetTasks();\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [1] =\n RedBeanPHP\\OODBBean Object\n        (\n            [properties:protected] =\n Array\n                (\n                    [id] =\n 1\n                    [name] =\n Hello World\n                    [params] =\n []\n                    [repeats] =\n 1\n                    [completed] =\n 0\n                    [sleep] =\n 1\n                    [tasksource_id] =\n 1\n                    [run_last] =\n 2018-01-01 00:00:00\n                    [run_next] =\n 2018-01-01 00:00:00\n                    [run_count] =\n 6\n                    [result] =\n \n                    [tasksource] =\n \n                )\n\n            [__info:protected] =\n Array\n                (\n                    [type] =\n tasks\n                    [sys.id] =\n id\n                    [sys.orig] =\n Array\n                        (\n                            [id] =\n 1\n                            [name] =\n Hello World\n                            [params] =\n []\n                            [repeats] =\n 1\n                            [completed] =\n 0\n                            [sleep] =\n 1\n                            [tasksource_id] =\n 1\n                            [run_last] =\n 2018-01-01 00:00:00\n                            [run_next] =\n 2018-01-01 00:00:00\n                            [run_count] =\n 6\n                            [result] =\n \n                            [tasksource] =\n \n                        )\n\n                    [tainted] =\n \n                    [changed] =\n \n                    [changelist] =\n Array\n                        (\n                        )\n\n                    [model] =\n \n                )\n\n            [beanHelper:protected] =\n RedBeanPHP\\BeanHelper\\SimpleFacadeBeanHelper Object\n                (\n                )\n\n            [fetchType:protected] =\n \n            [withSql:protected] =\n \n            [withParams:protected] =\n Array\n                (\n                )\n\n            [aliasName:protected] =\n \n            [via:protected] =\n \n            [noLoad:protected] =\n \n            [all:protected] =\n \n        )\n    )\n)\n\n\n\n\n\nRun\n\n\nPlace task entry in tasking table for deamon to run.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nName of the task\n\n\n``\n\n\n\n\n\n\nparams\n\n\narray\n\n\nArray of values which are passed to task\n\n\n``\n\n\n\n\n\n\nsleep\n\n\nint\n\n\nSleep time between iterations, if 0 its run once\n\n\n0\n\n\n\n\n\n\n\n\nCall\n\n\n// run once\n\n\n$client-\ntasks-\nrun(\nHello World\n, [], 0);\n\n\n\n// run every day\n\n\n$client-\ntasks-\nrun(\nHello World\n, [], 86400);\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [id] =\n 1\n    [name] =\n Hello World\n    [params] =\n []\n    [repeats] =\n 1\n    [completed] =\n 0\n    [sleep] =\n 86400\n    [tasksource_id] =\n 1\n    [run_last] =\n 2018-01-01 00:00:00\n    [run_next] =\n 2018-01-01 00:00:00\n    [run_count] =\n 10\n    [result] =\n Hello World\n)\n\n\n\n\n\nRun Now\n\n\nRun a task now (task is not placed in tasking table for deamon to run), and \nrun as the web server user\n.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nName of the task\n\n\n``\n\n\n\n\n\n\n\n\nCall\n\n\n$client-\ntasks-\nrunNow(\nHello World\n);\n\n\n\n\n\n\nResponse\n\n\nHello World\n\n\n\n\n\nClear\n\n\nDelete all tasks.\n\n\nCall\n\n\n$result = $client-\ntasks-\nclear();\n\n\n\n\n\n\nResponse\n\n\ntrue\n\n\n\n\n\nReset\n\n\nDelete database. \nUse with caution.\n\n\nCall\n\n\n$result = $client-\ntasks-\nreset();\n\n\n\n\n\n\nResponse\n\n\ntrue\n\n\n\n\n\nTesting\n\n\nThere are no tests setup for this component.\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nLinks\n\n\nWant to see an example project which uses this component?\n\n\n\n\nPlinkerUI\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee the \norganisations page\n for additional components.", 
            "title": "Tasks"
        }, 
        {
            "location": "/tasks/#tasks", 
            "text": "The tasks component allows you to write code based tasks which are completed by a daemon, \nthis could allow you to create a single interface to control a cluster of servers tasks.", 
            "title": "Tasks"
        }, 
        {
            "location": "/tasks/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/tasks", 
            "title": "Install"
        }, 
        {
            "location": "/tasks/#cron-daemon", 
            "text": "You should create a file which will be run via cron:  cron.php  ?php  require   vendor/autoload.php ;  if   ( php_sapi_name ()   !=   cli )   { \n     header ( HTTP/1.0 403 Forbidden ); \n     exit ( CLI script );  }  $task   =   new   Plinker\\Tasks\\Runner ([ \n     database   =   [ \n         dsn        =   sqlite:./.plinker/database.db , \n         host       =   , \n         name       =   , \n         username   =   , \n         password   =   , \n         freeze     =   false , \n         debug      =   false \n     ], \n     debug         =   true , \n     log           =   true , \n     sleep_time    =   2 , \n     tmp_path      =   ./.plinker , \n     auto_update   =   86400  ]);  $task - daemon ( Queue );   Then add a cron job:   @reboot while sleep 1; do cd /var/www/html/examples/tasks   /usr/bin/php run.php ; done", 
            "title": "CRON Daemon"
        }, 
        {
            "location": "/tasks/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password , \n         // database connection \n         database   =   [ \n             dsn        =   sqlite:./.plinker/database.db , \n             host       =   , \n             name       =   , \n             username   =   , \n             password   =   , \n             freeze     =   false , \n             debug      =   false , \n         ], \n         // displays output to task runner console \n         debug   =   true , \n\n         // daemon sleep time \n         sleep_time   =   1 , \n         tmp_path     =   ./.plinker \n     ]  );  // or using global function  $client   =   plinker_client ( http://example.com/server.php ,   a secret password ,   [ \n     // database connection \n     database   =   [ \n         dsn        =   sqlite:./.plinker/database.db , \n         host       =   , \n         name       =   , \n         username   =   , \n         password   =   , \n         freeze     =   false , \n         debug      =   false , \n     ], \n     // displays output to task runner console \n     debug   =   true , \n\n     // daemon sleep time \n     sleep_time   =   1 , \n     tmp_path     =   ./.plinker  ]);", 
            "title": "Client"
        }, 
        {
            "location": "/tasks/#methods", 
            "text": "Once setup, you call the class though its namespace to its method.", 
            "title": "Methods"
        }, 
        {
            "location": "/tasks/#create", 
            "text": "Create a new task, tasks with the same name will be overwritten.     Parameter  Type  Description  Default      name  string  Name of task     source  string  Task source code     type  string  Type of task (php|bash)     description  string  Description of task     params  array  Default params passed to task      Call  $client- tasks- create(       Hello World ,       ?php   echo   Hello World ; ,       php ,       My   Hello   World   task , \n     []  )   Response  Array\n(\n    [id] =  1\n    [name] =  Hello World\n    [source] =   cda22aa1e43992c1103a9f8a386b5dcb\n    [type] =  php\n    [description] =  My Hello World task\n    [params] =  \n    [updated] =  2018-01-01 00:00:00\n    [created] =  2018-01-01 00:00:00\n)", 
            "title": "Create"
        }, 
        {
            "location": "/tasks/#update", 
            "text": "Update a task.     Parameter  Type  Description  Default      id  int  Id of task     name  string  Name of task     source  string  Task source code     type  string  Type of task (php|bash)     description  string  Description of task     params  array  Default params passed to task      Call  $client- tasks- update(      1       Hello World ,       ?php   echo   Hello World - Updated ; ,       php ,       My   Hello   World   task , \n     []  )   Response  Array\n(\n    [id] =  1\n    [name] =  Hello World - Updated\n    [source] =   cda22aa1e43992c1103a9f8a386b5dcb\n    [type] =  php\n    [description] =  My Hello World task\n    [params] =  \n    [updated] =  2018-01-01 00:00:00\n    [created] =  2018-01-01 00:00:00\n)", 
            "title": "Update"
        }, 
        {
            "location": "/tasks/#get", 
            "text": "Get a task.     Parameter  Type  Description  Default      name  string  Name of task      Call  $client- tasks- get( Hello World );   Response (RedBean Object)  RedBeanPHP\\OODBBean Object\n(\n    [properties:protected] =  Array\n        (\n            [id] =  1\n            [name] =  Hello World\n            [source] =   cda22aa1e43992c1103a9f8a386b5dcb\n            [type] =  php\n            [description] =  My Hello World task\n            [params] =  \n            [updated] =  2018-01-01 00:00:00\n            [created] =  2018-01-01 00:00:00\n        )\n\n    [__info:protected] =  Array\n        (\n            [type] =  tasksource\n            [sys.id] =  id\n            [sys.orig] =  Array\n                (\n                    [id] =  1\n                    [name] =  Hello World\n                    [source] =   cda22aa1e43992c1103a9f8a386b5dcb\n                    [type] =  php\n                    [description] =  My Hello World task\n                    [params] =  \n                    [updated] =  2018-01-01 00:00:00\n                    [created] =  2018-01-01 00:00:00\n                )\n\n            [tainted] =  \n            [changed] =  \n            [changelist] =  Array\n                (\n                )\n\n            [model] =  \n        )\n\n    [beanHelper:protected] =  RedBeanPHP\\BeanHelper\\SimpleFacadeBeanHelper Object\n        (\n        )\n\n    [fetchType:protected] =  \n    [withSql:protected] =  \n    [withParams:protected] =  Array\n        (\n        )\n\n    [aliasName:protected] =  \n    [via:protected] =  \n    [noLoad:protected] =  \n    [all:protected] =  \n)", 
            "title": "Get"
        }, 
        {
            "location": "/tasks/#get-by-id", 
            "text": "Get a task by id.     Parameter  Type  Description  Default      id  int  Id of task      Call  $client- tasks- getById(1);   Response (RedBean Object)  RedBeanPHP\\OODBBean Object\n(\n    [properties:protected] =  Array\n        (\n            [id] =  1\n            [name] =  Hello World\n            [source] =   cda22aa1e43992c1103a9f8a386b5dcb\n            [type] =  php\n            [description] =  My Hello World task\n            [params] =  \n            [updated] =  2018-01-01 00:00:00\n            [created] =  2018-01-01 00:00:00\n        )\n\n    [__info:protected] =  Array\n        (\n            [type] =  tasksource\n            [sys.id] =  id\n            [sys.orig] =  Array\n                (\n                    [id] =  1\n                    [name] =  Hello World\n                    [source] =   cda22aa1e43992c1103a9f8a386b5dcb\n                    [type] =  php\n                    [description] =  My Hello World task\n                    [params] =  \n                    [updated] =  2018-01-01 00:00:00\n                    [created] =  2018-01-01 00:00:00\n                )\n\n            [tainted] =  \n            [changed] =  \n            [changelist] =  Array\n                (\n                )\n\n            [model] =  \n        )\n\n    [beanHelper:protected] =  RedBeanPHP\\BeanHelper\\SimpleFacadeBeanHelper Object\n        (\n        )\n\n    [fetchType:protected] =  \n    [withSql:protected] =  \n    [withParams:protected] =  Array\n        (\n        )\n\n    [aliasName:protected] =  \n    [via:protected] =  \n    [noLoad:protected] =  \n    [all:protected] =  \n)", 
            "title": "Get By Id"
        }, 
        {
            "location": "/tasks/#get-task-sources", 
            "text": "Get all tasks.  Call  $client- tasks- getTaskSources();   Response (RedBean Object)  Array\n(\n    [1] =  RedBeanPHP\\OODBBean Object\n        (\n            [properties:protected] =  Array\n                (\n                    [id] =  1\n                    [name] =  Hello World\n                    [source] =   cda22aa1e43992c1103a9f8a386b5dcb\n                    [type] =  php\n                    [description] =  My Hello World task\n                    [params] =  \n                    [updated] =  2018-01-01 00:00:00\n                    [created] =  2018-01-01 00:00:00\n                )\n\n            [__info:protected] =  Array\n                (\n                    [type] =  tasksource\n                    [sys.id] =  id\n                    [sys.orig] =  Array\n                        (\n                            [id] =  1\n                            [name] =  Hello World\n                            [source] =   cda22aa1e43992c1103a9f8a386b5dcb\n                            [type] =  php\n                            [description] =  My Hello World task\n                            [params] =  \n                            [updated] =  2018-01-01 00:00:00\n                            [created] =  2018-01-01 00:00:00\n                        )\n\n                    [tainted] =  \n                    [changed] =  \n                    [changelist] =  Array\n                        (\n                        )\n\n                    [model] =  \n                )\n\n            [beanHelper:protected] =  RedBeanPHP\\BeanHelper\\SimpleFacadeBeanHelper Object\n                (\n                )\n\n            [fetchType:protected] =  \n            [withSql:protected] =  \n            [withParams:protected] =  Array\n                (\n                )\n\n            [aliasName:protected] =  \n            [via:protected] =  \n            [noLoad:protected] =  \n            [all:protected] =  \n        )\n    )\n)", 
            "title": "Get Task Sources"
        }, 
        {
            "location": "/tasks/#status", 
            "text": "Get the status of a task.     Parameter  Type  Description  Default      name  string  Name of task      Call  $client- tasks- status( Hello World );   Response  running", 
            "title": "Status"
        }, 
        {
            "location": "/tasks/#run-count", 
            "text": "Get the run count of a particular task.     Parameter  Type  Description  Default      name  string  Name of task      Call  $client- tasks- runCount( Hello World );   Response  100", 
            "title": "Run Count"
        }, 
        {
            "location": "/tasks/#remove", 
            "text": "Remove a task by its name.     Parameter  Type  Description  Default      name  string  Name of task      Call  $client- tasks- remove( Hello World );   Response  true", 
            "title": "Remove"
        }, 
        {
            "location": "/tasks/#remove-by-id", 
            "text": "Remove a task by its id.     Parameter  Type  Description  Default      id  int  Id of task      Call  $client- tasks- removeById(1);   Response  true", 
            "title": "Remove By Id"
        }, 
        {
            "location": "/tasks/#get-tasks-log", 
            "text": "Task logs are entries created, when a task is run. Use this method to get the data.     Parameter  Type  Description  Default      tasksource_id  int  The id of the task source (optional)      Call  $result = $client- tasks- getTasksLog();   Response  Array\n(\n    [1] =  RedBeanPHP\\OODBBean Object\n        (\n            [properties:protected] =  Array\n                (\n                    [id] =  1\n                    [name] =  Hello World\n                    [params] =  []\n                    [repeats] =  1\n                    [completed] =  0\n                    [sleep] =  1\n                    [tasksource_id] =  1\n                    [run_last] =  2018-01-01 00:00:00\n                    [run_next] =  2018-01-01 00:00:00\n                    [run_count] =  6\n                    [result] =  \n                    [tasksource] =  \n                )\n\n            [__info:protected] =  Array\n                (\n                    [type] =  tasks\n                    [sys.id] =  id\n                    [sys.orig] =  Array\n                        (\n                            [id] =  1\n                            [name] =  Hello World\n                            [params] =  []\n                            [repeats] =  1\n                            [completed] =  0\n                            [sleep] =  1\n                            [tasksource_id] =  1\n                            [run_last] =  2018-01-01 00:00:00\n                            [run_next] =  2018-01-01 00:00:00\n                            [run_count] =  6\n                            [result] =  \n                            [tasksource] =  \n                        )\n\n                    [tainted] =  \n                    [changed] =  \n                    [changelist] =  Array\n                        (\n                        )\n\n                    [model] =  \n                )\n\n            [beanHelper:protected] =  RedBeanPHP\\BeanHelper\\SimpleFacadeBeanHelper Object\n                (\n                )\n\n            [fetchType:protected] =  \n            [withSql:protected] =  \n            [withParams:protected] =  Array\n                (\n                )\n\n            [aliasName:protected] =  \n            [via:protected] =  \n            [noLoad:protected] =  \n            [all:protected] =  \n        )\n    )\n)", 
            "title": "Get Tasks Log"
        }, 
        {
            "location": "/tasks/#get-tasks-log-count", 
            "text": "Task logs are entries created, when a task is run. Use this method to get the counts.     Parameter  Type  Description  Default      tasksource_id  int  The id of the task (optional)      Call  $result = $client- tasks- getTasksLogCount();   Response  1", 
            "title": "Get Tasks Log Count"
        }, 
        {
            "location": "/tasks/#remove-tasks-log", 
            "text": "Remove a task log from the task.     Parameter  Type  Description  Default      task_id  int  The id of the task      Call  $result = $client- tasks- removeTasksLog(1);   Response  true", 
            "title": "Remove Tasks Log"
        }, 
        {
            "location": "/tasks/#get-tasks", 
            "text": "Task logs are entries created, when a task is run. Use this method to get the data.     Parameter  Type  Description  Default      task_id  int  The id of the task (optional)      Call  $result = $client- tasks- getTasks();   Response  Array\n(\n    [1] =  RedBeanPHP\\OODBBean Object\n        (\n            [properties:protected] =  Array\n                (\n                    [id] =  1\n                    [name] =  Hello World\n                    [params] =  []\n                    [repeats] =  1\n                    [completed] =  0\n                    [sleep] =  1\n                    [tasksource_id] =  1\n                    [run_last] =  2018-01-01 00:00:00\n                    [run_next] =  2018-01-01 00:00:00\n                    [run_count] =  6\n                    [result] =  \n                    [tasksource] =  \n                )\n\n            [__info:protected] =  Array\n                (\n                    [type] =  tasks\n                    [sys.id] =  id\n                    [sys.orig] =  Array\n                        (\n                            [id] =  1\n                            [name] =  Hello World\n                            [params] =  []\n                            [repeats] =  1\n                            [completed] =  0\n                            [sleep] =  1\n                            [tasksource_id] =  1\n                            [run_last] =  2018-01-01 00:00:00\n                            [run_next] =  2018-01-01 00:00:00\n                            [run_count] =  6\n                            [result] =  \n                            [tasksource] =  \n                        )\n\n                    [tainted] =  \n                    [changed] =  \n                    [changelist] =  Array\n                        (\n                        )\n\n                    [model] =  \n                )\n\n            [beanHelper:protected] =  RedBeanPHP\\BeanHelper\\SimpleFacadeBeanHelper Object\n                (\n                )\n\n            [fetchType:protected] =  \n            [withSql:protected] =  \n            [withParams:protected] =  Array\n                (\n                )\n\n            [aliasName:protected] =  \n            [via:protected] =  \n            [noLoad:protected] =  \n            [all:protected] =  \n        )\n    )\n)", 
            "title": "Get Tasks"
        }, 
        {
            "location": "/tasks/#run", 
            "text": "Place task entry in tasking table for deamon to run.     Parameter  Type  Description  Default      name  string  Name of the task  ``    params  array  Array of values which are passed to task  ``    sleep  int  Sleep time between iterations, if 0 its run once  0     Call  // run once  $client- tasks- run( Hello World , [], 0);  // run every day  $client- tasks- run( Hello World , [], 86400);   Response  Array\n(\n    [id] =  1\n    [name] =  Hello World\n    [params] =  []\n    [repeats] =  1\n    [completed] =  0\n    [sleep] =  86400\n    [tasksource_id] =  1\n    [run_last] =  2018-01-01 00:00:00\n    [run_next] =  2018-01-01 00:00:00\n    [run_count] =  10\n    [result] =  Hello World\n)", 
            "title": "Run"
        }, 
        {
            "location": "/tasks/#run-now", 
            "text": "Run a task now (task is not placed in tasking table for deamon to run), and  run as the web server user .     Parameter  Type  Description  Default      name  string  Name of the task  ``     Call  $client- tasks- runNow( Hello World );   Response  Hello World", 
            "title": "Run Now"
        }, 
        {
            "location": "/tasks/#clear", 
            "text": "Delete all tasks.  Call  $result = $client- tasks- clear();   Response  true", 
            "title": "Clear"
        }, 
        {
            "location": "/tasks/#reset", 
            "text": "Delete database.  Use with caution.  Call  $result = $client- tasks- reset();   Response  true", 
            "title": "Reset"
        }, 
        {
            "location": "/tasks/#testing", 
            "text": "There are no tests setup for this component.", 
            "title": "Testing"
        }, 
        {
            "location": "/tasks/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/tasks/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/tasks/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/tasks/#links", 
            "text": "Want to see an example project which uses this component?   PlinkerUI", 
            "title": "Links"
        }, 
        {
            "location": "/tasks/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/tasks/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/tasks/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See the  organisations page  for additional components.", 
            "title": "License"
        }, 
        {
            "location": "/test/", 
            "text": "Test\n\n\nA test/demo component which has a few basic methods which demostrate how easy it is \nto define a class to interface to, a range of data types can be sent back from\nstrings, arrays, objects, closures or even self/this for testing/example purposes.\n\n\nMake sure you check out \nthe components code\n,\nthere is no complicated voodoo going on, its just a simple PHP class.\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/test\n\n\n\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n,\n\n        \narray\n \n=\n \n[\n\n            \nkey\n \n=\n \nvalue\n\n        \n]\n\n    \n]\n\n\n);\n\n\n\n// or using global function\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n,\n \n[\n\n    \narray\n \n=\n \n[\n\n        \nkey\n \n=\n \nvalue\n\n    \n]\n\n\n]);\n\n\n\n\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method.\n\n\nThis\n\n\nBy calling this you can return the entire class to call locally.\n\n\nCall\n\n\n$client-\ntest-\nthis();\n\n\n\n\n\n\nResponse\n\n\nPlinker\\Test\\Test Object\n(\n    [config] =\n Array\n        (\n            [array] =\n Array\n                (\n                    [key] =\n value\n                )\n\n        )\n\n)\n\n\n\n\n\nIf your wondering where the \nconfig\n array is coming from.. its passed in the connection, see above client section.\n\n\nConfig\n\n\nThis shows a \"getter\" for the class which returns the config.\n\n\nCall\n\n\n$client-\ntest-\nconfig();\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [array] =\n Array\n        (\n            [key] =\n value\n        )\n\n)\n\n\n\n\n\nAn Array\n\n\nThis shows returning a basic array. :/\n\n\nCall\n\n\n$client-\ntest-\nan_array();\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [0] =\n Hello World\n)\n\n\n\n\n\nA Closure\n\n\nThis shows returning a closure (anonymous function) which was serialised with \n(opis/closure) SerializableClosure\n.\n\n\nCall\n\n\n$client-\ntest-\nclosure()(\nfoo\n);\n\n\n\n\n\n\nResponse\n\n\nfoo\n\n\n\n\n\nRun Closure\n\n\nThis shows running a closure (anonymous function) on the server from the client which was serialised with \n(opis/closure) SerializableClosure\n. \nThis allows you to neatly mutate any data before its returned back from the server.\n\n\nCall\n\n\n$client-\ntest-\nrun_closure(function ($value = []) {\n\n\n    return implode(\n \n, $value);\n\n\n})\n\n\n\n\n\n\nResponse\n\n\nHello World\n\n\n\n\n\nAn Object\n\n\nThis shows returning an object, in this example a DateTime object.\n\n\nCall\n\n\n$client-\ntest-\ndate();\n\n\n\n\n\n\nResponse\n\n\nDateTime Object\n(\n    [date] =\n 2018-05-11 15:53:34.655980\n    [timezone_type] =\n 3\n    [timezone] =\n UTC\n)\n\n\n\n\n\nA String\n\n\nThis shows returning an string, in this example it returns the IP address of the server.\n\n\nCall\n\n\n$client-\ntest-\nmy_ip();\n\n\n\n$client-\ntest-\nyour_ip();\n\n\n\n\n\n\nResponse\n\n\n10.158.250.158\n\n10.158.250.1\n\n\n\n\n\nTesting\n\n\nThere are no tests setup for this component.\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee the \norganisations page\n for additional components.", 
            "title": "Test"
        }, 
        {
            "location": "/test/#test", 
            "text": "A test/demo component which has a few basic methods which demostrate how easy it is \nto define a class to interface to, a range of data types can be sent back from\nstrings, arrays, objects, closures or even self/this for testing/example purposes.  Make sure you check out  the components code ,\nthere is no complicated voodoo going on, its just a simple PHP class.", 
            "title": "Test"
        }, 
        {
            "location": "/test/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/test", 
            "title": "Install"
        }, 
        {
            "location": "/test/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password , \n         array   =   [ \n             key   =   value \n         ] \n     ]  );  // or using global function  $client   =   plinker_client ( http://example.com/server.php ,   a secret password ,   [ \n     array   =   [ \n         key   =   value \n     ]  ]);", 
            "title": "Client"
        }, 
        {
            "location": "/test/#methods", 
            "text": "Once setup, you call the class though its namespace to its method.", 
            "title": "Methods"
        }, 
        {
            "location": "/test/#this", 
            "text": "By calling this you can return the entire class to call locally.  Call  $client- test- this();   Response  Plinker\\Test\\Test Object\n(\n    [config] =  Array\n        (\n            [array] =  Array\n                (\n                    [key] =  value\n                )\n\n        )\n\n)  If your wondering where the  config  array is coming from.. its passed in the connection, see above client section.", 
            "title": "This"
        }, 
        {
            "location": "/test/#config", 
            "text": "This shows a \"getter\" for the class which returns the config.  Call  $client- test- config();   Response  Array\n(\n    [array] =  Array\n        (\n            [key] =  value\n        )\n\n)", 
            "title": "Config"
        }, 
        {
            "location": "/test/#an-array", 
            "text": "This shows returning a basic array. :/  Call  $client- test- an_array();   Response  Array\n(\n    [0] =  Hello World\n)", 
            "title": "An Array"
        }, 
        {
            "location": "/test/#a-closure", 
            "text": "This shows returning a closure (anonymous function) which was serialised with  (opis/closure) SerializableClosure .  Call  $client- test- closure()( foo );   Response  foo", 
            "title": "A Closure"
        }, 
        {
            "location": "/test/#run-closure", 
            "text": "This shows running a closure (anonymous function) on the server from the client which was serialised with  (opis/closure) SerializableClosure . \nThis allows you to neatly mutate any data before its returned back from the server.  Call  $client- test- run_closure(function ($value = []) {      return implode(   , $value);  })   Response  Hello World", 
            "title": "Run Closure"
        }, 
        {
            "location": "/test/#an-object", 
            "text": "This shows returning an object, in this example a DateTime object.  Call  $client- test- date();   Response  DateTime Object\n(\n    [date] =  2018-05-11 15:53:34.655980\n    [timezone_type] =  3\n    [timezone] =  UTC\n)", 
            "title": "An Object"
        }, 
        {
            "location": "/test/#a-string", 
            "text": "This shows returning an string, in this example it returns the IP address of the server.  Call  $client- test- my_ip();  $client- test- your_ip();   Response  10.158.250.158\n\n10.158.250.1", 
            "title": "A String"
        }, 
        {
            "location": "/test/#testing", 
            "text": "There are no tests setup for this component.", 
            "title": "Testing"
        }, 
        {
            "location": "/test/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/test/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/test/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/test/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/test/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/test/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See the  organisations page  for additional components.", 
            "title": "License"
        }, 
        {
            "location": "/LXD/aliases/", 
            "text": "Helper methods for image aliases.\n\n\nList\n\n\nList image aliases\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxc\n-\nimages\n-\naliases\n-\nlist\n(\nlocal\n);\n\n\n\n\n\n\nResponse\n\n\n[\n\n    \n/1.0/images/aliases/alias-name\n\n\n]\n\n\n\n\n\n\nInfo\n\n\nGet image alias information.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nAlias name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxc\n-\nimages\n-\naliases\n-\ninfo\n(\nlocal\n,\n \nalias-name\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \ndescription\n:\n \nThe alias description\n,\n\n    \nname\n:\n \nalias-name\n,\n\n    \ntarget\n:\n \nimage fingerprint\n\n\n}\n\n\n\n\n\n\nCreate\n\n\nGet image alias information.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nAlias options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxc\n-\nimages\n-\naliases\n-\ncreate\n(\nlocal\n,\n \n[\n\n    \ndescription\n \n=\n \nThe alias description\n,\n\n    \ntarget\n \n=\n \nimage fingerprint\n,\n\n    \nname\n \n=\n \nalias-name\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nReplace\n\n\nReplace alias target or description.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nAlias name\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nAlias options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxc\n-\nimages\n-\naliases\n-\nreplace\n(\nlocal\n,\n \nalias-name\n,\n \n[\n\n    \ndescription\n \n=\n \nNew description\n,\n\n    \ntarget\n \n=\n \nimage fingerprint\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nUpdate\n\n\nUpdate alias target or description.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nAlias name\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nImages options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\nimages\n-\naliases\n-\nupdate\n(\nlocal\n,\n \nalias-name\n,\n \n[\n\n    \ndescription\n \n=\n \nNew description\n,\n\n    \ntarget\n \n=\n \nimage fingerprint\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nRename\n\n\nRename an image alias.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nAlias name\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nImages options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\nimages\n-\naliases\n-\nrename\n(\nlocal\n,\n \nalias-name\n,\n \n[\n\n    \nname\n:\n \nnew-name\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nDelete\n\n\nDelete an image alias.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nname\n\n\nAlias name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\nimages\n-\naliases\n-\ndelete\n(\nlocal\n,\n \nalias-name\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}", 
            "title": "Aliases"
        }, 
        {
            "location": "/LXD/aliases/#list", 
            "text": "List image aliases  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    mutator  function  Mutation function      $client - lxc - images - aliases - list ( local );   Response  [ \n     /1.0/images/aliases/alias-name  ]", 
            "title": "List"
        }, 
        {
            "location": "/LXD/aliases/#info", 
            "text": "Get image alias information.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Alias name     mutator  function  Mutation function      $client - lxc - images - aliases - info ( local ,   alias-name );   Response  { \n     description :   The alias description , \n     name :   alias-name , \n     target :   image fingerprint  }", 
            "title": "Info"
        }, 
        {
            "location": "/LXD/aliases/#create", 
            "text": "Get image alias information.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    options  object  Alias options     mutator  function  Mutation function      $client - lxc - images - aliases - create ( local ,   [ \n     description   =   The alias description , \n     target   =   image fingerprint , \n     name   =   alias-name  ]);   Response  {  }", 
            "title": "Create"
        }, 
        {
            "location": "/LXD/aliases/#replace", 
            "text": "Replace alias target or description.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Alias name     options  object  Alias options     mutator  function  Mutation function      $client - lxc - images - aliases - replace ( local ,   alias-name ,   [ \n     description   =   New description , \n     target   =   image fingerprint  ]);   Response  {  }", 
            "title": "Replace"
        }, 
        {
            "location": "/LXD/aliases/#update", 
            "text": "Update alias target or description.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Alias name     options  object  Images options     mutator  function  Mutation function      $client - lxd - images - aliases - update ( local ,   alias-name ,   [ \n     description   =   New description , \n     target   =   image fingerprint  ]);   Response  {  }", 
            "title": "Update"
        }, 
        {
            "location": "/LXD/aliases/#rename", 
            "text": "Rename an image alias.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Alias name     options  object  Images options     mutator  function  Mutation function      $client - lxd - images - aliases - rename ( local ,   alias-name ,   [ \n     name :   new-name  ]);   Response  {  }", 
            "title": "Rename"
        }, 
        {
            "location": "/LXD/aliases/#delete", 
            "text": "Delete an image alias.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  name  Alias name     mutator  function  Mutation function      $client - lxd - images - aliases - delete ( local ,   alias-name );   Response  {  }", 
            "title": "Delete"
        }, 
        {
            "location": "/LXD/certificates/", 
            "text": "Helper methods for certificates.\n\n\nList\n\n\nList client certificates.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxc\n-\ncertificates\n-\nlist\n(\nlocal\n);\n\n\n\n\n\n\nResponse\n\n\n[\n\n    \n/1.0/certificates/33c50480212ea93c0afbb8125c280b1a66445cac64706066ade30851f54cc8bx\n\n\n]\n\n\n\n\n\n\nAdd\n\n\nAdd client certificate.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nCertificate options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxc\n-\ncertificates\n-\nadd\n(\nlocal\n,\n \n[\n\n    \ntype\n \n=\n \nclient\n,\n\n    \ncertificate\n \n=\n \nPEM certificate\n,\n\n    \nname\n \n=\n \nfoo\n,\n\n    \npassword\n \n=\n \nserver-trust-password\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nInfo\n\n\nGet certificate information.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nfingerprint\n\n\nstring\n\n\nCertificate fingerprint\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxc\n-\ncertificates\n-\ninfo\n(\nlocal\n,\n \n33c50480212ea93c0afbb8125c280b1a66445cac64706066ade30851f54cc8bx\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \ncertificate\n:\n \n-----BEGIN CERTIFICATE-----\\n snip \\n-----END CERTIFICATE-----\\n\n,\n\n    \nfingerprint\n:\n \n33c50480212ea93c0afbb8125c280b1a66445cac64706066ade30851f54cc8bx\n,\n\n    \nname\n:\n \n,\n\n    \ntype\n:\n \nclient\n\n\n}\n\n\n\n\n\n\nReplace\n\n\nReplace certificate properties.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nfingerprint\n\n\nstring\n\n\nCertificate fingerprint\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nCertificate options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxc\n-\ncertificates\n-\nreplace\n(\nlocal\n,\n \n33c50480212ea93c0afbb8125c280b1a66445cac64706066ade30851f54cc8bx\n,\n \n[\n\n    \ntype\n \n=\n \nclient\n,\n\n    \nname\n \n=\n \nbar\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nUpdate\n\n\nUpdate certificate properties.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nfingerprint\n\n\nstring\n\n\nCertificate fingerprint\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nCertificate options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\ncertificates\n-\nupdate\n(\nlocal\n,\n \n33c50480212ea93c0afbb8125c280b1a66445cac64706066ade30851f54cc8bx\n,\n \n[\n\n    \nname\n \n=\n \nbaz\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nDelete\n\n\nDelete a client certificate.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nfingerprint\n\n\nstring\n\n\nCertificate fingerprint\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\ncertificates\n-\ndelete\n(\nlocal\n,\n \n33c50480212ea93c0afbb8125c280b1a66445cac64706066ade30851f54cc8bx\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}", 
            "title": "Certificates"
        }, 
        {
            "location": "/LXD/certificates/#list", 
            "text": "List client certificates.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    mutator  function  Mutation function      $client - lxc - certificates - list ( local );   Response  [ \n     /1.0/certificates/33c50480212ea93c0afbb8125c280b1a66445cac64706066ade30851f54cc8bx  ]", 
            "title": "List"
        }, 
        {
            "location": "/LXD/certificates/#add", 
            "text": "Add client certificate.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    options  object  Certificate options     mutator  function  Mutation function      $client - lxc - certificates - add ( local ,   [ \n     type   =   client , \n     certificate   =   PEM certificate , \n     name   =   foo , \n     password   =   server-trust-password  ]);   Response  {  }", 
            "title": "Add"
        }, 
        {
            "location": "/LXD/certificates/#info", 
            "text": "Get certificate information.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    fingerprint  string  Certificate fingerprint     mutator  function  Mutation function      $client - lxc - certificates - info ( local ,   33c50480212ea93c0afbb8125c280b1a66445cac64706066ade30851f54cc8bx );   Response  { \n     certificate :   -----BEGIN CERTIFICATE-----\\n snip \\n-----END CERTIFICATE-----\\n , \n     fingerprint :   33c50480212ea93c0afbb8125c280b1a66445cac64706066ade30851f54cc8bx , \n     name :   , \n     type :   client  }", 
            "title": "Info"
        }, 
        {
            "location": "/LXD/certificates/#replace", 
            "text": "Replace certificate properties.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    fingerprint  string  Certificate fingerprint     options  object  Certificate options     mutator  function  Mutation function      $client - lxc - certificates - replace ( local ,   33c50480212ea93c0afbb8125c280b1a66445cac64706066ade30851f54cc8bx ,   [ \n     type   =   client , \n     name   =   bar  ]);   Response  {  }", 
            "title": "Replace"
        }, 
        {
            "location": "/LXD/certificates/#update", 
            "text": "Update certificate properties.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    fingerprint  string  Certificate fingerprint     options  object  Certificate options     mutator  function  Mutation function      $client - lxd - certificates - update ( local ,   33c50480212ea93c0afbb8125c280b1a66445cac64706066ade30851f54cc8bx ,   [ \n     name   =   baz  ]);   Response  {  }", 
            "title": "Update"
        }, 
        {
            "location": "/LXD/certificates/#delete", 
            "text": "Delete a client certificate.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    fingerprint  string  Certificate fingerprint     mutator  function  Mutation function      $client - lxd - certificates - delete ( local ,   33c50480212ea93c0afbb8125c280b1a66445cac64706066ade30851f54cc8bx );   Response  {  }", 
            "title": "Delete"
        }, 
        {
            "location": "/LXD/containers/", 
            "text": "Helper methods for containers.\n\n\nList\n\n\nList containers on remote.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n// apply no mutation to the response\n\n\n$client\n-\nlxc\n-\ncontainers\n-\nlist\n(\nlocal\n);\n\n\n\n// strip endpoint from result\n\n\n$client\n-\nlxd\n-\ncontainers\n-\nlist\n(\nlocal\n,\n \nfunction\n \n(\n$result\n)\n \n{\n\n    \nreturn\n \nstr_replace\n(\n/1.0/containers/\n,\n \n,\n \n$result\n);\n    \n\n});\n\n\n\n\n\n\nResponse\n\n\n[\n \n    \n/\n1.0\n/containers/my-container\n\n\n]\n\n\n\n[\n \n    \nmy-container\n\n\n]\n\n\n\n\n\n\nInfo\n\n\nGet container information.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxc\n-\ncontainers\n-\ninfo\n(\nlocal\n,\n \nmy-container\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \narchitecture\n:\n \nx86_64\n,\n\n    \nconfig\n:\n \n{\n\n        \nimage.architecture\n:\n \namd64\n,\n\n        \nimage.description\n:\n \nubuntu 16.04 LTS amd64 (release) (20180405)\n,\n\n        \nimage.label\n:\n \nrelease\n,\n\n        \nimage.os\n:\n \nubuntu\n,\n\n        \nimage.release\n:\n \nxenial\n,\n\n        \nimage.serial\n:\n \n20180405\n,\n\n        \nimage.version\n:\n \n16.04\n,\n\n        \nvolatile.base_image\n:\n \nbe7cec7c948958adfbb9bc7dbd292762d2388cc883466815fc2b6bc06bf06f5a\n,\n\n        \nvolatile.eth0.hwaddr\n:\n \n00:16:3e:fb:89:0a\n,\n\n        \nvolatile.idmap.base\n:\n \n0\n,\n\n        \nvolatile.idmap.next\n:\n \n[{\\\nIsuid\\\n:true,\\\nIsgid\\\n:false,\\\nHostid\\\n:100000,\\\nNsid\\\n:0,\\\nMaprange\\\n:65536},{\\\nIsuid\\\n:false,\\\nIsgid\\\n:true,\\\nHostid\\\n:100000,\\\nNsid\\\n:0,\\\nMaprange\\\n:65536}]\n,\n\n        \nvolatile.last_state.idmap\n:\n \n[{\\\nIsuid\\\n:true,\\\nIsgid\\\n:false,\\\nHostid\\\n:100000,\\\nNsid\\\n:0,\\\nMaprange\\\n:65536},{\\\nIsuid\\\n:false,\\\nIsgid\\\n:true,\\\nHostid\\\n:100000,\\\nNsid\\\n:0,\\\nMaprange\\\n:65536}]\n,\n\n        \nvolatile.last_state.power\n:\n \nRUNNING\n\n    \n},\n\n    \ncreated_at\n:\n \n2018-04-08T15:41:08Z\n,\n\n    \ndescription\n:\n \n,\n\n    \ndevices\n:\n \n{},\n\n    \nephemeral\n:\n \nfalse\n,\n\n    \nexpanded_config\n:\n \n{\n\n        \nimage.architecture\n:\n \namd64\n,\n\n        \nimage.description\n:\n \nubuntu 16.04 LTS amd64 (release) (20180405)\n,\n\n        \nimage.label\n:\n \nrelease\n,\n\n        \nimage.os\n:\n \nubuntu\n,\n\n        \nimage.release\n:\n \nxenial\n,\n\n        \nimage.serial\n:\n \n20180405\n,\n\n        \nimage.version\n:\n \n16.04\n,\n\n        \nvolatile.base_image\n:\n \nbe7cec7c948958adfbb9bc7dbd292762d2388cc883466815fc2b6bc06bf06f5a\n,\n\n        \nvolatile.eth0.hwaddr\n:\n \n00:16:3e:fb:89:0a\n,\n\n        \nvolatile.idmap.base\n:\n \n0\n,\n\n        \nvolatile.idmap.next\n:\n \n[{\\\nIsuid\\\n:true,\\\nIsgid\\\n:false,\\\nHostid\\\n:100000,\\\nNsid\\\n:0,\\\nMaprange\\\n:65536},{\\\nIsuid\\\n:false,\\\nIsgid\\\n:true,\\\nHostid\\\n:100000,\\\nNsid\\\n:0,\\\nMaprange\\\n:65536}]\n,\n\n        \nvolatile.last_state.idmap\n:\n \n[{\\\nIsuid\\\n:true,\\\nIsgid\\\n:false,\\\nHostid\\\n:100000,\\\nNsid\\\n:0,\\\nMaprange\\\n:65536},{\\\nIsuid\\\n:false,\\\nIsgid\\\n:true,\\\nHostid\\\n:100000,\\\nNsid\\\n:0,\\\nMaprange\\\n:65536}]\n,\n\n        \nvolatile.last_state.power\n:\n \nRUNNING\n\n    \n},\n\n    \nexpanded_devices\n:\n \n{\n\n        \neth0\n:\n \n{\n\n            \nname\n:\n \neth0\n,\n\n            \nnictype\n:\n \nbridged\n,\n\n            \nparent\n:\n \nlxdbr0\n,\n\n            \ntype\n:\n \nnic\n\n        \n},\n\n        \nroot\n:\n \n{\n\n            \npath\n:\n \n/\n,\n\n            \npool\n:\n \ndefault\n,\n\n            \ntype\n:\n \ndisk\n\n        \n}\n\n    \n},\n\n    \nlast_used_at\n:\n \n2018-04-08T20:09:53Z\n,\n\n    \nlocation\n:\n \n,\n\n    \nname\n:\n \nmy-container\n,\n\n    \nprofiles\n:\n \n[\n\n        \ndefault\n\n    \n],\n\n    \nstateful\n:\n \nfalse\n,\n\n    \nstatus\n:\n \nRunning\n,\n\n    \nstatus_code\n:\n \n103\n\n\n}\n\n\n\n\n\n\nGet State\n\n\nGet the state of a container.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nThe container name\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\ncontainers\n-\ngetState\n(\nlocal\n,\n \nmy-container\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \ncpu\n:\n \n{\n\n        \nusage\n:\n \n15159435138\n\n    \n},\n\n    \ndisk\n:\n \n{},\n\n    \nmemory\n:\n \n{\n\n        \nswap_usage\n:\n \n0\n,\n\n        \nswap_usage_peak\n:\n \n0\n,\n\n        \nusage\n:\n \n239001600\n,\n\n        \nusage_peak\n:\n \n314175488\n\n    \n},\n\n    \nnetwork\n:\n \n{\n\n        \neth0\n:\n \n{\n\n            \naddresses\n:\n \n[\n\n                \n{\n\n                    \naddress\n:\n \n10.189.110.190\n,\n\n                    \nfamily\n:\n \ninet\n,\n\n                    \nnetmask\n:\n \n24\n,\n\n                    \nscope\n:\n \nglobal\n\n                \n},\n\n                \n{\n\n                    \naddress\n:\n \nfe80::216:3eff:fefb:890a\n,\n\n                    \nfamily\n:\n \ninet6\n,\n\n                    \nnetmask\n:\n \n64\n,\n\n                    \nscope\n:\n \nlink\n\n                \n}\n\n            \n],\n\n            \ncounters\n:\n \n{\n\n                \nbytes_received\n:\n \n26351929\n,\n\n                \nbytes_sent\n:\n \n706569\n,\n\n                \npackets_received\n:\n \n18810\n,\n\n                \npackets_sent\n:\n \n10095\n\n            \n},\n\n            \nhost_name\n:\n \nvethQGS6S6\n,\n\n            \nhwaddr\n:\n \n00:16:3e:fb:89:0a\n,\n\n            \nmtu\n:\n \n1500\n,\n\n            \nstate\n:\n \nup\n,\n\n            \ntype\n:\n \nbroadcast\n\n        \n},\n\n        \nlo\n:\n \n{\n\n            \naddresses\n:\n \n[\n\n                \n{\n\n                    \naddress\n:\n \n127.0.0.1\n,\n\n                    \nfamily\n:\n \ninet\n,\n\n                    \nnetmask\n:\n \n8\n,\n\n                    \nscope\n:\n \nlocal\n\n                \n},\n\n                \n{\n\n                    \naddress\n:\n \n::1\n,\n\n                    \nfamily\n:\n \ninet6\n,\n\n                    \nnetmask\n:\n \n128\n,\n\n                    \nscope\n:\n \nlocal\n\n                \n}\n\n            \n],\n\n            \ncounters\n:\n \n{\n\n                \nbytes_received\n:\n \n0\n,\n\n                \nbytes_sent\n:\n \n0\n,\n\n                \npackets_received\n:\n \n0\n,\n\n                \npackets_sent\n:\n \n0\n\n            \n},\n\n            \nhost_name\n:\n \n,\n\n            \nhwaddr\n:\n \n,\n\n            \nmtu\n:\n \n65536\n,\n\n            \nstate\n:\n \nup\n,\n\n            \ntype\n:\n \nloopback\n\n        \n}\n\n    \n},\n\n    \npid\n:\n \n7156\n,\n\n    \nprocesses\n:\n \n30\n,\n\n    \nstatus\n:\n \nRunning\n,\n\n    \nstatus_code\n:\n \n103\n\n\n}\n\n\n\n\n\n\nSet State\n\n\nSet the state of a container on remote, this allows for more flexibility then \ncalling the (start, stop, restart, freeze, unfreeze) methods below as you can set the options parameter.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nThe container name\n\n\n\n\n\n\n\n\noptions\n\n\nobject | json\n\n\nContainer state options\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\ncontainers\n-\nsetState\n(\nlocal\n,\n \nmy-container\n,\n \n[\n\n    \naction\n \n=\n \nstop\n,\n  \n#\n \nState\n \nchange\n \naction\n \n(\nstop\n,\n \nstart\n,\n \nrestart\n,\n \nfreeze\n \nor\n \nunfreeze\n)\n\n    \ntimeout\n \n=\n \n30\n,\n     \n#\n \nA\n \ntimeout\n \nafter\n \nwhich\n \nthe\n \nstate\n \nchange\n \nis\n \nconsidered\n \nas\n \nfailed\n\n    \nforce\n \n=\n \ntrue\n,\n     \n#\n \nForce\n \nthe\n \nstate\n \nchange\n \n(\ncurrently\n \nonly\n \nvalid\n \nfor\n \nstop\n \nand\n \nrestart\n \nwhere\n \nit\n \nmeans\n \nkilling\n \nthe\n \ncontainer\n)\n\n    \nstateful\n \n=\n \ntrue\n   \n#\n \nWhether\n \nto\n \nstore\n \nor\n \nrestore\n \nruntime\n \nstate\n \nbefore\n \nstopping\n \nor\n \nstartiong\n \n(\nonly\n \nvalid\n \nfor\n \nstop\n \nand\n \nstart\n,\n \ndefaults\n \nto\n \nfalse\n)\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \nclass:\n \ntask\n,\n\n    \ncreated_at:\n \n2018-04-08T16:37:36.511708398Z\n,\n\n    \ndescription:\n \n[Stopping,\n \nStarting,\n \nRestarting,\n \nFreezing,\n \nUnfreezing]\n \ncontainer\n,\n\n    \nerr:\n \n,\n\n    \nid:\n \n4850b25b-3a9a-4666-acf6-9f2b4c25a236\n,\n\n    \nmay_cancel:\n \nfalse,\n\n    \nmetadata:\n \nnull,\n\n    \nresources:\n \n{\n\n        \ncontainers:\n \n[\n\n            \n/1.0/containers/my-container\n\n        \n]\n\n    \n}\n,\n\n    \nstatus:\n \nRunning\n,\n\n    \nstatus_code:\n \n103\n,\n\n    \nupdated_at:\n \n2018-04-08\nT\n16\n:\n37\n:\n36.511708398\nZ\n\n\n}\n\n\n\n\n\n\nReplace\n\n\nReplaces container configuration or restore snapshot.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nContainer options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\ncontainers\n-\nreplace\n(\nlocal\n,\n \nmy-container\n,\n \n[\n\n    \narchitecture\n \n=\n \nx86_64\n,\n\n    \nconfig\n \n=\n  \n[\n\n        \nlimits.cpu\n \n=\n \n4\n,\n\n        \nvolatile.base_image\n \n=\n \n97d97a3d1d053840ca19c86cdd0596cf1be060c5157d31407f2a4f9f350c78cc\n,\n\n        \nvolatile.eth0.hwaddr\n \n=\n \n00:16:3e:1c:94:38\n\n    \n],\n\n    \ndevices\n \n=\n \n[\n\n        \nrootfs\n \n=\n \n[\n\n            \npath\n \n=\n \n/\n,\n\n            \ntype\n \n=\n \ndisk\n\n        \n]\n\n    \n],\n\n    \nephemeral\n \n=\n \ntrue\n,\n\n    \nprofiles\n \n=\n \n[\n\n        \ndefault\n\n    \n]\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nUpdate\n\n\nUpdate container configuration.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nContainer options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\ncontainers\n-\nupdate\n(\nlocal\n,\n \nmy-container\n,\n \n[\n\n    \narchitecture\n \n=\n \nx86_64\n,\n\n    \nconfig\n \n=\n  \n[\n\n        \nlimits.cpu\n \n=\n \n4\n\n    \n],\n\n    \ndevices\n \n=\n \n[\n\n        \nrootfs\n \n=\n \n[\n\n            \npath\n \n=\n \n/\n,\n\n            \ntype\n \n=\n \ndisk\n\n        \n]\n\n    \n],\n\n    \nephemeral\n \n=\n \ntrue\n,\n\n    \nprofiles\n \n=\n \n[\n\n        \ndefault\n\n    \n]\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nRename\n\n\nRename a container.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\nnewName\n\n\nstring\n\n\nNew container name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\ncontainers\n-\nrename\n(\nlocal\n,\n \nold-name\n,\n \nnew-name\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nCreate\n\n\nCreate a container.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nThe container options\n\n\n\n\n\n\n\n\n\n\nFull container options can be found here: \nhttps://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1\n\n\n// example from local\n\n\n$client\n-\nlxd\n-\ncontainers\n-\ncreate\n(\nlocal\n,\n \n[\n\n    \nname\n \n=\n \nmy-new-container\n,\n\n    \narchitecture\n \n=\n \nx86_64\n,\n\n    \nprofiles\n \n=\n \n[\n\n        \ndefault\n\n    \n],\n\n    \nephemeral\n \n=\n \ntrue\n,\n\n    \nconfig\n \n=\n \n[\n\n        \nlimits.cpu\n \n=\n \n2\n\n    \n],\n\n    \ndevices\n \n=\n \n[],\n\n    \nsource\n \n=\n \n[\n\n        \ntype\n \n=\n \nimage\n,\n\n        \nfingerprint\n \n=\n \nbe7cec7c9489\n\n    \n]\n\n\n]);\n\n\n\n// example from https://images.linuxcontainers.org\n\n\n$client\n-\nlxd\n-\ncontainers\n-\ncreate\n(\nlocal\n,\n \n[\n\n    \nname\n \n=\n \nmy-new-container\n,\n\n    \narchitecture\n \n=\n \nx86_64\n,\n\n    \nprofiles\n \n=\n \n[\n\n        \ndefault\n\n    \n],\n\n    \nephemeral\n \n=\n \ntrue\n,\n\n    \nconfig\n \n=\n \n[\n\n        \nlimits.cpu\n \n=\n \n2\n\n    \n],\n\n    \ndevices\n \n=\n \n[],\n\n    \nsource\n \n=\n \n[\n\n        \ntype\n:\n \nimage\n,\n\n        \nmode\n:\n \npull\n,\n\n        \nserver\n:\n \nhttps://images.linuxcontainers.org:8443\n,\n\n        \nprotocol\n:\n \nsimplestreams\n,\n\n        \nalias\n:\n \nubuntu/16.04\n\n    \n]\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \nclass\n:\n \ntask\n,\n\n    \ncreated_at\n:\n \n2018-04-08T22:49:33.892947111Z\n,\n\n    \ndescription\n:\n \nCreating container\n,\n\n    \nerr\n:\n \n,\n\n    \nid\n:\n \ncfd9cd81-a651-4b9b-bd89-4667cc51ad4b\n,\n\n    \nmay_cancel\n:\n \nfalse\n,\n\n    \nmetadata\n:\n \nnull\n,\n\n    \nresources\n:\n \n{\n\n        \ncontainers\n:\n \n[\n\n            \n/1.0/containers/my-new-container\n\n        \n]\n\n    \n},\n\n    \nstatus\n:\n \nRunning\n,\n\n    \nstatus_code\n:\n \n103\n,\n\n    \nupdated_at\n:\n \n2018-04-08T22:49:33.892947111Z\n\n\n}\n\n\n\n\n\n\n*you could also simply call \nlxc.local\n()\n to run what you would normally run on cmd line:\n\n\n// same as above\n\n\n$client\n-\nlxd\n-\nlocal\n(\nlxc launch ubuntu:16.04 my-new-container\n);\n\n\n\n// launch on a remote\n\n\n$client\n-\nlxd\n-\nlocal\n(\nlxc launch ubuntu:16.04 production:my-container\n)\n\n\n\n// launch local image on a remote\n\n\n$client\n-\nlxd\n-\nlocal\n(\nlxc launch local:\nfingerprint\n production:my-container\n)\n\n\n\n// launch remote image on a remote\n\n\n$client\n-\nlxd\n-\nlocal\n(\nlxc launch staging:\nfingerprint\n production:my-container\n)\n\n\n\n\n\n\nStart\n\n\nStart a container.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nThe container name\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\ncontainers\n-\nstart\n(\nlocal\n,\n \ncontainer-name\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \nclass:\n \ntask\n,\n\n    \ncreated_at:\n \n2018-04-08T16:37:36.511708398Z\n,\n\n    \ndescription:\n \nStarting\n \ncontainer\n,\n\n    \nerr:\n \n,\n\n    \nid:\n \n4850b25b-3a9a-4666-acf6-9f2b4c25a236\n,\n\n    \nmay_cancel:\n \nfalse,\n\n    \nmetadata:\n \nnull,\n\n    \nresources:\n \n{\n\n        \ncontainers:\n \n[\n\n            \n/1.0/containers/my-container\n\n        \n]\n\n    \n}\n,\n\n    \nstatus:\n \nRunning\n,\n\n    \nstatus_code:\n \n103\n,\n\n    \nupdated_at:\n \n2018-04-08\nT\n16\n:\n37\n:\n36.511708398\nZ\n\n\n}\n\n\n\n\n\n\nStop\n\n\nStop a container.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nThe container name\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\ncontainers\n-\nstop\n(\nlocal\n,\n \ncontainer-name\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \nclass:\n \ntask\n,\n\n    \ncreated_at:\n \n2018-04-08T16:37:36.511708398Z\n,\n\n    \ndescription:\n \nStopping\n \ncontainer\n,\n\n    \nerr:\n \n,\n\n    \nid:\n \n4850b25b-3a9a-4666-acf6-9f2b4c25a236\n,\n\n    \nmay_cancel:\n \nfalse,\n\n    \nmetadata:\n \nnull,\n\n    \nresources:\n \n{\n\n        \ncontainers:\n \n[\n\n            \n/1.0/containers/my-container\n\n        \n]\n\n    \n}\n,\n\n    \nstatus:\n \nRunning\n,\n\n    \nstatus_code:\n \n103\n,\n\n    \nupdated_at:\n \n2018-04-08\nT\n16\n:\n37\n:\n36.511708398\nZ\n\n\n}\n\n\n\n\n\n\nRestart\n\n\nRestart a container.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nThe container name\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\ncontainers\n-\nrestart\n(\nlocal\n,\n \ncontainer-name\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \nclass:\n \ntask\n,\n\n    \ncreated_at:\n \n2018-04-08T16:37:36.511708398Z\n,\n\n    \ndescription:\n \nRestarting\n \ncontainer\n,\n\n    \nerr:\n \n,\n\n    \nid:\n \n4850b25b-3a9a-4666-acf6-9f2b4c25a236\n,\n\n    \nmay_cancel:\n \nfalse,\n\n    \nmetadata:\n \nnull,\n\n    \nresources:\n \n{\n\n        \ncontainers:\n \n[\n\n            \n/1.0/containers/my-container\n\n        \n]\n\n    \n}\n,\n\n    \nstatus:\n \nRunning\n,\n\n    \nstatus_code:\n \n103\n,\n\n    \nupdated_at:\n \n2018-04-08\nT\n16\n:\n37\n:\n36.511708398\nZ\n\n\n}\n\n\n\n\n\n\nFreeze\n\n\nFreeze a container.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nThe container name\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\ncontainers\n-\nfreeze\n(\nlocal\n,\n \ncontainer-name\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \nclass:\n \ntask\n,\n\n    \ncreated_at:\n \n2018-04-08T16:37:36.511708398Z\n,\n\n    \ndescription:\n \nFreezing\n \ncontainer\n,\n\n    \nerr:\n \n,\n\n    \nid:\n \n4850b25b-3a9a-4666-acf6-9f2b4c25a236\n,\n\n    \nmay_cancel:\n \nfalse,\n\n    \nmetadata:\n \nnull,\n\n    \nresources:\n \n{\n\n        \ncontainers:\n \n[\n\n            \n/1.0/containers/my-container\n\n        \n]\n\n    \n}\n,\n\n    \nstatus:\n \nRunning\n,\n\n    \nstatus_code:\n \n103\n,\n\n    \nupdated_at:\n \n2018-04-08\nT\n16\n:\n37\n:\n36.511708398\nZ\n\n\n}\n\n\n\n\n\n\nUnfreeze\n\n\nUnfreeze a container.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nThe container name\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\ncontainers\n-\nunfreeze\n(\nlocal\n,\n \ncontainer-name\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \nclass:\n \ntask\n,\n\n    \ncreated_at:\n \n2018-04-08T16:37:36.511708398Z\n,\n\n    \ndescription:\n \nThawing\n \ncontainer\n,\n\n    \nerr:\n \n,\n\n    \nid:\n \n4850b25b-3a9a-4666-acf6-9f2b4c25a236\n,\n\n    \nmay_cancel:\n \nfalse,\n\n    \nmetadata:\n \nnull,\n\n    \nresources:\n \n{\n\n        \ncontainers:\n \n[\n\n            \n/1.0/containers/my-container\n\n        \n]\n\n    \n}\n,\n\n    \nstatus:\n \nRunning\n,\n\n    \nstatus_code:\n \n103\n,\n\n    \nupdated_at:\n \n2018-04-08\nT\n16\n:\n37\n:\n36.511708398\nZ\n\n\n}\n\n\n\n\n\n\nDelete\n\n\nDelete a container.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\ncontainers\n-\ndelete\n(\nlocal\n,\n \ncontainer-name\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nExec\n\n\nRun a command in container.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nThe container options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client\n-\nlxd\n-\ncontainers\n-\nexec\n(\nlocal\n,\n \ncontainer-name\n,\n \n[\n\n    \ncommand\n \n=\n \n[\n/bin/bash\n],\n\n    \nenvironment\n \n=\n \n[],\n\n    \nwait-for-websocket\n \n=\n \nfalse\n,\n\n    \nrecord-output\n \n=\n \nfalse\n,\n\n    \ninteractive\n \n=\n \nfalse\n,\n\n    \nwidth\n \n=\n \n80\n,\n\n    \nheight\n \n=\n \n25\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \nclass\n:\n \ntask\n,\n\n    \ncreated_at\n:\n \n2018-04-16T01:58:34.642661556Z\n,\n\n    \ndescription\n:\n \nExecuting command\n,\n\n    \nerr\n:\n \n,\n\n    \nid\n:\n \nbff27d5c-f54c-4fb4-8956-60bcea56d074\n,\n\n    \nmay_cancel\n:\n \nfalse\n,\n\n    \nmetadata\n:\n \nnull\n,\n\n    \nresources\n:\n \n{\n\n        \ncontainers\n:\n \n[\n\n            \n/1.0/containers/my-container\n\n        \n]\n\n    \n},\n\n    \nstatus\n:\n \nRunning\n,\n\n    \nstatus_code\n:\n \n103\n,\n\n    \nupdated_at\n:\n \n2018-04-16T01:58:34.642661556Z\n\n\n}", 
            "title": "Containers"
        }, 
        {
            "location": "/LXD/containers/#list", 
            "text": "List containers on remote.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    mutator  function  Mutation function      // apply no mutation to the response  $client - lxc - containers - list ( local );  // strip endpoint from result  $client - lxd - containers - list ( local ,   function   ( $result )   { \n     return   str_replace ( /1.0/containers/ ,   ,   $result );      });   Response  [  \n     / 1.0 /containers/my-container  ]  [  \n     my-container  ]", 
            "title": "List"
        }, 
        {
            "location": "/LXD/containers/#info", 
            "text": "Get container information.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Container name     mutator  function  Mutation function      $client - lxc - containers - info ( local ,   my-container );   Response  { \n     architecture :   x86_64 , \n     config :   { \n         image.architecture :   amd64 , \n         image.description :   ubuntu 16.04 LTS amd64 (release) (20180405) , \n         image.label :   release , \n         image.os :   ubuntu , \n         image.release :   xenial , \n         image.serial :   20180405 , \n         image.version :   16.04 , \n         volatile.base_image :   be7cec7c948958adfbb9bc7dbd292762d2388cc883466815fc2b6bc06bf06f5a , \n         volatile.eth0.hwaddr :   00:16:3e:fb:89:0a , \n         volatile.idmap.base :   0 , \n         volatile.idmap.next :   [{\\ Isuid\\ :true,\\ Isgid\\ :false,\\ Hostid\\ :100000,\\ Nsid\\ :0,\\ Maprange\\ :65536},{\\ Isuid\\ :false,\\ Isgid\\ :true,\\ Hostid\\ :100000,\\ Nsid\\ :0,\\ Maprange\\ :65536}] , \n         volatile.last_state.idmap :   [{\\ Isuid\\ :true,\\ Isgid\\ :false,\\ Hostid\\ :100000,\\ Nsid\\ :0,\\ Maprange\\ :65536},{\\ Isuid\\ :false,\\ Isgid\\ :true,\\ Hostid\\ :100000,\\ Nsid\\ :0,\\ Maprange\\ :65536}] , \n         volatile.last_state.power :   RUNNING \n     }, \n     created_at :   2018-04-08T15:41:08Z , \n     description :   , \n     devices :   {}, \n     ephemeral :   false , \n     expanded_config :   { \n         image.architecture :   amd64 , \n         image.description :   ubuntu 16.04 LTS amd64 (release) (20180405) , \n         image.label :   release , \n         image.os :   ubuntu , \n         image.release :   xenial , \n         image.serial :   20180405 , \n         image.version :   16.04 , \n         volatile.base_image :   be7cec7c948958adfbb9bc7dbd292762d2388cc883466815fc2b6bc06bf06f5a , \n         volatile.eth0.hwaddr :   00:16:3e:fb:89:0a , \n         volatile.idmap.base :   0 , \n         volatile.idmap.next :   [{\\ Isuid\\ :true,\\ Isgid\\ :false,\\ Hostid\\ :100000,\\ Nsid\\ :0,\\ Maprange\\ :65536},{\\ Isuid\\ :false,\\ Isgid\\ :true,\\ Hostid\\ :100000,\\ Nsid\\ :0,\\ Maprange\\ :65536}] , \n         volatile.last_state.idmap :   [{\\ Isuid\\ :true,\\ Isgid\\ :false,\\ Hostid\\ :100000,\\ Nsid\\ :0,\\ Maprange\\ :65536},{\\ Isuid\\ :false,\\ Isgid\\ :true,\\ Hostid\\ :100000,\\ Nsid\\ :0,\\ Maprange\\ :65536}] , \n         volatile.last_state.power :   RUNNING \n     }, \n     expanded_devices :   { \n         eth0 :   { \n             name :   eth0 , \n             nictype :   bridged , \n             parent :   lxdbr0 , \n             type :   nic \n         }, \n         root :   { \n             path :   / , \n             pool :   default , \n             type :   disk \n         } \n     }, \n     last_used_at :   2018-04-08T20:09:53Z , \n     location :   , \n     name :   my-container , \n     profiles :   [ \n         default \n     ], \n     stateful :   false , \n     status :   Running , \n     status_code :   103  }", 
            "title": "Info"
        }, 
        {
            "location": "/LXD/containers/#get-state", 
            "text": "Get the state of a container.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  The container name      $client - lxd - containers - getState ( local ,   my-container );   Response  { \n     cpu :   { \n         usage :   15159435138 \n     }, \n     disk :   {}, \n     memory :   { \n         swap_usage :   0 , \n         swap_usage_peak :   0 , \n         usage :   239001600 , \n         usage_peak :   314175488 \n     }, \n     network :   { \n         eth0 :   { \n             addresses :   [ \n                 { \n                     address :   10.189.110.190 , \n                     family :   inet , \n                     netmask :   24 , \n                     scope :   global \n                 }, \n                 { \n                     address :   fe80::216:3eff:fefb:890a , \n                     family :   inet6 , \n                     netmask :   64 , \n                     scope :   link \n                 } \n             ], \n             counters :   { \n                 bytes_received :   26351929 , \n                 bytes_sent :   706569 , \n                 packets_received :   18810 , \n                 packets_sent :   10095 \n             }, \n             host_name :   vethQGS6S6 , \n             hwaddr :   00:16:3e:fb:89:0a , \n             mtu :   1500 , \n             state :   up , \n             type :   broadcast \n         }, \n         lo :   { \n             addresses :   [ \n                 { \n                     address :   127.0.0.1 , \n                     family :   inet , \n                     netmask :   8 , \n                     scope :   local \n                 }, \n                 { \n                     address :   ::1 , \n                     family :   inet6 , \n                     netmask :   128 , \n                     scope :   local \n                 } \n             ], \n             counters :   { \n                 bytes_received :   0 , \n                 bytes_sent :   0 , \n                 packets_received :   0 , \n                 packets_sent :   0 \n             }, \n             host_name :   , \n             hwaddr :   , \n             mtu :   65536 , \n             state :   up , \n             type :   loopback \n         } \n     }, \n     pid :   7156 , \n     processes :   30 , \n     status :   Running , \n     status_code :   103  }", 
            "title": "Get State"
        }, 
        {
            "location": "/LXD/containers/#set-state", 
            "text": "Set the state of a container on remote, this allows for more flexibility then \ncalling the (start, stop, restart, freeze, unfreeze) methods below as you can set the options parameter.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  The container name     options  object | json  Container state options      $client - lxd - containers - setState ( local ,   my-container ,   [ \n     action   =   stop ,    #   State   change   action   ( stop ,   start ,   restart ,   freeze   or   unfreeze ) \n     timeout   =   30 ,       #   A   timeout   after   which   the   state   change   is   considered   as   failed \n     force   =   true ,       #   Force   the   state   change   ( currently   only   valid   for   stop   and   restart   where   it   means   killing   the   container ) \n     stateful   =   true     #   Whether   to   store   or   restore   runtime   state   before   stopping   or   startiong   ( only   valid   for   stop   and   start ,   defaults   to   false )  ]);   Response  { \n     class:   task , \n     created_at:   2018-04-08T16:37:36.511708398Z , \n     description:   [Stopping,   Starting,   Restarting,   Freezing,   Unfreezing]   container , \n     err:   , \n     id:   4850b25b-3a9a-4666-acf6-9f2b4c25a236 , \n     may_cancel:   false, \n     metadata:   null, \n     resources:   { \n         containers:   [ \n             /1.0/containers/my-container \n         ] \n     } , \n     status:   Running , \n     status_code:   103 , \n     updated_at:   2018-04-08 T 16 : 37 : 36.511708398 Z  }", 
            "title": "Set State"
        }, 
        {
            "location": "/LXD/containers/#replace", 
            "text": "Replaces container configuration or restore snapshot.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Container name     options  object  Container options     mutator  function  Mutation function      $client - lxd - containers - replace ( local ,   my-container ,   [ \n     architecture   =   x86_64 , \n     config   =    [ \n         limits.cpu   =   4 , \n         volatile.base_image   =   97d97a3d1d053840ca19c86cdd0596cf1be060c5157d31407f2a4f9f350c78cc , \n         volatile.eth0.hwaddr   =   00:16:3e:1c:94:38 \n     ], \n     devices   =   [ \n         rootfs   =   [ \n             path   =   / , \n             type   =   disk \n         ] \n     ], \n     ephemeral   =   true , \n     profiles   =   [ \n         default \n     ]  ]);   Response  {  }", 
            "title": "Replace"
        }, 
        {
            "location": "/LXD/containers/#update", 
            "text": "Update container configuration.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Container name     options  object  Container options     mutator  function  Mutation function      $client - lxd - containers - update ( local ,   my-container ,   [ \n     architecture   =   x86_64 , \n     config   =    [ \n         limits.cpu   =   4 \n     ], \n     devices   =   [ \n         rootfs   =   [ \n             path   =   / , \n             type   =   disk \n         ] \n     ], \n     ephemeral   =   true , \n     profiles   =   [ \n         default \n     ]  ]);   Response  {  }", 
            "title": "Update"
        }, 
        {
            "location": "/LXD/containers/#rename", 
            "text": "Rename a container.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Container name     newName  string  New container name     mutator  function  Mutation function      $client - lxd - containers - rename ( local ,   old-name ,   new-name );   Response  {  }", 
            "title": "Rename"
        }, 
        {
            "location": "/LXD/containers/#create", 
            "text": "Create a container.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    options  object  The container options      Full container options can be found here:  https://github.com/lxc/lxd/blob/master/doc/rest-api.md#post-1  // example from local  $client - lxd - containers - create ( local ,   [ \n     name   =   my-new-container , \n     architecture   =   x86_64 , \n     profiles   =   [ \n         default \n     ], \n     ephemeral   =   true , \n     config   =   [ \n         limits.cpu   =   2 \n     ], \n     devices   =   [], \n     source   =   [ \n         type   =   image , \n         fingerprint   =   be7cec7c9489 \n     ]  ]);  // example from https://images.linuxcontainers.org  $client - lxd - containers - create ( local ,   [ \n     name   =   my-new-container , \n     architecture   =   x86_64 , \n     profiles   =   [ \n         default \n     ], \n     ephemeral   =   true , \n     config   =   [ \n         limits.cpu   =   2 \n     ], \n     devices   =   [], \n     source   =   [ \n         type :   image , \n         mode :   pull , \n         server :   https://images.linuxcontainers.org:8443 , \n         protocol :   simplestreams , \n         alias :   ubuntu/16.04 \n     ]  ]);   Response  { \n     class :   task , \n     created_at :   2018-04-08T22:49:33.892947111Z , \n     description :   Creating container , \n     err :   , \n     id :   cfd9cd81-a651-4b9b-bd89-4667cc51ad4b , \n     may_cancel :   false , \n     metadata :   null , \n     resources :   { \n         containers :   [ \n             /1.0/containers/my-new-container \n         ] \n     }, \n     status :   Running , \n     status_code :   103 , \n     updated_at :   2018-04-08T22:49:33.892947111Z  }   *you could also simply call  lxc.local ()  to run what you would normally run on cmd line:  // same as above  $client - lxd - local ( lxc launch ubuntu:16.04 my-new-container );  // launch on a remote  $client - lxd - local ( lxc launch ubuntu:16.04 production:my-container )  // launch local image on a remote  $client - lxd - local ( lxc launch local: fingerprint  production:my-container )  // launch remote image on a remote  $client - lxd - local ( lxc launch staging: fingerprint  production:my-container )", 
            "title": "Create"
        }, 
        {
            "location": "/LXD/containers/#start", 
            "text": "Start a container.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  The container name      $client - lxd - containers - start ( local ,   container-name );   Response  { \n     class:   task , \n     created_at:   2018-04-08T16:37:36.511708398Z , \n     description:   Starting   container , \n     err:   , \n     id:   4850b25b-3a9a-4666-acf6-9f2b4c25a236 , \n     may_cancel:   false, \n     metadata:   null, \n     resources:   { \n         containers:   [ \n             /1.0/containers/my-container \n         ] \n     } , \n     status:   Running , \n     status_code:   103 , \n     updated_at:   2018-04-08 T 16 : 37 : 36.511708398 Z  }", 
            "title": "Start"
        }, 
        {
            "location": "/LXD/containers/#stop", 
            "text": "Stop a container.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  The container name      $client - lxd - containers - stop ( local ,   container-name );   Response  { \n     class:   task , \n     created_at:   2018-04-08T16:37:36.511708398Z , \n     description:   Stopping   container , \n     err:   , \n     id:   4850b25b-3a9a-4666-acf6-9f2b4c25a236 , \n     may_cancel:   false, \n     metadata:   null, \n     resources:   { \n         containers:   [ \n             /1.0/containers/my-container \n         ] \n     } , \n     status:   Running , \n     status_code:   103 , \n     updated_at:   2018-04-08 T 16 : 37 : 36.511708398 Z  }", 
            "title": "Stop"
        }, 
        {
            "location": "/LXD/containers/#restart", 
            "text": "Restart a container.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  The container name      $client - lxd - containers - restart ( local ,   container-name );   Response  { \n     class:   task , \n     created_at:   2018-04-08T16:37:36.511708398Z , \n     description:   Restarting   container , \n     err:   , \n     id:   4850b25b-3a9a-4666-acf6-9f2b4c25a236 , \n     may_cancel:   false, \n     metadata:   null, \n     resources:   { \n         containers:   [ \n             /1.0/containers/my-container \n         ] \n     } , \n     status:   Running , \n     status_code:   103 , \n     updated_at:   2018-04-08 T 16 : 37 : 36.511708398 Z  }", 
            "title": "Restart"
        }, 
        {
            "location": "/LXD/containers/#freeze", 
            "text": "Freeze a container.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  The container name      $client - lxd - containers - freeze ( local ,   container-name );   Response  { \n     class:   task , \n     created_at:   2018-04-08T16:37:36.511708398Z , \n     description:   Freezing   container , \n     err:   , \n     id:   4850b25b-3a9a-4666-acf6-9f2b4c25a236 , \n     may_cancel:   false, \n     metadata:   null, \n     resources:   { \n         containers:   [ \n             /1.0/containers/my-container \n         ] \n     } , \n     status:   Running , \n     status_code:   103 , \n     updated_at:   2018-04-08 T 16 : 37 : 36.511708398 Z  }", 
            "title": "Freeze"
        }, 
        {
            "location": "/LXD/containers/#unfreeze", 
            "text": "Unfreeze a container.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  The container name      $client - lxd - containers - unfreeze ( local ,   container-name );   Response  { \n     class:   task , \n     created_at:   2018-04-08T16:37:36.511708398Z , \n     description:   Thawing   container , \n     err:   , \n     id:   4850b25b-3a9a-4666-acf6-9f2b4c25a236 , \n     may_cancel:   false, \n     metadata:   null, \n     resources:   { \n         containers:   [ \n             /1.0/containers/my-container \n         ] \n     } , \n     status:   Running , \n     status_code:   103 , \n     updated_at:   2018-04-08 T 16 : 37 : 36.511708398 Z  }", 
            "title": "Unfreeze"
        }, 
        {
            "location": "/LXD/containers/#delete", 
            "text": "Delete a container.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Container name     mutator  function  Mutation function      $client - lxd - containers - delete ( local ,   container-name );   Response  {  }", 
            "title": "Delete"
        }, 
        {
            "location": "/LXD/containers/#exec", 
            "text": "Run a command in container.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Container name     options  object  The container options     mutator  function  Mutation function      $client - lxd - containers - exec ( local ,   container-name ,   [ \n     command   =   [ /bin/bash ], \n     environment   =   [], \n     wait-for-websocket   =   false , \n     record-output   =   false , \n     interactive   =   false , \n     width   =   80 , \n     height   =   25  ]);   Response  { \n     class :   task , \n     created_at :   2018-04-16T01:58:34.642661556Z , \n     description :   Executing command , \n     err :   , \n     id :   bff27d5c-f54c-4fb4-8956-60bcea56d074 , \n     may_cancel :   false , \n     metadata :   null , \n     resources :   { \n         containers :   [ \n             /1.0/containers/my-container \n         ] \n     }, \n     status :   Running , \n     status_code :   103 , \n     updated_at :   2018-04-16T01:58:34.642661556Z  }", 
            "title": "Exec"
        }, 
        {
            "location": "/LXD/files/", 
            "text": "Helper methods for files.\n\n\nList\n\n\nList files and directories in a container.\n\n\nNote:\n Does not work for listing \nfile contents\n unless your using LXD \n 3.0.0, \nso should be used only to list directories, see pull method below on how to \nfetch them.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\nContainer directory path\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\ncontainers-\nfiles-\nlist(\nlocal\n, \ncontainer-name\n, \n/\n);\n\n\n\n\n\n\nResponse\n\n\n[\n\n    \nproc\n,\n\n    \nusr\n,\n\n    \nrun\n,\n\n    \netc\n,\n\n    \nhome\n,\n\n    \nsbin\n,\n\n    \nsnap\n,\n\n    \nopt\n,\n\n    \nlib64\n,\n\n    \nboot\n,\n\n    \nroot\n,\n\n    \nmedia\n,\n\n    \nlib\n,\n\n    \nsys\n,\n\n    \nbin\n,\n\n    \nmnt\n,\n\n    \nvar\n,\n\n    \ntmp\n,\n\n    \nsrv\n,\n\n    \ndev\n\n\n]\n\n\n\n\n\n\nPush\n\n\nUpload files or folders into the container.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\nsource\n\n\nstring\n\n\nLocal file/folder path\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\nContainer file path\n\n\n\n\n\n\n\n\n\n\n\n    Note: If both the \nsource\n and the \npath\n parameters are folders, the method will\n    recursively upload, otherwise it will set mode \n755\n if folder or \n644\n if file.\n    All files are uploaded as uid/gid root user.\n\n\n\n// single file\n\n\n$client-\nlxd-\ncontainers-\nfiles-\npush(\nlocal\n, \nmy-container\n, \n/local/path/to/file.ext\n, \n/path/to/file.ext\n);\n\n\n\n// entire directory\n\n\n$client-\nlxd-\ncontainers-\nfiles-\npush(\nlocal\n, \nmy-container\n, \n/local/path/to/folder\n, \n/path/to/folder\n);\n\n\n\n\n\n\nResponse\n\n\n\n\n\n\n\n\nPull\n\n\nDownload a file from the container.\n\n\nNote:\n We use \nlxc file pull\n as there is a bug which prevents accessing the file with \nfiles endpoint though \nlxc query\n. Its fixed in LXD \n 3.0.0, so will be converted \nto use that in future.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\nContainer file path\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\ncontainers-\nfiles-\npull(\nlocal\n, \nmy-container\n, \n/path/to/file\n);\n\n\n\n\n\n\n\n    Because with \nfile pull\n you cant output to stdout, we need to pull the file then \ncat\n it,\n    so a folder structure is created based upon the path.\n\n\n\nExample above would create: \n./.files/local/my-container/path/to/file\n\n\nResponse\n\n\nThe file contents", 
            "title": "Files"
        }, 
        {
            "location": "/LXD/files/#list", 
            "text": "List files and directories in a container.  Note:  Does not work for listing  file contents  unless your using LXD   3.0.0, \nso should be used only to list directories, see pull method below on how to \nfetch them.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  Container name     path  string  Container directory path     mutator  function  Mutation function      $client- lxd- containers- files- list( local ,  container-name ,  / );   Response  [ \n     proc , \n     usr , \n     run , \n     etc , \n     home , \n     sbin , \n     snap , \n     opt , \n     lib64 , \n     boot , \n     root , \n     media , \n     lib , \n     sys , \n     bin , \n     mnt , \n     var , \n     tmp , \n     srv , \n     dev  ]", 
            "title": "List"
        }, 
        {
            "location": "/LXD/files/#push", 
            "text": "Upload files or folders into the container.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  Container name     source  string  Local file/folder path     path  string  Container file path      \n    Note: If both the  source  and the  path  parameters are folders, the method will\n    recursively upload, otherwise it will set mode  755  if folder or  644  if file.\n    All files are uploaded as uid/gid root user.  // single file  $client- lxd- containers- files- push( local ,  my-container ,  /local/path/to/file.ext ,  /path/to/file.ext );  // entire directory  $client- lxd- containers- files- push( local ,  my-container ,  /local/path/to/folder ,  /path/to/folder );   Response", 
            "title": "Push"
        }, 
        {
            "location": "/LXD/files/#pull", 
            "text": "Download a file from the container.  Note:  We use  lxc file pull  as there is a bug which prevents accessing the file with \nfiles endpoint though  lxc query . Its fixed in LXD   3.0.0, so will be converted \nto use that in future.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  Container name     path  string  Container file path      $client- lxd- containers- files- pull( local ,  my-container ,  /path/to/file );   \n    Because with  file pull  you cant output to stdout, we need to pull the file then  cat  it,\n    so a folder structure is created based upon the path.  Example above would create:  ./.files/local/my-container/path/to/file  Response  The file contents", 
            "title": "Pull"
        }, 
        {
            "location": "/LXD/images/", 
            "text": "Helper methods for image.\n\n\nList\n\n\nList images on remote.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nfilter\n\n\nstring\n\n\nImage property based filtering\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\nimages-\nlist(\nimages\n);\n\n\n\n// filtering by architecture\n\n\n$client-\nlxd-\nimages-\nlist(\nimages\n, \narchitecture=\n.implode(\n|\n, [\nx86_64\n, \ni686\n, \namd64\n]).\n);\n\n\n\n\n\n\nResponse\n\n\n[\n\n    \n{\n\n        \nauto_update\n:\n \nfalse\n,\n\n        \nproperties\n:\n \n{\n\n            \narchitecture\n:\n \namd64\n,\n\n            \ndescription\n:\n \nAlpine 3.4 amd64 (20180419_17:50)\n,\n\n            \nos\n:\n \nAlpine\n,\n\n            \nrelease\n:\n \n3.4\n,\n\n            \nserial\n:\n \n20180419_17:50\n\n        \n},\n\n        \npublic\n:\n \ntrue\n,\n\n        \naliases\n:\n \n[\n\n            \n{\n\n                \nname\n:\n \nalpine/3.4/default\n,\n\n                \ndescription\n:\n \n\n            \n},\n\n            \n{\n\n                \nname\n:\n \nalpine/3.4/default/amd64\n,\n\n                \ndescription\n:\n \n\n            \n},\n\n            \n{\n\n                \nname\n:\n \nalpine/3.4\n,\n\n                \ndescription\n:\n \n\n            \n},\n\n            \n{\n\n                \nname\n:\n \nalpine/3.4/amd64\n,\n\n                \ndescription\n:\n \n\n            \n}\n\n        \n],\n\n        \narchitecture\n:\n \nx86_64\n,\n\n        \ncached\n:\n \nfalse\n,\n\n        \nfilename\n:\n \nlxd.tar.xz\n,\n\n        \nfingerprint\n:\n \nca571b2780652ccd1a5c7fa62da452db0d5e94557647e760c57d10ccd4369721\n,\n\n        \nsize\n:\n \n2134616\n,\n\n        \ncreated_at\n:\n \n2018-04-19T00:00:00Z\n,\n\n        \nexpires_at\n:\n \n1970-01-01T00:00:00Z\n,\n\n        \nlast_used_at\n:\n \n0001-01-01T00:00:00Z\n,\n\n        \nuploaded_at\n:\n \n2018-04-19T00:00:00Z\n\n    \n},\n\n\n    \n...\n \nsnip\n\n\n]\n\n\n\n\n\n\nInfo\n\n\nGet image information.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nfingerprint\n\n\nstring\n\n\nImage fingerprint\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\nimages-\ninfo(\nlocal\n, \nbe7cec7c948958adfbb9bc7dbd292762d2388cc883466815fc2b6bc06bf06f5a\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \naliases\n:\n \n[],\n\n    \narchitecture\n:\n \nx86_64\n,\n\n    \nauto_update\n:\n \ntrue\n,\n\n    \ncached\n:\n \ntrue\n,\n\n    \ncreated_at\n:\n \n2018-04-05T00:00:00Z\n,\n\n    \nexpires_at\n:\n \n2021-04-21T00:00:00Z\n,\n\n    \nfilename\n:\n \nubuntu-16.04-server-cloudimg-amd64-lxd.tar.xz\n,\n\n    \nfingerprint\n:\n \nbe7cec7c948958adfbb9bc7dbd292762d2388cc883466815fc2b6bc06bf06f5a\n,\n\n    \nlast_used_at\n:\n \n2018-04-08T22:49:34Z\n,\n\n    \nproperties\n:\n \n{\n\n        \narchitecture\n:\n \namd64\n,\n\n        \ndescription\n:\n \nubuntu 16.04 LTS amd64 (release) (20180405)\n,\n\n        \nlabel\n:\n \nrelease\n,\n\n        \nos\n:\n \nubuntu\n,\n\n        \nrelease\n:\n \nxenial\n,\n\n        \nserial\n:\n \n20180405\n,\n\n        \nversion\n:\n \n16.04\n\n    \n},\n\n    \npublic\n:\n \nfalse\n,\n\n    \nsize\n:\n \n163857160\n,\n\n    \nupdate_source\n:\n \n{\n\n        \nalias\n:\n \n16.04\n,\n\n        \ncertificate\n:\n \n,\n\n        \nprotocol\n:\n \nsimplestreams\n,\n\n        \nserver\n:\n \nhttps://cloud-images.ubuntu.com/releases\n\n    \n},\n\n    \nuploaded_at\n:\n \n2018-04-08T15:41:08Z\n\n\n}\n\n\n\n\n\n\nReplace\n\n\nReplace image properties, update information and visibility.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nfingerprint\n\n\nstring\n\n\nImage fingerprint\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nImages options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\nimages-\nreplace(\nlocal\n, \nbe7cec7c948958adfbb9bc7dbd292762d2388cc883466815fc2b6bc06bf06f5a\n, [\n\n\n    \nauto_update\n =\n true,\n\n\n    \nproperties\n =\n [\n\n\n        \narchitecture\n =\n \nx86_64\n,\n\n\n        \ndescription\n =\n \nUbuntu 16.04 LTS server (20160201)\n,\n\n\n        \nos\n =\n \nubuntu\n,\n\n\n        \nrelease\n =\n \ntrusty\n\n\n    ],\n\n\n    \npublic\n =\n true\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nUpdate\n\n\nUpdate image properties, update information and visibility.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nfingerprint\n\n\nstring\n\n\nImage fingerprint\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nImages options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\nimages-\nupdate(\nlocal\n, \nbe7cec7c948958adfbb9bc7dbd292762d2388cc883466815fc2b6bc06bf06f5a\n, [\n\n\n    \nauto_update\n =\n true,\n\n\n    \nproperties\n =\n [\n\n\n        \narchitecture\n =\n \nx86_64\n,\n\n\n        \ndescription\n =\n \nUbuntu 16.04 LTS server (20160201)\n,\n\n\n        \nos\n =\n \nubuntu\n,\n\n\n        \nrelease\n =\n \ntrusty\n\n\n    ],\n\n\n    \npublic\n =\n true\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nDelete\n\n\nDelete an image.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nfingerprint\n\n\nstring\n\n\nImage fingerprint\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\nimages-\nupdate(\nlocal\n, \nbe7cec7c948958adfbb9bc7dbd292762d2388cc883466815fc2b6bc06bf06f5a\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}", 
            "title": "Images"
        }, 
        {
            "location": "/LXD/images/#list", 
            "text": "List images on remote.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    filter  string  Image property based filtering      $client- lxd- images- list( images );  // filtering by architecture  $client- lxd- images- list( images ,  architecture= .implode( | , [ x86_64 ,  i686 ,  amd64 ]). );   Response  [ \n     { \n         auto_update :   false , \n         properties :   { \n             architecture :   amd64 , \n             description :   Alpine 3.4 amd64 (20180419_17:50) , \n             os :   Alpine , \n             release :   3.4 , \n             serial :   20180419_17:50 \n         }, \n         public :   true , \n         aliases :   [ \n             { \n                 name :   alpine/3.4/default , \n                 description :   \n             }, \n             { \n                 name :   alpine/3.4/default/amd64 , \n                 description :   \n             }, \n             { \n                 name :   alpine/3.4 , \n                 description :   \n             }, \n             { \n                 name :   alpine/3.4/amd64 , \n                 description :   \n             } \n         ], \n         architecture :   x86_64 , \n         cached :   false , \n         filename :   lxd.tar.xz , \n         fingerprint :   ca571b2780652ccd1a5c7fa62da452db0d5e94557647e760c57d10ccd4369721 , \n         size :   2134616 , \n         created_at :   2018-04-19T00:00:00Z , \n         expires_at :   1970-01-01T00:00:00Z , \n         last_used_at :   0001-01-01T00:00:00Z , \n         uploaded_at :   2018-04-19T00:00:00Z \n     }, \n\n     ...   snip  ]", 
            "title": "List"
        }, 
        {
            "location": "/LXD/images/#info", 
            "text": "Get image information.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    fingerprint  string  Image fingerprint     mutator  function  Mutation function      $client- lxd- images- info( local ,  be7cec7c948958adfbb9bc7dbd292762d2388cc883466815fc2b6bc06bf06f5a );   Response  { \n     aliases :   [], \n     architecture :   x86_64 , \n     auto_update :   true , \n     cached :   true , \n     created_at :   2018-04-05T00:00:00Z , \n     expires_at :   2021-04-21T00:00:00Z , \n     filename :   ubuntu-16.04-server-cloudimg-amd64-lxd.tar.xz , \n     fingerprint :   be7cec7c948958adfbb9bc7dbd292762d2388cc883466815fc2b6bc06bf06f5a , \n     last_used_at :   2018-04-08T22:49:34Z , \n     properties :   { \n         architecture :   amd64 , \n         description :   ubuntu 16.04 LTS amd64 (release) (20180405) , \n         label :   release , \n         os :   ubuntu , \n         release :   xenial , \n         serial :   20180405 , \n         version :   16.04 \n     }, \n     public :   false , \n     size :   163857160 , \n     update_source :   { \n         alias :   16.04 , \n         certificate :   , \n         protocol :   simplestreams , \n         server :   https://cloud-images.ubuntu.com/releases \n     }, \n     uploaded_at :   2018-04-08T15:41:08Z  }", 
            "title": "Info"
        }, 
        {
            "location": "/LXD/images/#replace", 
            "text": "Replace image properties, update information and visibility.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    fingerprint  string  Image fingerprint     options  object  Images options     mutator  function  Mutation function      $client- lxd- images- replace( local ,  be7cec7c948958adfbb9bc7dbd292762d2388cc883466815fc2b6bc06bf06f5a , [       auto_update  =  true,       properties  =  [           architecture  =   x86_64 ,           description  =   Ubuntu 16.04 LTS server (20160201) ,           os  =   ubuntu ,           release  =   trusty      ],       public  =  true  ]);   Response  {  }", 
            "title": "Replace"
        }, 
        {
            "location": "/LXD/images/#update", 
            "text": "Update image properties, update information and visibility.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    fingerprint  string  Image fingerprint     options  object  Images options     mutator  function  Mutation function      $client- lxd- images- update( local ,  be7cec7c948958adfbb9bc7dbd292762d2388cc883466815fc2b6bc06bf06f5a , [       auto_update  =  true,       properties  =  [           architecture  =   x86_64 ,           description  =   Ubuntu 16.04 LTS server (20160201) ,           os  =   ubuntu ,           release  =   trusty      ],       public  =  true  ]);   Response  {  }", 
            "title": "Update"
        }, 
        {
            "location": "/LXD/images/#delete", 
            "text": "Delete an image.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    fingerprint  string  Image fingerprint     mutator  function  Mutation function      $client- lxd- images- update( local ,  be7cec7c948958adfbb9bc7dbd292762d2388cc883466815fc2b6bc06bf06f5a );   Response  {  }", 
            "title": "Delete"
        }, 
        {
            "location": "/LXD/", 
            "text": "LXD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nControl LXD through RPC which uses the local instance of LXD and \nlxc query\n to manage local or remote LXD servers.\n\n\nInstall\n\n\nRequire this package with composer using the following command:\n\n\n$ composer require plinker/lxd\n\n\n\n\n\nSetup\n\n\nThe webserver user must be able to execute \nlxc\n commands, so add the user to sudoers file:\n\n\n# User privilege specification\nroot     ALL=(ALL:ALL) ALL\nwww-data ALL=(ALL:ALL) NOPASSWD: /usr/bin/lxc\n\n\n\n\n\nClient\n\n\nCreating a client instance is done as follows:\n\n\n?php\n\n\nrequire\n \nvendor/autoload.php\n;\n\n\n\n/**\n\n\n * Initialize plinker client.\n\n\n *\n\n\n * @param string $server - URL to server listener.\n\n\n * @param string $config - server secret, and/or a additional component data\n\n\n */\n\n\n$client\n \n=\n \nnew\n \n\\Plinker\\Core\\Client\n(\n\n    \nhttp://example.com/server.php\n,\n\n    \n[\n\n        \nsecret\n \n=\n \na secret password\n\n    \n]\n\n\n);\n\n\n\n// or using global function\n\n\n$client\n \n=\n \nplinker_client\n(\nhttp://example.com/server.php\n,\n \na secret password\n);\n\n\n\n\n\n\nBasic Usage\n\n\nEssentially you can do any LXD operation with the single \n$client-\nlxd-\nquery()\n method, or you can use the \nhelper methods\n  which cover all the LXD endpoints.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote and endpoint\n\n\nlocal\n\n\n\n\n\n\nrest method\n\n\nstring\n\n\ne.g GET, POST, DELETE, PUT, PATCH\n\n\nGET\n\n\n\n\n\n\npayload\n\n\nobject | json string\n\n\nRest json payload\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nPre-resolve mutation function\n\n\n\n\n\n\n\n\n\n\n$\nclient-\nlxd-\nquery\n(\nremote:/1.0\n,\n \nGET\n,\n \n[]\n);\n\n\n\n\n\n\nFull Documentation\n\n\nTo view the complete docs for this component including all methods see: \nhttps://plinker-rpc.github.io/lxd/\n\n\nMethods\n\n\nOnce setup, you call the class though its namespace to its method, see docs for further details.\n\n\nList Containers\n\n\nList containers on remote.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\ncontainers-\nlist(\nlocal\n, function ($result) {\n\n\n    return str_replace(\n/1.0/containers/\n, \n, $result);    \n\n\n});\n\n\n\n\n\n\nResponse\n\n\nArray\n(\n    [0] =\n my-container\n)\n\n\n\n\n\nTesting\n\n\nThere are no tests setup for this component.\n\n\nContributing\n\n\nPlease see \nCONTRIBUTING\n for details.\n\n\nSecurity\n\n\nIf you discover any security related issues, please contact me via \nhttps://cherone.co.uk\n instead of using the issue tracker.\n\n\nCredits\n\n\n\n\nLawrence Cherone\n\n\nAll Contributors\n\n\n\n\nDevelopment Encouragement\n\n\nIf you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation \nhttps://www.paypal.me/lcherone\n, thanks.\n\n\nSponsors\n\n\nGet your company or name listed throughout the documentation and on each github repository, contact me at \nhttps://cherone.co.uk\n for further details.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.\n\n\nSee the \norganisations page\n for additional components.", 
            "title": "Home"
        }, 
        {
            "location": "/LXD/#lxd", 
            "text": "Control LXD through RPC which uses the local instance of LXD and  lxc query  to manage local or remote LXD servers.", 
            "title": "LXD"
        }, 
        {
            "location": "/LXD/#install", 
            "text": "Require this package with composer using the following command:  $ composer require plinker/lxd", 
            "title": "Install"
        }, 
        {
            "location": "/LXD/#setup", 
            "text": "The webserver user must be able to execute  lxc  commands, so add the user to sudoers file:  # User privilege specification\nroot     ALL=(ALL:ALL) ALL\nwww-data ALL=(ALL:ALL) NOPASSWD: /usr/bin/lxc", 
            "title": "Setup"
        }, 
        {
            "location": "/LXD/#client", 
            "text": "Creating a client instance is done as follows:  ?php  require   vendor/autoload.php ;  /**   * Initialize plinker client.   *   * @param string $server - URL to server listener.   * @param string $config - server secret, and/or a additional component data   */  $client   =   new   \\Plinker\\Core\\Client ( \n     http://example.com/server.php , \n     [ \n         secret   =   a secret password \n     ]  );  // or using global function  $client   =   plinker_client ( http://example.com/server.php ,   a secret password );", 
            "title": "Client"
        }, 
        {
            "location": "/LXD/#basic-usage", 
            "text": "Essentially you can do any LXD operation with the single  $client- lxd- query()  method, or you can use the  helper methods   which cover all the LXD endpoints.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote and endpoint  local    rest method  string  e.g GET, POST, DELETE, PUT, PATCH  GET    payload  object | json string  Rest json payload     mutator  function  Pre-resolve mutation function      $ client- lxd- query ( remote:/1.0 ,   GET ,   [] );", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/LXD/#full-documentation", 
            "text": "To view the complete docs for this component including all methods see:  https://plinker-rpc.github.io/lxd/", 
            "title": "Full Documentation"
        }, 
        {
            "location": "/LXD/#methods", 
            "text": "Once setup, you call the class though its namespace to its method, see docs for further details.", 
            "title": "Methods"
        }, 
        {
            "location": "/LXD/#list-containers", 
            "text": "List containers on remote.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    mutator  function  Mutation function      $client- lxd- containers- list( local , function ($result) {      return str_replace( /1.0/containers/ ,  , $result);      });   Response  Array\n(\n    [0] =  my-container\n)", 
            "title": "List Containers"
        }, 
        {
            "location": "/LXD/#testing", 
            "text": "There are no tests setup for this component.", 
            "title": "Testing"
        }, 
        {
            "location": "/LXD/#contributing", 
            "text": "Please see  CONTRIBUTING  for details.", 
            "title": "Contributing"
        }, 
        {
            "location": "/LXD/#security", 
            "text": "If you discover any security related issues, please contact me via  https://cherone.co.uk  instead of using the issue tracker.", 
            "title": "Security"
        }, 
        {
            "location": "/LXD/#credits", 
            "text": "Lawrence Cherone  All Contributors", 
            "title": "Credits"
        }, 
        {
            "location": "/LXD/#development-encouragement", 
            "text": "If you use this project and make money from it or want to show your appreciation,\nplease feel free to make a donation  https://www.paypal.me/lcherone , thanks.", 
            "title": "Development Encouragement"
        }, 
        {
            "location": "/LXD/#sponsors", 
            "text": "Get your company or name listed throughout the documentation and on each github repository, contact me at  https://cherone.co.uk  for further details.", 
            "title": "Sponsors"
        }, 
        {
            "location": "/LXD/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.  See the  organisations page  for additional components.", 
            "title": "License"
        }, 
        {
            "location": "/LXD/logs/", 
            "text": "Helper methods for container logs.\n\n\nList\n\n\nReturns a list of the log files available for this container. \n\n\nNote:\n This works on containers that have been deleted (or were never created) \nto enable you to get logs for failed creations.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\ncontainers-\nlogs-\nlist(\nlocal\n, \nmy-container\n);\n\n\n\n\n\n\nResponse\n\n\n[\n\n    \n/1.0/containers/my-container/logs/forkstart.log\n,\n\n    \n/1.0/containers/my-container/logs/lxc.conf\n,\n\n    \n/1.0/containers/my-container/logs/lxc.log\n\n\n]\n\n\n\n\n\n\nGet\n\n\nReturns the contents of a particular log file. \n\n\nNote:\n This method ONLY works with LXD \n 3.0.0\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\nlogfile\n\n\nstring\n\n\nContainer logfile\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\ncontainers-\nlogs-\nget(\nlocal\n, \nmy-container\n, \nlxc.conf\n);\n\n\n\n\n\n\nResponse\n\n\nThe log file contents\n\n\n\n\n\nDelete\n\n\nDelete a particular log file.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\nlogfile\n\n\nstring\n\n\nContainer logfile\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\ncontainers-\nlogs-\ndelete(\nlocal\n, \nmy-container\n, \nlxc.conf\n);\n\n\n\n\n\n\nResponse", 
            "title": "Logs"
        }, 
        {
            "location": "/LXD/logs/#list", 
            "text": "Returns a list of the log files available for this container.   Note:  This works on containers that have been deleted (or were never created) \nto enable you to get logs for failed creations.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  Container name     mutator  function  Mutation function      $client- lxd- containers- logs- list( local ,  my-container );   Response  [ \n     /1.0/containers/my-container/logs/forkstart.log , \n     /1.0/containers/my-container/logs/lxc.conf , \n     /1.0/containers/my-container/logs/lxc.log  ]", 
            "title": "List"
        }, 
        {
            "location": "/LXD/logs/#get", 
            "text": "Returns the contents of a particular log file.   Note:  This method ONLY works with LXD   3.0.0  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  Container name     logfile  string  Container logfile     mutator  function  Mutation function      $client- lxd- containers- logs- get( local ,  my-container ,  lxc.conf );   Response  The log file contents", 
            "title": "Get"
        }, 
        {
            "location": "/LXD/logs/#delete", 
            "text": "Delete a particular log file.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  Container name     logfile  string  Container logfile     mutator  function  Mutation function      $client- lxd- containers- logs- delete( local ,  my-container ,  lxc.conf );   Response", 
            "title": "Delete"
        }, 
        {
            "location": "/LXD/metadata/", 
            "text": "Helper methods for container metadata.\n\n\nGet\n\n\nReturns the containers metadata.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\ncontainers-\nmetadata-\nget(\nlocal\n, \nmy-container\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \narchitecture\n:\n \nx86_64\n,\n\n    \ncreation_date\n:\n \n1522920368\n,\n\n    \nexpiry_date\n:\n \n0\n,\n\n    \nproperties\n:\n \n{\n\n        \narchitecture\n:\n \nx86_64\n,\n\n        \ndescription\n:\n \nUbuntu 16.04 LTS server (20180405)\n,\n\n        \nos\n:\n \nubuntu\n,\n\n        \nrelease\n:\n \nxenial\n\n    \n},\n\n    \ntemplates\n:\n \n{\n\n        \n/etc/hostname\n:\n \n{\n\n            \ncreate_only\n:\n \nfalse\n,\n\n            \nproperties\n:\n \nnull\n,\n\n            \ntemplate\n:\n \nhostname.tpl\n,\n\n            \nwhen\n:\n \n[\n\n                \ncreate\n,\n\n                \ncopy\n\n            \n]\n\n        \n},\n\n        \n/var/lib/cloud/seed/nocloud-net/meta-data\n:\n \n{\n\n            \ncreate_only\n:\n \nfalse\n,\n\n            \nproperties\n:\n \nnull\n,\n\n            \ntemplate\n:\n \ncloud-init-meta.tpl\n,\n\n            \nwhen\n:\n \n[\n\n                \ncreate\n,\n\n                \ncopy\n\n            \n]\n\n        \n},\n\n        \n/var/lib/cloud/seed/nocloud-net/network-config\n:\n \n{\n\n            \ncreate_only\n:\n \nfalse\n,\n\n            \nproperties\n:\n \nnull\n,\n\n            \ntemplate\n:\n \ncloud-init-network.tpl\n,\n\n            \nwhen\n:\n \n[\n\n                \ncreate\n,\n\n                \ncopy\n\n            \n]\n\n        \n},\n\n        \n/var/lib/cloud/seed/nocloud-net/user-data\n:\n \n{\n\n            \ncreate_only\n:\n \nfalse\n,\n\n            \nproperties\n:\n \n{\n\n                \ndefault\n:\n \n#cloud-config\\n{}\\n\n\n            \n},\n\n            \ntemplate\n:\n \ncloud-init-user.tpl\n,\n\n            \nwhen\n:\n \n[\n\n                \ncreate\n,\n\n                \ncopy\n\n            \n]\n\n        \n},\n\n        \n/var/lib/cloud/seed/nocloud-net/vendor-data\n:\n \n{\n\n            \ncreate_only\n:\n \nfalse\n,\n\n            \nproperties\n:\n \n{\n\n                \ndefault\n:\n \n#cloud-config\\n{}\\n\n\n            \n},\n\n            \ntemplate\n:\n \ncloud-init-vendor.tpl\n,\n\n            \nwhen\n:\n \n[\n\n                \ncreate\n,\n\n                \ncopy\n\n            \n]\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nReplace\n\n\nReplace the containers metadata.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\nmetadata\n\n\nstring\n\n\nContainer metadata\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\ncontainers-\nmetadata-\nreplace(\nlocal\n, \nmy-container\n, [\n\n\n    \narchitecture\n =\n \nx86_64\n,\n\n\n    \ncreation_date\n =\n 1522920368,\n\n\n    \nexpiry_date\n =\n 0,\n\n\n    \nproperties\n =\n [\n\n\n        \narchitecture\n =\n \nx86_64\n,\n\n\n        \ndescription\n =\n \nUbuntu 16.04 LTS server (20180405)\n,\n\n\n        \nos\n =\n \nubuntu\n,\n\n\n        \nrelease\n =\n \nxenial\n\n\n    ],\n\n\n    \ntemplates\n =\n [\n\n\n        \n/etc/hostname\n =\n [\n\n\n            \ncreate_only\n =\n false,\n\n\n            \nproperties\n =\n null,\n\n\n            \ntemplate\n =\n \nhostname.tpl\n,\n\n\n            \nwhen\n: [\n\n\n                \ncreate\n,\n\n\n                \ncopy\n\n\n            ]\n\n\n        ],\n\n\n        \n/var/lib/cloud/seed/nocloud-net/meta-data\n =\n [\n\n\n            \ncreate_only\n =\n false,\n\n\n            \nproperties\n =\n null,\n\n\n            \ntemplate\n =\n \ncloud-init-meta.tpl\n,\n\n\n            \nwhen\n =\n [\n\n\n                \ncreate\n,\n\n\n                \ncopy\n\n\n            ]\n\n\n        ],\n\n\n        \n/var/lib/cloud/seed/nocloud-net/network-config\n =\n [\n\n\n            \ncreate_only\n =\n false,\n\n\n            \nproperties\n =\n null,\n\n\n            \ntemplate\n =\n \ncloud-init-network.tpl\n,\n\n\n            \nwhen\n =\n [\n\n\n                \ncreate\n,\n\n\n                \ncopy\n\n\n            ]\n\n\n        ],\n\n\n        \n/var/lib/cloud/seed/nocloud-net/user-data\n =\n [\n\n\n            \ncreate_only\n =\n false,\n\n\n            \nproperties\n =\n [\n\n\n                \ndefault\n =\n \n#cloud-config\\n{}\\n\n\n\n            ],\n\n\n            \ntemplate\n =\n \ncloud-init-user.tpl\n,\n\n\n            \nwhen\n =\n [\n\n\n                \ncreate\n,\n\n\n                \ncopy\n\n\n            ]\n\n\n        ],\n\n\n        \n/var/lib/cloud/seed/nocloud-net/vendor-data\n =\n [\n\n\n            \ncreate_only\n =\n false,\n\n\n            \nproperties\n =\n [\n\n\n                \ndefault\n =\n \n#cloud-config\\n{}\\n\n\n\n            ],\n\n\n            \ntemplate\n =\n \ncloud-init-vendor.tpl\n,\n\n\n            \nwhen\n =\n [\n\n\n                \ncreate\n,\n\n\n                \ncopy\n\n\n            ]\n\n\n        ]\n\n\n    ]\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}", 
            "title": "Metadata"
        }, 
        {
            "location": "/LXD/metadata/#get", 
            "text": "Returns the containers metadata.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  Container name     mutator  function  Mutation function      $client- lxd- containers- metadata- get( local ,  my-container );   Response  { \n     architecture :   x86_64 , \n     creation_date :   1522920368 , \n     expiry_date :   0 , \n     properties :   { \n         architecture :   x86_64 , \n         description :   Ubuntu 16.04 LTS server (20180405) , \n         os :   ubuntu , \n         release :   xenial \n     }, \n     templates :   { \n         /etc/hostname :   { \n             create_only :   false , \n             properties :   null , \n             template :   hostname.tpl , \n             when :   [ \n                 create , \n                 copy \n             ] \n         }, \n         /var/lib/cloud/seed/nocloud-net/meta-data :   { \n             create_only :   false , \n             properties :   null , \n             template :   cloud-init-meta.tpl , \n             when :   [ \n                 create , \n                 copy \n             ] \n         }, \n         /var/lib/cloud/seed/nocloud-net/network-config :   { \n             create_only :   false , \n             properties :   null , \n             template :   cloud-init-network.tpl , \n             when :   [ \n                 create , \n                 copy \n             ] \n         }, \n         /var/lib/cloud/seed/nocloud-net/user-data :   { \n             create_only :   false , \n             properties :   { \n                 default :   #cloud-config\\n{}\\n \n             }, \n             template :   cloud-init-user.tpl , \n             when :   [ \n                 create , \n                 copy \n             ] \n         }, \n         /var/lib/cloud/seed/nocloud-net/vendor-data :   { \n             create_only :   false , \n             properties :   { \n                 default :   #cloud-config\\n{}\\n \n             }, \n             template :   cloud-init-vendor.tpl , \n             when :   [ \n                 create , \n                 copy \n             ] \n         } \n     }  }", 
            "title": "Get"
        }, 
        {
            "location": "/LXD/metadata/#replace", 
            "text": "Replace the containers metadata.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  Container name     metadata  string  Container metadata     mutator  function  Mutation function      $client- lxd- containers- metadata- replace( local ,  my-container , [       architecture  =   x86_64 ,       creation_date  =  1522920368,       expiry_date  =  0,       properties  =  [           architecture  =   x86_64 ,           description  =   Ubuntu 16.04 LTS server (20180405) ,           os  =   ubuntu ,           release  =   xenial      ],       templates  =  [           /etc/hostname  =  [               create_only  =  false,               properties  =  null,               template  =   hostname.tpl ,               when : [                   create ,                   copy              ]          ],           /var/lib/cloud/seed/nocloud-net/meta-data  =  [               create_only  =  false,               properties  =  null,               template  =   cloud-init-meta.tpl ,               when  =  [                   create ,                   copy              ]          ],           /var/lib/cloud/seed/nocloud-net/network-config  =  [               create_only  =  false,               properties  =  null,               template  =   cloud-init-network.tpl ,               when  =  [                   create ,                   copy              ]          ],           /var/lib/cloud/seed/nocloud-net/user-data  =  [               create_only  =  false,               properties  =  [                   default  =   #cloud-config\\n{}\\n              ],               template  =   cloud-init-user.tpl ,               when  =  [                   create ,                   copy              ]          ],           /var/lib/cloud/seed/nocloud-net/vendor-data  =  [               create_only  =  false,               properties  =  [                   default  =   #cloud-config\\n{}\\n              ],               template  =   cloud-init-vendor.tpl ,               when  =  [                   create ,                   copy              ]          ]      ]  ]);   Response  {  }", 
            "title": "Replace"
        }, 
        {
            "location": "/LXD/networks/", 
            "text": "Helper methods for networks.\n\n\nList\n\n\nList networks.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\nnetworks-\nlist(\nlocal\n);\n\n\n\n\n\n\nResponse\n\n\n[\n\n    \n/1.0/networks/lxdbr0\n,\n\n    \n/1.0/networks/lo\n\n\n]\n\n\n\n\n\n\nInfo\n\n\nGet network information.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nNetwork name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\nnetworks-\ninfo(\nlocal\n, \nlxdbr0\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \nconfig\n:\n \n{\n\n        \nipv4.address\n:\n \n10.158.250.1/24\n,\n\n        \nipv4.nat\n:\n \ntrue\n,\n\n        \nipv6.address\n:\n \nfd42:a224:5bde:20c0::1/64\n,\n\n        \nipv6.nat\n:\n \ntrue\n\n    \n},\n\n    \ndescription\n:\n \n,\n\n    \nmanaged\n:\n \ntrue\n,\n\n    \nname\n:\n \nlxdbr0\n,\n\n    \ntype\n:\n \nbridge\n,\n\n    \nused_by\n:\n \n[\n\n        \n/1.0/containers/my-container\n\n    \n]\n\n\n}\n\n\n\n\n\n\nCreate\n\n\nCreate network.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nNetwork options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\nnetworks-\ncreate(\nlocal\n, [\n\n\n    \nname\n =\n \nmy-network\n,\n\n\n    \ndescription\n =\n \nMy network\n,\n\n\n    \nconfig\n =\n [\n\n\n        \nipv4.address\n =\n \nnone\n,\n\n\n        \nipv6.address\n =\n \n2001:470:b368:4242::1/64\n,\n\n\n        \nipv6.nat\n =\n \ntrue\n\n\n    ]\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nReplace\n\n\nReplace the network information.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nNetwork name\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nNetwork options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\nnetworks-\nreplace(\nlocal\n, [\n\n\n    \nconfig\n =\n [\n\n\n        \nipv4.address\n =\n \nnone\n,\n\n\n        \nipv6.address\n =\n \n2001:470:b368:4242::1/64\n,\n\n\n        \nipv6.nat\n =\n \ntrue\n\n\n    ]\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nUpdate\n\n\nUpdate the network information.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nNetwork name\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nNetwork options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\nnetworks-\nupdate(\nlocal\n, [\n\n\n    \nname\n =\n \nmy-network\n,\n\n\n    \ndescription\n =\n \nMy network\n,\n\n\n    \nconfig\n =\n [\n\n\n         \ndns.mode\n =\n \ndynamic\n\n\n    ]\n\n\n]);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nRename\n\n\nRename a network.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nNetwork name\n\n\n\n\n\n\n\n\nnewName\n\n\nstring\n\n\nNew network name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\nnetworks-\nrename(\nlocal\n, \nold-name\n, \nnew-name\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nDelete\n\n\nDelete a network.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nNetwork name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\n$client-\nlxd-\nnetworks-\ndelete(\nlocal\n, \nnetwork-name\n);\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}", 
            "title": "Networks"
        }, 
        {
            "location": "/LXD/networks/#list", 
            "text": "List networks.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    mutator  function  Mutation function      $client- lxd- networks- list( local );   Response  [ \n     /1.0/networks/lxdbr0 , \n     /1.0/networks/lo  ]", 
            "title": "List"
        }, 
        {
            "location": "/LXD/networks/#info", 
            "text": "Get network information.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Network name     mutator  function  Mutation function      $client- lxd- networks- info( local ,  lxdbr0 );   Response  { \n     config :   { \n         ipv4.address :   10.158.250.1/24 , \n         ipv4.nat :   true , \n         ipv6.address :   fd42:a224:5bde:20c0::1/64 , \n         ipv6.nat :   true \n     }, \n     description :   , \n     managed :   true , \n     name :   lxdbr0 , \n     type :   bridge , \n     used_by :   [ \n         /1.0/containers/my-container \n     ]  }", 
            "title": "Info"
        }, 
        {
            "location": "/LXD/networks/#create", 
            "text": "Create network.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    options  object  Network options     mutator  function  Mutation function      $client- lxd- networks- create( local , [       name  =   my-network ,       description  =   My network ,       config  =  [           ipv4.address  =   none ,           ipv6.address  =   2001:470:b368:4242::1/64 ,           ipv6.nat  =   true      ]  ]);   Response  {  }", 
            "title": "Create"
        }, 
        {
            "location": "/LXD/networks/#replace", 
            "text": "Replace the network information.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Network name     options  object  Network options     mutator  function  Mutation function      $client- lxd- networks- replace( local , [       config  =  [           ipv4.address  =   none ,           ipv6.address  =   2001:470:b368:4242::1/64 ,           ipv6.nat  =   true      ]  ]);   Response  {  }", 
            "title": "Replace"
        }, 
        {
            "location": "/LXD/networks/#update", 
            "text": "Update the network information.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Network name     options  object  Network options     mutator  function  Mutation function      $client- lxd- networks- update( local , [       name  =   my-network ,       description  =   My network ,       config  =  [            dns.mode  =   dynamic      ]  ]);   Response  {  }", 
            "title": "Update"
        }, 
        {
            "location": "/LXD/networks/#rename", 
            "text": "Rename a network.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Network name     newName  string  New network name     mutator  function  Mutation function      $client- lxd- networks- rename( local ,  old-name ,  new-name );   Response  {  }", 
            "title": "Rename"
        }, 
        {
            "location": "/LXD/networks/#delete", 
            "text": "Delete a network.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Network name     mutator  function  Mutation function      $client- lxd- networks- delete( local ,  network-name );   Response  {  }", 
            "title": "Delete"
        }, 
        {
            "location": "/LXD/operations/", 
            "text": "Helper methods for operations.\n\n\nList\n\n\nList operations on remote.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\nlxc.operations.list(\nlocal\n).then(response =\n {\n\n\n  console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n[\n\n    \n/1.0/operations/c0fc0d0d-a997-462b-842b-f8bd0df82507\n,\n\n    \n/1.0/operations/092a8755-fd90-4ce4-bf91-9f87d03fd5bc\n\n\n]\n\n\n\n\n\n\nInfo\n\n\nGet operation information.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nuuid\n\n\nstring\n\n\nOperation uuid\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\nlxc.operations.info(\nlocal\n, \n092a8755-fd90-4ce4-bf91-9f87d03fd5bc\n).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \nid\n:\n \nb8d84888-1dc2-44fd-b386-7f679e171ba5\n,\n\n    \nclass\n:\n \ntoken\n,\n\n    \ncreated_at\n:\n \n2016-02-17T16:59:27.237628195-05:00\n,\n\n    \nupdated_at\n:\n \n2016-02-17T16:59:27.237628195-05:00\n,\n\n    \nstatus\n:\n \nRunning\n,\n\n    \nstatus_code\n:\n \n103\n,\n\n    \nresources\n:\n \n{\n\n        \nimages\n:\n \n[\n\n            \n/1.0/images/54c8caac1f61901ed86c68f24af5f5d3672bdc62c71d04f06df3a59e95684473\n\n        \n]\n\n    \n},\n\n    \nmetadata\n:\n \n{\n                                                                          \n        \nsecret\n:\n \nc9209bee6df99315be1660dd215acde4aec89b8e5336039712fc11008d918b0d\n\n    \n},\n\n    \nmay_cancel\n:\n \ntrue\n,\n\n    \nerr\n:\n \n\n\n}\n\n\n\n\n\n\nDelete\n\n\nDelete an operation.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nuuid\n\n\nstring\n\n\nOperation uuid\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\nlxc.operations.delete(\nlocal\n, \n092a8755-fd90-4ce4-bf91-9f87d03fd5bc\n).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nWebsocket\n\n\nWebsocket upgrading to \n/1.0/operations/\nuuid\n/websocket\n can be done by calling \n\nlxc.containers.exec\n \nwith \nwait-for-websocket\n: true\n then using the operation id to directly initialise \nthe websocket connection to the LXD server using the provided secret. \n\n\nYou could still use \nlxc.query()\n if you really require it but you would need to \nproxy it through with something like express, for that reason, it has not been added \nas I do not want to add additional dependencies for a single endpoint.", 
            "title": "Operations"
        }, 
        {
            "location": "/LXD/operations/#list", 
            "text": "List operations on remote.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    mutator  function  Mutation function      lxc.operations.list( local ).then(response =  {    console.log(response)  })   Response  [ \n     /1.0/operations/c0fc0d0d-a997-462b-842b-f8bd0df82507 , \n     /1.0/operations/092a8755-fd90-4ce4-bf91-9f87d03fd5bc  ]", 
            "title": "List"
        }, 
        {
            "location": "/LXD/operations/#info", 
            "text": "Get operation information.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    uuid  string  Operation uuid     mutator  function  Mutation function      lxc.operations.info( local ,  092a8755-fd90-4ce4-bf91-9f87d03fd5bc ).then(response =  {      console.log(response)  })   Response  { \n     id :   b8d84888-1dc2-44fd-b386-7f679e171ba5 , \n     class :   token , \n     created_at :   2016-02-17T16:59:27.237628195-05:00 , \n     updated_at :   2016-02-17T16:59:27.237628195-05:00 , \n     status :   Running , \n     status_code :   103 , \n     resources :   { \n         images :   [ \n             /1.0/images/54c8caac1f61901ed86c68f24af5f5d3672bdc62c71d04f06df3a59e95684473 \n         ] \n     }, \n     metadata :   {                                                                           \n         secret :   c9209bee6df99315be1660dd215acde4aec89b8e5336039712fc11008d918b0d \n     }, \n     may_cancel :   true , \n     err :    }", 
            "title": "Info"
        }, 
        {
            "location": "/LXD/operations/#delete", 
            "text": "Delete an operation.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    uuid  string  Operation uuid     mutator  function  Mutation function      lxc.operations.delete( local ,  092a8755-fd90-4ce4-bf91-9f87d03fd5bc ).then(response =  {      console.log(response)  })   Response  {  }", 
            "title": "Delete"
        }, 
        {
            "location": "/LXD/operations/#websocket", 
            "text": "Websocket upgrading to  /1.0/operations/ uuid /websocket  can be done by calling  lxc.containers.exec  \nwith  wait-for-websocket : true  then using the operation id to directly initialise \nthe websocket connection to the LXD server using the provided secret.   You could still use  lxc.query()  if you really require it but you would need to \nproxy it through with something like express, for that reason, it has not been added \nas I do not want to add additional dependencies for a single endpoint.", 
            "title": "Websocket"
        }, 
        {
            "location": "/LXD/profiles/", 
            "text": "Helper methods for profiles.\n\n\nList\n\n\nList profiles.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\nlxc.profiles.list(\nlocal\n).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n[\n\n    \n/1.0/profiles/default\n\n\n]\n\n\n\n\n\n\nInfo\n\n\nGet profile information.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nProfile name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\nlxc.profiles.info(\nlocal\n, \ndefault\n).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \nconfig\n:\n \n{},\n\n    \ndescription\n:\n \nDefault LXD profile\n,\n\n    \ndevices\n:\n \n{\n\n        \neth0\n:\n \n{\n\n            \nname\n:\n \neth0\n,\n\n            \nnictype\n:\n \nbridged\n,\n\n            \nparent\n:\n \nlxdbr0\n,\n\n            \ntype\n:\n \nnic\n\n        \n},\n\n        \nroot\n:\n \n{\n\n            \npath\n:\n \n/\n,\n\n            \npool\n:\n \ndefault\n,\n\n            \ntype\n:\n \ndisk\n\n        \n}\n\n    \n},\n\n    \nname\n:\n \ndefault\n,\n\n    \nused_by\n:\n \n[\n\n        \n/1.0/containers/my-container\n\n    \n]\n\n\n}\n\n\n\n\n\n\nCreate\n\n\nCreate profile.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nProfile options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\nlxc.profiles.create(\nlocal\n, {\n\n\n    \nname\n: \nmy-new-profile\n,\n\n\n    \ndescription\n: \nSome informative description string\n,\n\n\n    \nconfig\n: {\n\n\n        \nlimits.memory\n: \n2GB\n\n\n    },\n\n\n    \ndevices\n: {\n\n\n        \nkvm\n: {\n\n\n            \ntype\n: \nunix-char\n,\n\n\n            \npath\n: \n/dev/kvm\n\n\n        }\n\n\n    }\n\n\n}).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nReplace\n\n\nReplace profile properties, update description, devices and limits.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nProfile name\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nProfile options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\nlxc.profiles.replace(\nlocal\n, \nmy-new-profile\n, {\n\n\n    \nconfig\n: {\n\n\n        \nlimits.memory\n: \n4GB\n\n\n    },\n\n\n    \ndescription\n: \nSome description string\n,\n\n\n    \ndevices\n: {}\n\n\n}).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nUpdate\n\n\nUpdate profile properties, update description, devices and limits.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nProfile name\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nProfile options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\nlxc.profiles.replace(\nlocal\n, \nmy-new-profile\n, {\n\n\n    \nconfig\n: {\n\n\n        \nlimits.memory\n: \n4GB\n\n\n    },\n\n\n    \ndescription\n: \nSome description string\n,\n\n\n    \ndevices\n: {}\n\n\n}).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nRename\n\n\nRename a profile.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nProfile name\n\n\n\n\n\n\n\n\nnewName\n\n\nstring\n\n\nNew profile name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\nlxc.profiles.rename(\nlocal\n, \nold-name\n, \nnew-name\n).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nDelete\n\n\nDelete a profile.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\nname\n\n\nstring\n\n\nProfile name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\nlxc.profiles.delete(\nlocal\n, \nprofile-name\n).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}", 
            "title": "Profiles"
        }, 
        {
            "location": "/LXD/profiles/#list", 
            "text": "List profiles.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    mutator  function  Mutation function      lxc.profiles.list( local ).then(response =  {      console.log(response)  })   Response  [ \n     /1.0/profiles/default  ]", 
            "title": "List"
        }, 
        {
            "location": "/LXD/profiles/#info", 
            "text": "Get profile information.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Profile name     mutator  function  Mutation function      lxc.profiles.info( local ,  default ).then(response =  {      console.log(response)  })   Response  { \n     config :   {}, \n     description :   Default LXD profile , \n     devices :   { \n         eth0 :   { \n             name :   eth0 , \n             nictype :   bridged , \n             parent :   lxdbr0 , \n             type :   nic \n         }, \n         root :   { \n             path :   / , \n             pool :   default , \n             type :   disk \n         } \n     }, \n     name :   default , \n     used_by :   [ \n         /1.0/containers/my-container \n     ]  }", 
            "title": "Info"
        }, 
        {
            "location": "/LXD/profiles/#create", 
            "text": "Create profile.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    options  object  Profile options     mutator  function  Mutation function      lxc.profiles.create( local , {       name :  my-new-profile ,       description :  Some informative description string ,       config : {           limits.memory :  2GB      },       devices : {           kvm : {               type :  unix-char ,               path :  /dev/kvm          }      }  }).then(response =  {      console.log(response)  })   Response  {  }", 
            "title": "Create"
        }, 
        {
            "location": "/LXD/profiles/#replace", 
            "text": "Replace profile properties, update description, devices and limits.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Profile name     options  object  Profile options     mutator  function  Mutation function      lxc.profiles.replace( local ,  my-new-profile , {       config : {           limits.memory :  4GB      },       description :  Some description string ,       devices : {}  }).then(response =  {      console.log(response)  })   Response  {  }", 
            "title": "Replace"
        }, 
        {
            "location": "/LXD/profiles/#update", 
            "text": "Update profile properties, update description, devices and limits.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Profile name     options  object  Profile options     mutator  function  Mutation function      lxc.profiles.replace( local ,  my-new-profile , {       config : {           limits.memory :  4GB      },       description :  Some description string ,       devices : {}  }).then(response =  {      console.log(response)  })   Response  {  }", 
            "title": "Update"
        }, 
        {
            "location": "/LXD/profiles/#rename", 
            "text": "Rename a profile.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Profile name     newName  string  New profile name     mutator  function  Mutation function      lxc.profiles.rename( local ,  old-name ,  new-name ).then(response =  {      console.log(response)  })   Response  {  }", 
            "title": "Rename"
        }, 
        {
            "location": "/LXD/profiles/#delete", 
            "text": "Delete a profile.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    name  string  Profile name     mutator  function  Mutation function      lxc.profiles.delete( local ,  profile-name ).then(response =  {      console.log(response)  })   Response  {  }", 
            "title": "Delete"
        }, 
        {
            "location": "/LXD/server/", 
            "text": "Helper methods for server.\n\n\nInfo\n\n\nGet server information.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\n\n\nlxc.info(\nlocal\n).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \napi_extensions:\n \n[\n\n        \nstorage_zfs_remove_snapshots\n,\n\n        \ncontainer_host_shutdown_timeout\n,\n\n        \ncontainer_stop_priority\n,\n\n        \ncontainer_syscall_filtering\n,\n\n        \nauth_pki\n,\n\n        \ncontainer_last_used_at\n,\n\n        \netag\n,\n\n        \npatch\n,\n\n        \nusb_devices\n,\n\n        \nhttps_allowed_credentials\n,\n\n        \nimage_compression_algorithm\n,\n\n        \ndirectory_manipulation\n,\n\n        \ncontainer_cpu_time\n,\n\n        \nstorage_zfs_use_refquota\n,\n\n        \nstorage_lvm_mount_options\n,\n\n        \nnetwork\n,\n\n        \nprofile_usedby\n,\n\n        \ncontainer_push\n,\n\n        \ncontainer_exec_recording\n,\n\n        \ncertificate_update\n,\n\n        \ncontainer_exec_signal_handling\n,\n\n        \ngpu_devices\n,\n\n        \ncontainer_image_properties\n,\n\n        \nmigration_progress\n,\n\n        \nid_map\n,\n\n        \nnetwork_firewall_filtering\n,\n\n        \nnetwork_routes\n,\n\n        \nstorage\n,\n\n        \nfile_delete\n,\n\n        \nfile_append\n,\n\n        \nnetwork_dhcp_expiry\n,\n\n        \nstorage_lvm_vg_rename\n,\n\n        \nstorage_lvm_thinpool_rename\n,\n\n        \nnetwork_vlan\n,\n\n        \nimage_create_aliases\n,\n\n        \ncontainer_stateless_copy\n,\n\n        \ncontainer_only_migration\n,\n\n        \nstorage_zfs_clone_copy\n,\n\n        \nunix_device_rename\n,\n\n        \nstorage_lvm_use_thinpool\n,\n\n        \nstorage_rsync_bwlimit\n,\n\n        \nnetwork_vxlan_interface\n,\n\n        \nstorage_btrfs_mount_options\n,\n\n        \nentity_description\n,\n\n        \nimage_force_refresh\n,\n\n        \nstorage_lvm_lv_resizing\n,\n\n        \nid_map_base\n,\n\n        \nfile_symlinks\n,\n\n        \ncontainer_push_target\n,\n\n        \nnetwork_vlan_physical\n,\n\n        \nstorage_images_delete\n,\n\n        \ncontainer_edit_metadata\n,\n\n        \ncontainer_snapshot_stateful_migration\n,\n\n        \nstorage_driver_ceph\n,\n\n        \nstorage_ceph_user_name\n,\n\n        \nresource_limits\n,\n\n        \nstorage_volatile_initial_source\n,\n\n        \nstorage_ceph_force_osd_reuse\n,\n\n        \nstorage_block_filesystem_btrfs\n,\n\n        \nresources\n,\n\n        \nkernel_limits\n,\n\n        \nstorage_api_volume_rename\n,\n\n        \nmacaroon_authentication\n,\n\n        \nnetwork_sriov\n,\n\n        \nconsole\n,\n\n        \nrestrict_devlxd\n,\n\n        \nmigration_pre_copy\n,\n\n        \ninfiniband\n,\n\n        \nmaas_network\n,\n\n        \ndevlxd_events\n,\n\n        \nproxy\n,\n\n        \nnetwork_dhcp_gateway\n,\n\n        \nfile_get_symlink\n,\n\n        \nnetwork_leases\n,\n\n        \nunix_device_hotplug\n,\n\n        \nstorage_api_local_volume_handling\n,\n\n        \noperation_description\n,\n\n        \nclustering\n,\n\n        \nevent_lifecycle\n,\n\n        \nstorage_api_remote_volume_handling\n,\n\n        \nnvidia_runtime\n\n    \n],\n\n    \napi_status:\n \nstable\n,\n\n    \napi_version:\n \n1.0\n,\n\n    \nauth:\n \ntrusted\n,\n\n    \nauth_methods:\n \n[\n\n        \ntls\n\n    \n],\n\n    \nconfig:\n \n{\n}\n,\n\n    \nenvironment:\n \n{\n\n        \naddresses:\n \n[],\n\n        \narchitectures:\n \n[\n\n            \nx86_64\n,\n\n            \ni686\n\n        \n],\n\n        \ncertificate:\n \n-----BEGIN\n \nCERTIFICATE-----Snip-----END\n \nCERTIFICATE-----\\n\n,\n\n        \ncertificate_fingerprint:\n \ndc32c2ec49a7a234762fc4be670e7e72f8d156a1w0cf1a1d216e9abcc594f61d\n,\n\n        \ndriver:\n \nlxc\n,\n\n        \ndriver_version:\n \n3.0.0\n,\n\n        \nkernel:\n \nLinux\n,\n\n        \nkernel_architecture:\n \nx86_64\n,\n\n        \nkernel_version:\n \n4.13.0-38-generic\n,\n\n        \nserver:\n \nlxd\n,\n\n        \nserver_clustered:\n \nfalse,\n\n        \nserver_name:\n \nmy-lxd-server\n,\n\n        \nserver_pid:\n \n906,\n\n        \nserver_version:\n \n3.0.0\n,\n\n        \nstorage:\n \nzfs\n,\n\n        \nstorage_version:\n \n1\n\n    \n}\n,\n\n    \npublic:\n \nfalse\n\n\n}\n\n\n\n\n\n\nReplace\n\n\nReplaces the server configuration or other properties.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nThe server options\n\n\n\n\n\n\n\n\n\n\nReplaces any existing config with the provided one.\n\n\nlxc.replace(\nlocal\n, {\n\n\n    \nconfig\n: {\n\n\n        \ncore.trust_password\n: \nmy-new-password\n,\n\n\n        \ncore.https_address\n: \n[::]:8443\n\n\n    }\n\n\n}).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nUpdate\n\n\nUpdates the server configuration or other properties.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nThe server options\n\n\n\n\n\n\n\n\n\n\nUpdates only the listed keys, rest remain intact.\n\n\nlxc.update(\nlocal\n, {\n\n\n    \nconfig\n: {\n\n\n        \ncore.trust_password\n: \nmy-new-password\n,\n\n\n        \ncore.https_address\n: \n[::]:8443\n\n\n    }\n\n\n}).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}\n\n\n\n\n\n\nResources\n\n\nGet information about the resources available to the LXD server.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\n\n\nlxc.server.resources(\nlocal\n).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \ncpu\n:\n \n{\n\n        \nsockets\n:\n \n[\n\n            \n{\n\n                \ncores\n:\n \n6\n,\n\n                \nfrequency\n:\n \n3700\n,\n\n                \nfrequency_turbo\n:\n \n4700\n,\n\n                \nname\n:\n \nIntel\n,\n\n                \nthreads\n:\n \n12\n,\n\n                \nvendor\n:\n \nIntel Core i7-8700K\n\n            \n}\n\n        \n],\n\n        \ntotal\n:\n \n6\n\n    \n},\n\n    \nmemory\n:\n \n{\n\n        \ntotal\n:\n \n126590324224\n,\n\n        \nused\n:\n \n1426169856\n\n    \n},\n\n    \npool\n:\n \n{\n\n        \ninodes\n:\n \n{\n\n            \ntotal\n:\n \n0\n,\n\n            \nused\n:\n \n0\n\n        \n},\n\n        \nspace\n:\n \n{\n\n            \ntotal\n:\n \n0\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nRemotes\n\n\nGet currently defined remotes. (only works with local)\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlxc.server.remotes().then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n[\n\n    \nimages\n,\n\n    \nlocal\n,\n\n    \nubuntu\n,\n\n    \nubuntu-daily\n\n\n]\n\n\n\n\n\n\nLocal\n\n\nAllows you to execute local exec commands.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncommand\n\n\nstring\n\n\nShell command to run\n\n\n\n\n\n\n\n\n\n\nlxc.local(\nlxc list\n).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n+------------------+---------+-----------------------+------+------------+-----------+\n|       NAME       |  STATE  |         IPV4          | IPV6 |    TYPE    | SNAPSHOTS |\n+------------------+---------+-----------------------+------+------------+-----------+\n| my-container     | STOPPED |                       |      | EPHEMERAL  | 0         |\n+------------------+---------+-----------------------+------+------------+-----------+", 
            "title": "Server"
        }, 
        {
            "location": "/LXD/server/#info", 
            "text": "Get server information.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local     lxc.info( local ).then(response =  {      console.log(response)  })   Response  { \n     api_extensions:   [ \n         storage_zfs_remove_snapshots , \n         container_host_shutdown_timeout , \n         container_stop_priority , \n         container_syscall_filtering , \n         auth_pki , \n         container_last_used_at , \n         etag , \n         patch , \n         usb_devices , \n         https_allowed_credentials , \n         image_compression_algorithm , \n         directory_manipulation , \n         container_cpu_time , \n         storage_zfs_use_refquota , \n         storage_lvm_mount_options , \n         network , \n         profile_usedby , \n         container_push , \n         container_exec_recording , \n         certificate_update , \n         container_exec_signal_handling , \n         gpu_devices , \n         container_image_properties , \n         migration_progress , \n         id_map , \n         network_firewall_filtering , \n         network_routes , \n         storage , \n         file_delete , \n         file_append , \n         network_dhcp_expiry , \n         storage_lvm_vg_rename , \n         storage_lvm_thinpool_rename , \n         network_vlan , \n         image_create_aliases , \n         container_stateless_copy , \n         container_only_migration , \n         storage_zfs_clone_copy , \n         unix_device_rename , \n         storage_lvm_use_thinpool , \n         storage_rsync_bwlimit , \n         network_vxlan_interface , \n         storage_btrfs_mount_options , \n         entity_description , \n         image_force_refresh , \n         storage_lvm_lv_resizing , \n         id_map_base , \n         file_symlinks , \n         container_push_target , \n         network_vlan_physical , \n         storage_images_delete , \n         container_edit_metadata , \n         container_snapshot_stateful_migration , \n         storage_driver_ceph , \n         storage_ceph_user_name , \n         resource_limits , \n         storage_volatile_initial_source , \n         storage_ceph_force_osd_reuse , \n         storage_block_filesystem_btrfs , \n         resources , \n         kernel_limits , \n         storage_api_volume_rename , \n         macaroon_authentication , \n         network_sriov , \n         console , \n         restrict_devlxd , \n         migration_pre_copy , \n         infiniband , \n         maas_network , \n         devlxd_events , \n         proxy , \n         network_dhcp_gateway , \n         file_get_symlink , \n         network_leases , \n         unix_device_hotplug , \n         storage_api_local_volume_handling , \n         operation_description , \n         clustering , \n         event_lifecycle , \n         storage_api_remote_volume_handling , \n         nvidia_runtime \n     ], \n     api_status:   stable , \n     api_version:   1.0 , \n     auth:   trusted , \n     auth_methods:   [ \n         tls \n     ], \n     config:   { } , \n     environment:   { \n         addresses:   [], \n         architectures:   [ \n             x86_64 , \n             i686 \n         ], \n         certificate:   -----BEGIN   CERTIFICATE-----Snip-----END   CERTIFICATE-----\\n , \n         certificate_fingerprint:   dc32c2ec49a7a234762fc4be670e7e72f8d156a1w0cf1a1d216e9abcc594f61d , \n         driver:   lxc , \n         driver_version:   3.0.0 , \n         kernel:   Linux , \n         kernel_architecture:   x86_64 , \n         kernel_version:   4.13.0-38-generic , \n         server:   lxd , \n         server_clustered:   false, \n         server_name:   my-lxd-server , \n         server_pid:   906, \n         server_version:   3.0.0 , \n         storage:   zfs , \n         storage_version:   1 \n     } , \n     public:   false  }", 
            "title": "Info"
        }, 
        {
            "location": "/LXD/server/#replace", 
            "text": "Replaces the server configuration or other properties.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    options  object  The server options      Replaces any existing config with the provided one.  lxc.replace( local , {       config : {           core.trust_password :  my-new-password ,           core.https_address :  [::]:8443      }  }).then(response =  {      console.log(response)  })   Response  {  }", 
            "title": "Replace"
        }, 
        {
            "location": "/LXD/server/#update", 
            "text": "Updates the server configuration or other properties.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    options  object  The server options      Updates only the listed keys, rest remain intact.  lxc.update( local , {       config : {           core.trust_password :  my-new-password ,           core.https_address :  [::]:8443      }  }).then(response =  {      console.log(response)  })   Response  {  }", 
            "title": "Update"
        }, 
        {
            "location": "/LXD/server/#resources", 
            "text": "Get information about the resources available to the LXD server.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local     lxc.server.resources( local ).then(response =  {      console.log(response)  })   Response  { \n     cpu :   { \n         sockets :   [ \n             { \n                 cores :   6 , \n                 frequency :   3700 , \n                 frequency_turbo :   4700 , \n                 name :   Intel , \n                 threads :   12 , \n                 vendor :   Intel Core i7-8700K \n             } \n         ], \n         total :   6 \n     }, \n     memory :   { \n         total :   126590324224 , \n         used :   1426169856 \n     }, \n     pool :   { \n         inodes :   { \n             total :   0 , \n             used :   0 \n         }, \n         space :   { \n             total :   0 \n         } \n     }  }", 
            "title": "Resources"
        }, 
        {
            "location": "/LXD/server/#remotes", 
            "text": "Get currently defined remotes. (only works with local)  Parameters   Call     Parameter  Type  Description  Default      None        lxc.server.remotes().then(response =  {      console.log(response)  })   Response  [ \n     images , \n     local , \n     ubuntu , \n     ubuntu-daily  ]", 
            "title": "Remotes"
        }, 
        {
            "location": "/LXD/server/#local", 
            "text": "Allows you to execute local exec commands.  Parameters   Call     Parameter  Type  Description  Default      command  string  Shell command to run      lxc.local( lxc list ).then(response =  {      console.log(response)  })   Response  +------------------+---------+-----------------------+------+------------+-----------+\n|       NAME       |  STATE  |         IPV4          | IPV6 |    TYPE    | SNAPSHOTS |\n+------------------+---------+-----------------------+------+------------+-----------+\n| my-container     | STOPPED |                       |      | EPHEMERAL  | 0         |\n+------------------+---------+-----------------------+------+------------+-----------+", 
            "title": "Local"
        }, 
        {
            "location": "/LXD/snapshots/", 
            "text": "Helper methods for snapshots.\n\n\nList\n\n\nList container snapshots.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\nlxc.containers.snapshots.list(\nlocal\n, \nmy-container\n).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n// or apply stripEndpoint on response\n\n\nlxc.containers.snapshots.list(\nlocal\n, \nmy-container\n, response =\n lxc.containers.snapshots.stripEndpoint(response)).then(response =\n {\n\n\n    // [ \nmy-snapshot\n ]\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n[\n\n    \n/1.0/containers/my-container/snapshots/my-snapshot\n\n\n]\n\n\n\n\n\n\nInfo\n\n\nGet container snapshot information.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\nsnapshot\n\n\nstring\n\n\nSnapshot name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\nlxc.containers.snapshots.info(\nlocal\n, \nmy-container\n, \nmy-container (April 10, 2018 6:53 PM)\n).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \narchitecture\n:\n \nx86_64\n,\n\n    \nconfig\n:\n \n{\n\n        \nimage.architecture\n:\n \namd64\n,\n\n        \nimage.description\n:\n \nubuntu 16.04 LTS amd64 (release) (20180306)\n,\n\n        \nimage.label\n:\n \nrelease\n,\n\n        \nimage.os\n:\n \nubuntu\n,\n\n        \nimage.release\n:\n \nxenial\n,\n\n        \nimage.serial\n:\n \n20180306\n,\n\n        \nimage.version\n:\n \n16.04\n,\n\n        \nvolatile.base_image\n:\n \nc5bbef7f4e1c19f0104fd4ub862b2e54x095d894765c75c6d72775f1d98135ec\n,\n\n        \nvolatile.eth0.hwaddr\n:\n \n00:16:3e:24:39:ee\n,\n\n        \nvolatile.eth0.name\n:\n \neth0\n,\n\n        \nvolatile.idmap.base\n:\n \n0\n,\n\n        \nvolatile.idmap.next\n:\n \n[{\\\nIsuid\\\n:true,\\\nIsgid\\\n:false,\\\nHostid\\\n:165536,\\\nNsid\\\n:0,\\\nMaprange\\\n:65536},{\\\nIsuid\\\n:false,\\\nIsgid\\\n:true,\\\nHostid\\\n:165536,\\\nNsid\\\n:0,\\\nMaprange\\\n:65536}]\n,\n\n        \nvolatile.last_state.idmap\n:\n \n[{\\\nIsuid\\\n:true,\\\nIsgid\\\n:false,\\\nHostid\\\n:165536,\\\nNsid\\\n:0,\\\nMaprange\\\n:65536},{\\\nIsuid\\\n:false,\\\nIsgid\\\n:true,\\\nHostid\\\n:165536,\\\nNsid\\\n:0,\\\nMaprange\\\n:65536}]\n,\n\n        \nvolatile.last_state.power\n:\n \nSTOPPED\n\n    \n},\n\n    \ncreated_at\n:\n \n2018-04-10T17:53:44Z\n,\n\n    \ndevices\n:\n \n{},\n\n    \nephemeral\n:\n \nfalse\n,\n\n    \nexpanded_config\n:\n \n{\n\n        \nboot.autostart\n:\n \n0\n,\n\n        \nimage.architecture\n:\n \namd64\n,\n\n        \nimage.description\n:\n \nubuntu 16.04 LTS amd64 (release) (20180306)\n,\n\n        \nimage.label\n:\n \nrelease\n,\n\n        \nimage.os\n:\n \nubuntu\n,\n\n        \nimage.release\n:\n \nxenial\n,\n\n        \nimage.serial\n:\n \n20180306\n,\n\n        \nimage.version\n:\n \n16.04\n,\n\n        \nlimits.cpu\n:\n \n1\n,\n\n        \nlimits.cpu.allowance\n:\n \n90%\n,\n\n        \nlimits.cpu.priority\n:\n \n9\n,\n\n        \nlimits.disk.priority\n:\n \n9\n,\n\n        \nlimits.memory\n:\n \n1056MB\n,\n\n        \nlimits.memory.enforce\n:\n \nhard\n,\n\n        \nlimits.memory.swap\n:\n \n1\n,\n\n        \nlimits.memory.swap.priority\n:\n \n5\n,\n\n        \nlimits.network.priority\n:\n \n9\n,\n\n        \nlimits.processes\n:\n \n14100\n,\n\n        \nsecurity.nesting\n:\n \n0\n,\n\n        \nsecurity.privileged\n:\n \n0\n,\n\n        \nvolatile.base_image\n:\n \nc5bbef7f4e1c19f0104fd49b862b2e549095d894765c75c6d72775f1d98185ec\n,\n\n        \nvolatile.eth0.hwaddr\n:\n \n00:16:3e:24:39:ee\n,\n\n        \nvolatile.eth0.name\n:\n \neth0\n,\n\n        \nvolatile.idmap.base\n:\n \n0\n,\n\n        \nvolatile.idmap.next\n:\n \n[{\\\nIsuid\\\n:true,\\\nIsgid\\\n:false,\\\nHostid\\\n:165536,\\\nNsid\\\n:0,\\\nMaprange\\\n:65536},{\\\nIsuid\\\n:false,\\\nIsgid\\\n:true,\\\nHostid\\\n:165536,\\\nNsid\\\n:0,\\\nMaprange\\\n:65536}]\n,\n\n        \nvolatile.last_state.idmap\n:\n \n[{\\\nIsuid\\\n:true,\\\nIsgid\\\n:false,\\\nHostid\\\n:165536,\\\nNsid\\\n:0,\\\nMaprange\\\n:65536},{\\\nIsuid\\\n:false,\\\nIsgid\\\n:true,\\\nHostid\\\n:165536,\\\nNsid\\\n:0,\\\nMaprange\\\n:65536}]\n,\n\n        \nvolatile.last_state.power\n:\n \nSTOPPED\n\n    \n},\n\n    \nexpanded_devices\n:\n \n{\n\n        \neth0\n:\n \n{\n\n            \nnictype\n:\n \nbridged\n,\n\n            \nparent\n:\n \nlxdbr0\n,\n\n            \ntype\n:\n \nnic\n\n        \n},\n\n        \nroot\n:\n \n{\n\n            \npath\n:\n \n/\n,\n\n            \npool\n:\n \ndefault\n,\n\n            \ntype\n:\n \ndisk\n\n        \n}\n\n    \n},\n\n    \nlast_used_at\n:\n \n1970-01-01T00:00:00Z\n,\n\n    \nname\n:\n \nmy-container/my-container (April 10, 2018 6:53 PM)\n,\n\n    \nprofiles\n:\n \n[\n\n        \ndefault\n\n    \n],\n\n    \nstateful\n:\n \nfalse\n\n\n}\n\n\n\n\n\n\nCreate\n\n\nCreate container snapshot.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\noptions\n\n\nobject\n\n\nSnapshot options\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\nlxc.containers.snapshots.create(\nlocal\n, \nmy-container\n, {\n\n\n    \nname\n: \nmy-snapshot\n,\n\n\n    \nstateful\n: true\n\n\n}).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \nclass\n:\n \ntask\n,\n\n    \ncreated_at\n:\n \n2018-04-09T17:57:48.19705024Z\n,\n\n    \ndescription\n:\n \nSnapshotting container\n,\n\n    \nerr\n:\n \n,\n\n    \nid\n:\n \n5db401c7-8d31-4110-aa15-0c6398a36cdb\n,\n\n    \nmay_cancel\n:\n \nfalse\n,\n\n    \nmetadata\n:\n \nnull\n,\n\n    \nresources\n:\n \n{\n\n        \ncontainers\n:\n \n[\n\n            \n/1.0/containers/my-container\n\n        \n]\n\n    \n},\n\n    \nstatus\n:\n \nRunning\n,\n\n    \nstatus_code\n:\n \n103\n,\n\n    \nupdated_at\n:\n \n2018-04-09T17:57:48.19705024Z\n\n\n}\n\n\n\n\n\n\nRename\n\n\nRename container snapshot.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\nsnapshot\n\n\nstring\n\n\nSnapshot name\n\n\n\n\n\n\n\n\nnewname\n\n\nstring\n\n\nNew snapshot name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\nlxc.containers.snapshots.rename(\nlocal\n, \nmy-container\n, \nmy-snapshot-name\n, \nnew-snapshot-name\n).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \nclass\n:\n \ntask\n,\n\n    \ncreated_at\n:\n \n2018-04-10T19:17:15.517952676+01:00\n,\n\n    \nerr\n:\n \n,\n\n    \nid\n:\n \n1863b8ce-b3d5-4a35-87bc-959eafbb106d\n,\n\n    \nmay_cancel\n:\n \nfalse\n,\n\n    \nmetadata\n:\n \nnull\n,\n\n    \nresources\n:\n \n{\n\n        \ncontainers\n:\n \n[\n\n            \n/1.0/containers/my-container\n\n        \n]\n\n    \n},\n\n    \nstatus\n:\n \nRunning\n,\n\n    \nstatus_code\n:\n \n103\n,\n\n    \nupdated_at\n:\n \n2018-04-10T19:17:15.517952676+01:00\n\n\n}\n\n\n\n\n\n\nDelete\n\n\nDelete container snapshot.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\nsnapshot\n\n\nstring\n\n\nSnapshot name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\nlxc.containers.snapshots.delete(\nlocal\n, \nmy-container\n, \nmy-snapshot-name\n).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n    \nclass:\n \ntask\n,\n\n    \ncreated_at:\n \n2018-04-10T20:23:56.80835635+01:00\n,\n\n    \nerr:\n \n,\n\n    \nid:\n \nd1a9df55-5748-40ff-a0e3-09e0096f278b\n,\n\n    \nmay_cancel:\n \nfalse,\n\n    \nmetadata:\n \nnull,\n\n    \nresources:\n \n{\n\n        \ncontainers:\n \n[\n/1.0/containers/my-container/my-snapshot\n]\n\n    \n}\n,\n\n    \nstatus:\n \nRunning\n,\n\n    \nstatus_code:\n \n103\n,\n\n    \nupdated_at:\n \n2018-04-10\nT\n20\n:\n23\n:\n56.80835635\n+\n01\n:\n00\n\n\n}\n\n\n\n\n\n\nRestore\n\n\nRestore container snapshot.\n\n\nParameters \n Call\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nremote\n\n\nstring\n\n\nLXD remote\n\n\nlocal\n\n\n\n\n\n\ncontainer\n\n\nstring\n\n\nContainer name\n\n\n\n\n\n\n\n\nsnapshot\n\n\nstring\n\n\nSnapshot name\n\n\n\n\n\n\n\n\nmutator\n\n\nfunction\n\n\nMutation function\n\n\n\n\n\n\n\n\n\n\nlxc.containers.snapshots.restore(\nlocal\n, \nmy-container\n, \nmy-snapshot-name\n).then(response =\n {\n\n\n    console.log(response)\n\n\n})\n\n\n\n\n\n\nResponse\n\n\n{\n\n\n\n}", 
            "title": "Snapshots"
        }, 
        {
            "location": "/LXD/snapshots/#list", 
            "text": "List container snapshots.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  Container name     mutator  function  Mutation function      lxc.containers.snapshots.list( local ,  my-container ).then(response =  {      console.log(response)  })  // or apply stripEndpoint on response  lxc.containers.snapshots.list( local ,  my-container , response =  lxc.containers.snapshots.stripEndpoint(response)).then(response =  {      // [  my-snapshot  ]      console.log(response)  })   Response  [ \n     /1.0/containers/my-container/snapshots/my-snapshot  ]", 
            "title": "List"
        }, 
        {
            "location": "/LXD/snapshots/#info", 
            "text": "Get container snapshot information.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  Container name     snapshot  string  Snapshot name     mutator  function  Mutation function      lxc.containers.snapshots.info( local ,  my-container ,  my-container (April 10, 2018 6:53 PM) ).then(response =  {      console.log(response)  })   Response  { \n     architecture :   x86_64 , \n     config :   { \n         image.architecture :   amd64 , \n         image.description :   ubuntu 16.04 LTS amd64 (release) (20180306) , \n         image.label :   release , \n         image.os :   ubuntu , \n         image.release :   xenial , \n         image.serial :   20180306 , \n         image.version :   16.04 , \n         volatile.base_image :   c5bbef7f4e1c19f0104fd4ub862b2e54x095d894765c75c6d72775f1d98135ec , \n         volatile.eth0.hwaddr :   00:16:3e:24:39:ee , \n         volatile.eth0.name :   eth0 , \n         volatile.idmap.base :   0 , \n         volatile.idmap.next :   [{\\ Isuid\\ :true,\\ Isgid\\ :false,\\ Hostid\\ :165536,\\ Nsid\\ :0,\\ Maprange\\ :65536},{\\ Isuid\\ :false,\\ Isgid\\ :true,\\ Hostid\\ :165536,\\ Nsid\\ :0,\\ Maprange\\ :65536}] , \n         volatile.last_state.idmap :   [{\\ Isuid\\ :true,\\ Isgid\\ :false,\\ Hostid\\ :165536,\\ Nsid\\ :0,\\ Maprange\\ :65536},{\\ Isuid\\ :false,\\ Isgid\\ :true,\\ Hostid\\ :165536,\\ Nsid\\ :0,\\ Maprange\\ :65536}] , \n         volatile.last_state.power :   STOPPED \n     }, \n     created_at :   2018-04-10T17:53:44Z , \n     devices :   {}, \n     ephemeral :   false , \n     expanded_config :   { \n         boot.autostart :   0 , \n         image.architecture :   amd64 , \n         image.description :   ubuntu 16.04 LTS amd64 (release) (20180306) , \n         image.label :   release , \n         image.os :   ubuntu , \n         image.release :   xenial , \n         image.serial :   20180306 , \n         image.version :   16.04 , \n         limits.cpu :   1 , \n         limits.cpu.allowance :   90% , \n         limits.cpu.priority :   9 , \n         limits.disk.priority :   9 , \n         limits.memory :   1056MB , \n         limits.memory.enforce :   hard , \n         limits.memory.swap :   1 , \n         limits.memory.swap.priority :   5 , \n         limits.network.priority :   9 , \n         limits.processes :   14100 , \n         security.nesting :   0 , \n         security.privileged :   0 , \n         volatile.base_image :   c5bbef7f4e1c19f0104fd49b862b2e549095d894765c75c6d72775f1d98185ec , \n         volatile.eth0.hwaddr :   00:16:3e:24:39:ee , \n         volatile.eth0.name :   eth0 , \n         volatile.idmap.base :   0 , \n         volatile.idmap.next :   [{\\ Isuid\\ :true,\\ Isgid\\ :false,\\ Hostid\\ :165536,\\ Nsid\\ :0,\\ Maprange\\ :65536},{\\ Isuid\\ :false,\\ Isgid\\ :true,\\ Hostid\\ :165536,\\ Nsid\\ :0,\\ Maprange\\ :65536}] , \n         volatile.last_state.idmap :   [{\\ Isuid\\ :true,\\ Isgid\\ :false,\\ Hostid\\ :165536,\\ Nsid\\ :0,\\ Maprange\\ :65536},{\\ Isuid\\ :false,\\ Isgid\\ :true,\\ Hostid\\ :165536,\\ Nsid\\ :0,\\ Maprange\\ :65536}] , \n         volatile.last_state.power :   STOPPED \n     }, \n     expanded_devices :   { \n         eth0 :   { \n             nictype :   bridged , \n             parent :   lxdbr0 , \n             type :   nic \n         }, \n         root :   { \n             path :   / , \n             pool :   default , \n             type :   disk \n         } \n     }, \n     last_used_at :   1970-01-01T00:00:00Z , \n     name :   my-container/my-container (April 10, 2018 6:53 PM) , \n     profiles :   [ \n         default \n     ], \n     stateful :   false  }", 
            "title": "Info"
        }, 
        {
            "location": "/LXD/snapshots/#create", 
            "text": "Create container snapshot.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  Container name     options  object  Snapshot options     mutator  function  Mutation function      lxc.containers.snapshots.create( local ,  my-container , {       name :  my-snapshot ,       stateful : true  }).then(response =  {      console.log(response)  })   Response  { \n     class :   task , \n     created_at :   2018-04-09T17:57:48.19705024Z , \n     description :   Snapshotting container , \n     err :   , \n     id :   5db401c7-8d31-4110-aa15-0c6398a36cdb , \n     may_cancel :   false , \n     metadata :   null , \n     resources :   { \n         containers :   [ \n             /1.0/containers/my-container \n         ] \n     }, \n     status :   Running , \n     status_code :   103 , \n     updated_at :   2018-04-09T17:57:48.19705024Z  }", 
            "title": "Create"
        }, 
        {
            "location": "/LXD/snapshots/#rename", 
            "text": "Rename container snapshot.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  Container name     snapshot  string  Snapshot name     newname  string  New snapshot name     mutator  function  Mutation function      lxc.containers.snapshots.rename( local ,  my-container ,  my-snapshot-name ,  new-snapshot-name ).then(response =  {      console.log(response)  })   Response  { \n     class :   task , \n     created_at :   2018-04-10T19:17:15.517952676+01:00 , \n     err :   , \n     id :   1863b8ce-b3d5-4a35-87bc-959eafbb106d , \n     may_cancel :   false , \n     metadata :   null , \n     resources :   { \n         containers :   [ \n             /1.0/containers/my-container \n         ] \n     }, \n     status :   Running , \n     status_code :   103 , \n     updated_at :   2018-04-10T19:17:15.517952676+01:00  }", 
            "title": "Rename"
        }, 
        {
            "location": "/LXD/snapshots/#delete", 
            "text": "Delete container snapshot.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  Container name     snapshot  string  Snapshot name     mutator  function  Mutation function      lxc.containers.snapshots.delete( local ,  my-container ,  my-snapshot-name ).then(response =  {      console.log(response)  })   Response  { \n     class:   task , \n     created_at:   2018-04-10T20:23:56.80835635+01:00 , \n     err:   , \n     id:   d1a9df55-5748-40ff-a0e3-09e0096f278b , \n     may_cancel:   false, \n     metadata:   null, \n     resources:   { \n         containers:   [ /1.0/containers/my-container/my-snapshot ] \n     } , \n     status:   Running , \n     status_code:   103 , \n     updated_at:   2018-04-10 T 20 : 23 : 56.80835635 + 01 : 00  }", 
            "title": "Delete"
        }, 
        {
            "location": "/LXD/snapshots/#restore", 
            "text": "Restore container snapshot.  Parameters   Call     Parameter  Type  Description  Default      remote  string  LXD remote  local    container  string  Container name     snapshot  string  Snapshot name     mutator  function  Mutation function      lxc.containers.snapshots.restore( local ,  my-container ,  my-snapshot-name ).then(response =  {      console.log(response)  })   Response  {  }", 
            "title": "Restore"
        }
    ]
}